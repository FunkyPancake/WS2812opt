
rgb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08010364  08010364  00020364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08010540  08010540  00020540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08010544  08010544  00020544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000158  20000000  08010548  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001194  20000158  080106a0  00030158  2**2
                  ALLOC
  7 ._user_heap_stack 00002000  200012ec  080106a0  000312ec  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cab2  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000399c  00000000  00000000  0004cc32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000348  00000000  00000000  000505d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000070e1  00000000  00000000  00050918  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000490e  00000000  00000000  000579f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  0005c307  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00003a40  00000000  00000000  0005c384  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  0005fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801034c 	.word	0x0801034c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	0801034c 	.word	0x0801034c

08000108 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800010c:	4b07      	ldr	r3, [pc, #28]	; (800012c <HAL_Init+0x24>)
 800010e:	4a07      	ldr	r2, [pc, #28]	; (800012c <HAL_Init+0x24>)
 8000110:	6812      	ldr	r2, [r2, #0]
 8000112:	2110      	movs	r1, #16
 8000114:	430a      	orrs	r2, r1
 8000116:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000118:	2000      	movs	r0, #0
 800011a:	f000 f833 	bl	8000184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800011e:	f00e fc91 	bl	800ea44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000122:	2300      	movs	r3, #0
}
 8000124:	0018      	movs	r0, r3
 8000126:	46bd      	mov	sp, r7
 8000128:	bd80      	pop	{r7, pc}
 800012a:	46c0      	nop			; (mov r8, r8)
 800012c:	40022000 	.word	0x40022000

08000130 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000130:	b580      	push	{r7, lr}
 8000132:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000134:	4b0d      	ldr	r3, [pc, #52]	; (800016c <HAL_DeInit+0x3c>)
 8000136:	2201      	movs	r2, #1
 8000138:	4252      	negs	r2, r2
 800013a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 800013c:	4b0b      	ldr	r3, [pc, #44]	; (800016c <HAL_DeInit+0x3c>)
 800013e:	2200      	movs	r2, #0
 8000140:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000142:	4b0a      	ldr	r3, [pc, #40]	; (800016c <HAL_DeInit+0x3c>)
 8000144:	2201      	movs	r2, #1
 8000146:	4252      	negs	r2, r2
 8000148:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800014a:	4b08      	ldr	r3, [pc, #32]	; (800016c <HAL_DeInit+0x3c>)
 800014c:	2200      	movs	r2, #0
 800014e:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <HAL_DeInit+0x3c>)
 8000152:	2201      	movs	r2, #1
 8000154:	4252      	negs	r2, r2
 8000156:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <HAL_DeInit+0x3c>)
 800015a:	2200      	movs	r2, #0
 800015c:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800015e:	f000 f80c 	bl	800017a <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000162:	2300      	movs	r3, #0
}
 8000164:	0018      	movs	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	46c0      	nop			; (mov r8, r8)
 800016c:	40021000 	.word	0x40021000
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000174:	46c0      	nop			; (mov r8, r8)
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}

0800017a <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800017e:	46c0      	nop			; (mov r8, r8)
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800018c:	f004 f9b6 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8000190:	0002      	movs	r2, r0
 8000192:	23fa      	movs	r3, #250	; 0xfa
 8000194:	0099      	lsls	r1, r3, #2
 8000196:	0010      	movs	r0, r2
 8000198:	f00f ffec 	bl	8010174 <__udivsi3>
 800019c:	0003      	movs	r3, r0
 800019e:	0018      	movs	r0, r3
 80001a0:	f000 fa63 	bl	800066a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001a4:	6879      	ldr	r1, [r7, #4]
 80001a6:	2301      	movs	r3, #1
 80001a8:	425b      	negs	r3, r3
 80001aa:	2200      	movs	r2, #0
 80001ac:	0018      	movs	r0, r3
 80001ae:	f000 fa1f 	bl	80005f0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80001b2:	2300      	movs	r3, #0
}
 80001b4:	0018      	movs	r0, r3
 80001b6:	46bd      	mov	sp, r7
 80001b8:	b002      	add	sp, #8
 80001ba:	bd80      	pop	{r7, pc}

080001bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
  uwTick++;
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <HAL_IncTick+0x14>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	1c5a      	adds	r2, r3, #1
 80001c6:	4b02      	ldr	r3, [pc, #8]	; (80001d0 <HAL_IncTick+0x14>)
 80001c8:	601a      	str	r2, [r3, #0]
}
 80001ca:	46c0      	nop			; (mov r8, r8)
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	2000039c 	.word	0x2000039c

080001d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  return uwTick;
 80001d8:	4b02      	ldr	r3, [pc, #8]	; (80001e4 <HAL_GetTick+0x10>)
 80001da:	681b      	ldr	r3, [r3, #0]
}
 80001dc:	0018      	movs	r0, r3
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	46c0      	nop			; (mov r8, r8)
 80001e4:	2000039c 	.word	0x2000039c

080001e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff0 	bl	80001d4 <HAL_GetTick>
 80001f4:	0003      	movs	r3, r0
 80001f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	3301      	adds	r3, #1
 8000200:	d002      	beq.n	8000208 <HAL_Delay+0x20>
  {
     wait++;
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	3301      	adds	r3, #1
 8000206:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000208:	46c0      	nop			; (mov r8, r8)
 800020a:	f7ff ffe3 	bl	80001d4 <HAL_GetTick>
 800020e:	0002      	movs	r2, r0
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	1ad2      	subs	r2, r2, r3
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	429a      	cmp	r2, r3
 8000218:	d3f7      	bcc.n	800020a <HAL_Delay+0x22>
  {
  }
}
 800021a:	46c0      	nop			; (mov r8, r8)
 800021c:	46bd      	mov	sp, r7
 800021e:	b004      	add	sp, #16
 8000220:	bd80      	pop	{r7, pc}

08000222 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8000222:	b580      	push	{r7, lr}
 8000224:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000226:	4b04      	ldr	r3, [pc, #16]	; (8000238 <HAL_SuspendTick+0x16>)
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <HAL_SuspendTick+0x16>)
 800022a:	6812      	ldr	r2, [r2, #0]
 800022c:	2102      	movs	r1, #2
 800022e:	438a      	bics	r2, r1
 8000230:	601a      	str	r2, [r3, #0]
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	e000e010 	.word	0xe000e010

0800023c <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <HAL_ResumeTick+0x18>)
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <HAL_ResumeTick+0x18>)
 8000244:	6812      	ldr	r2, [r2, #0]
 8000246:	2102      	movs	r1, #2
 8000248:	430a      	orrs	r2, r1
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	e000e010 	.word	0xe000e010

08000258 <HAL_GetHalVersion>:
/**
  * @brief  This method returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
 return __STM32F0xx_HAL_VERSION;
 800025c:	4b01      	ldr	r3, [pc, #4]	; (8000264 <HAL_GetHalVersion+0xc>)
}
 800025e:	0018      	movs	r0, r3
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	01070000 	.word	0x01070000

08000268 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 800026c:	4b02      	ldr	r3, [pc, #8]	; (8000278 <HAL_GetREVID+0x10>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	0c1b      	lsrs	r3, r3, #16
}
 8000272:	0018      	movs	r0, r3
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40015800 	.word	0x40015800

0800027c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetDEVID+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	051b      	lsls	r3, r3, #20
 8000286:	0d1b      	lsrs	r3, r3, #20
}
 8000288:	0018      	movs	r0, r3
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	40015800 	.word	0x40015800

08000294 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8000298:	4b02      	ldr	r3, [pc, #8]	; (80002a4 <HAL_GetUIDw0+0x10>)
 800029a:	681b      	ldr	r3, [r3, #0]
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	1ffff7ac 	.word	0x1ffff7ac

080002a8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <HAL_GetUIDw1+0x10>)
 80002ae:	681b      	ldr	r3, [r3, #0]
}
 80002b0:	0018      	movs	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	1ffff7b0 	.word	0x1ffff7b0

080002bc <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80002c0:	4b02      	ldr	r3, [pc, #8]	; (80002cc <HAL_GetUIDw2+0x10>)
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	0018      	movs	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	1ffff7b4 	.word	0x1ffff7b4

080002d0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode       
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80002d6:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80002d8:	6852      	ldr	r2, [r2, #4]
 80002da:	2102      	movs	r1, #2
 80002dc:	430a      	orrs	r2, r1
 80002de:	605a      	str	r2, [r3, #4]
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	40015800 	.word	0x40015800

080002ec <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode       
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80002f2:	4a04      	ldr	r2, [pc, #16]	; (8000304 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 80002f4:	6852      	ldr	r2, [r2, #4]
 80002f6:	2102      	movs	r1, #2
 80002f8:	438a      	bics	r2, r1
 80002fa:	605a      	str	r2, [r3, #4]
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	40015800 	.word	0x40015800

08000308 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode       
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800030c:	4b04      	ldr	r3, [pc, #16]	; (8000320 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800030e:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000310:	6852      	ldr	r2, [r2, #4]
 8000312:	2104      	movs	r1, #4
 8000314:	430a      	orrs	r2, r1
 8000316:	605a      	str	r2, [r3, #4]
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	40015800 	.word	0x40015800

08000324 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode       
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000328:	4b04      	ldr	r3, [pc, #16]	; (800033c <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800032a:	4a04      	ldr	r2, [pc, #16]	; (800033c <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800032c:	6852      	ldr	r2, [r2, #4]
 800032e:	2104      	movs	r1, #4
 8000330:	438a      	bics	r2, r1
 8000332:	605a      	str	r2, [r3, #4]
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40015800 	.word	0x40015800

08000340 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	0002      	movs	r2, r0
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <NVIC_EnableIRQ+0x28>)
 800034e:	1dfa      	adds	r2, r7, #7
 8000350:	7812      	ldrb	r2, [r2, #0]
 8000352:	0011      	movs	r1, r2
 8000354:	221f      	movs	r2, #31
 8000356:	400a      	ands	r2, r1
 8000358:	2101      	movs	r1, #1
 800035a:	4091      	lsls	r1, r2
 800035c:	000a      	movs	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	b002      	add	sp, #8
 8000366:	bd80      	pop	{r7, pc}
 8000368:	e000e100 	.word	0xe000e100

0800036c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	0002      	movs	r2, r0
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000378:	4907      	ldr	r1, [pc, #28]	; (8000398 <NVIC_DisableIRQ+0x2c>)
 800037a:	1dfb      	adds	r3, r7, #7
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	001a      	movs	r2, r3
 8000380:	231f      	movs	r3, #31
 8000382:	4013      	ands	r3, r2
 8000384:	2201      	movs	r2, #1
 8000386:	409a      	lsls	r2, r3
 8000388:	0013      	movs	r3, r2
 800038a:	2280      	movs	r2, #128	; 0x80
 800038c:	508b      	str	r3, [r1, r2]
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46bd      	mov	sp, r7
 8000392:	b002      	add	sp, #8
 8000394:	bd80      	pop	{r7, pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	e000e100 	.word	0xe000e100

0800039c <NVIC_GetPendingIRQ>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	0002      	movs	r2, r0
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	701a      	strb	r2, [r3, #0]
  return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80003a8:	4a08      	ldr	r2, [pc, #32]	; (80003cc <NVIC_GetPendingIRQ+0x30>)
 80003aa:	2380      	movs	r3, #128	; 0x80
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	58d2      	ldr	r2, [r2, r3]
 80003b0:	1dfb      	adds	r3, r7, #7
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	0019      	movs	r1, r3
 80003b6:	231f      	movs	r3, #31
 80003b8:	400b      	ands	r3, r1
 80003ba:	40da      	lsrs	r2, r3
 80003bc:	0013      	movs	r3, r2
 80003be:	2201      	movs	r2, #1
 80003c0:	4013      	ands	r3, r2
}
 80003c2:	0018      	movs	r0, r3
 80003c4:	46bd      	mov	sp, r7
 80003c6:	b002      	add	sp, #8
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	e000e100 	.word	0xe000e100

080003d0 <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	0002      	movs	r2, r0
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	701a      	strb	r2, [r3, #0]
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003dc:	4907      	ldr	r1, [pc, #28]	; (80003fc <NVIC_SetPendingIRQ+0x2c>)
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	001a      	movs	r2, r3
 80003e4:	231f      	movs	r3, #31
 80003e6:	4013      	ands	r3, r2
 80003e8:	2201      	movs	r2, #1
 80003ea:	409a      	lsls	r2, r3
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	50ca      	str	r2, [r1, r3]
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	b002      	add	sp, #8
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	e000e100 	.word	0xe000e100

08000400 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	0002      	movs	r2, r0
 8000408:	1dfb      	adds	r3, r7, #7
 800040a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800040c:	4907      	ldr	r1, [pc, #28]	; (800042c <NVIC_ClearPendingIRQ+0x2c>)
 800040e:	1dfb      	adds	r3, r7, #7
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	001a      	movs	r2, r3
 8000414:	231f      	movs	r3, #31
 8000416:	4013      	ands	r3, r2
 8000418:	2201      	movs	r2, #1
 800041a:	409a      	lsls	r2, r3
 800041c:	23c0      	movs	r3, #192	; 0xc0
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	50ca      	str	r2, [r1, r3]
}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b002      	add	sp, #8
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	e000e100 	.word	0xe000e100

08000430 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000430:	b5b0      	push	{r4, r5, r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	0002      	movs	r2, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	1dfb      	adds	r3, r7, #7
 800043c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b7f      	cmp	r3, #127	; 0x7f
 8000444:	d932      	bls.n	80004ac <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000446:	4c2f      	ldr	r4, [pc, #188]	; (8000504 <NVIC_SetPriority+0xd4>)
 8000448:	1dfb      	adds	r3, r7, #7
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	001a      	movs	r2, r3
 800044e:	230f      	movs	r3, #15
 8000450:	4013      	ands	r3, r2
 8000452:	3b08      	subs	r3, #8
 8000454:	0899      	lsrs	r1, r3, #2
 8000456:	4a2b      	ldr	r2, [pc, #172]	; (8000504 <NVIC_SetPriority+0xd4>)
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	0018      	movs	r0, r3
 800045e:	230f      	movs	r3, #15
 8000460:	4003      	ands	r3, r0
 8000462:	3b08      	subs	r3, #8
 8000464:	089b      	lsrs	r3, r3, #2
 8000466:	3306      	adds	r3, #6
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	18d3      	adds	r3, r2, r3
 800046c:	3304      	adds	r3, #4
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	1dfa      	adds	r2, r7, #7
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	0010      	movs	r0, r2
 8000476:	2203      	movs	r2, #3
 8000478:	4002      	ands	r2, r0
 800047a:	00d2      	lsls	r2, r2, #3
 800047c:	20ff      	movs	r0, #255	; 0xff
 800047e:	4090      	lsls	r0, r2
 8000480:	0002      	movs	r2, r0
 8000482:	43d2      	mvns	r2, r2
 8000484:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	019b      	lsls	r3, r3, #6
 800048a:	20ff      	movs	r0, #255	; 0xff
 800048c:	4018      	ands	r0, r3
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	001d      	movs	r5, r3
 8000494:	2303      	movs	r3, #3
 8000496:	402b      	ands	r3, r5
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	4098      	lsls	r0, r3
 800049c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800049e:	431a      	orrs	r2, r3
 80004a0:	1d8b      	adds	r3, r1, #6
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	18e3      	adds	r3, r4, r3
 80004a6:	3304      	adds	r3, #4
 80004a8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004aa:	e027      	b.n	80004fc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ac:	4c16      	ldr	r4, [pc, #88]	; (8000508 <NVIC_SetPriority+0xd8>)
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	089b      	lsrs	r3, r3, #2
 80004b6:	4914      	ldr	r1, [pc, #80]	; (8000508 <NVIC_SetPriority+0xd8>)
 80004b8:	1dfa      	adds	r2, r7, #7
 80004ba:	7812      	ldrb	r2, [r2, #0]
 80004bc:	b252      	sxtb	r2, r2
 80004be:	0892      	lsrs	r2, r2, #2
 80004c0:	32c0      	adds	r2, #192	; 0xc0
 80004c2:	0092      	lsls	r2, r2, #2
 80004c4:	5852      	ldr	r2, [r2, r1]
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	7809      	ldrb	r1, [r1, #0]
 80004ca:	0008      	movs	r0, r1
 80004cc:	2103      	movs	r1, #3
 80004ce:	4001      	ands	r1, r0
 80004d0:	00c9      	lsls	r1, r1, #3
 80004d2:	20ff      	movs	r0, #255	; 0xff
 80004d4:	4088      	lsls	r0, r1
 80004d6:	0001      	movs	r1, r0
 80004d8:	43c9      	mvns	r1, r1
 80004da:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	0192      	lsls	r2, r2, #6
 80004e0:	20ff      	movs	r0, #255	; 0xff
 80004e2:	4010      	ands	r0, r2
 80004e4:	1dfa      	adds	r2, r7, #7
 80004e6:	7812      	ldrb	r2, [r2, #0]
 80004e8:	0015      	movs	r5, r2
 80004ea:	2203      	movs	r2, #3
 80004ec:	402a      	ands	r2, r5
 80004ee:	00d2      	lsls	r2, r2, #3
 80004f0:	4090      	lsls	r0, r2
 80004f2:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f4:	430a      	orrs	r2, r1
 80004f6:	33c0      	adds	r3, #192	; 0xc0
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	511a      	str	r2, [r3, r4]
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bdb0      	pop	{r4, r5, r7, pc}
 8000504:	e000ed00 	.word	0xe000ed00
 8000508:	e000e100 	.word	0xe000e100

0800050c <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	0002      	movs	r2, r0
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	701a      	strb	r2, [r3, #0]

  if ((int32_t)(IRQn) < 0)
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b7f      	cmp	r3, #127	; 0x7f
 800051e:	d918      	bls.n	8000552 <NVIC_GetPriority+0x46>
  {
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
 8000520:	4a17      	ldr	r2, [pc, #92]	; (8000580 <NVIC_GetPriority+0x74>)
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	0019      	movs	r1, r3
 8000528:	230f      	movs	r3, #15
 800052a:	400b      	ands	r3, r1
 800052c:	3b08      	subs	r3, #8
 800052e:	089b      	lsrs	r3, r3, #2
 8000530:	3306      	adds	r3, #6
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	18d3      	adds	r3, r2, r3
 8000536:	3304      	adds	r3, #4
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	1dfb      	adds	r3, r7, #7
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	0019      	movs	r1, r3
 8000540:	2303      	movs	r3, #3
 8000542:	400b      	ands	r3, r1
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	40da      	lsrs	r2, r3
 8000548:	0013      	movs	r3, r2
 800054a:	099b      	lsrs	r3, r3, #6
 800054c:	2203      	movs	r2, #3
 800054e:	4013      	ands	r3, r2
 8000550:	e012      	b.n	8000578 <NVIC_GetPriority+0x6c>
  }
  else
  {
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
 8000552:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <NVIC_GetPriority+0x78>)
 8000554:	1dfb      	adds	r3, r7, #7
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b25b      	sxtb	r3, r3
 800055a:	089b      	lsrs	r3, r3, #2
 800055c:	33c0      	adds	r3, #192	; 0xc0
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	589a      	ldr	r2, [r3, r2]
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	0019      	movs	r1, r3
 8000568:	2303      	movs	r3, #3
 800056a:	400b      	ands	r3, r1
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	40da      	lsrs	r2, r3
 8000570:	0013      	movs	r3, r2
 8000572:	099b      	lsrs	r3, r3, #6
 8000574:	2203      	movs	r2, #3
 8000576:	4013      	ands	r3, r2
  }
}
 8000578:	0018      	movs	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}
 8000580:	e000ed00 	.word	0xe000ed00
 8000584:	e000e100 	.word	0xe000e100

08000588 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800058c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000590:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <NVIC_SystemReset+0x18>)
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <NVIC_SystemReset+0x1c>)
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800059a:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800059c:	e7fd      	b.n	800059a <NVIC_SystemReset+0x12>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	e000ed00 	.word	0xe000ed00
 80005a4:	05fa0004 	.word	0x05fa0004

080005a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <SysTick_Config+0x40>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d901      	bls.n	80005be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ba:	2301      	movs	r3, #1
 80005bc:	e010      	b.n	80005e0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <SysTick_Config+0x44>)
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	3a01      	subs	r2, #1
 80005c4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005c6:	2301      	movs	r3, #1
 80005c8:	425b      	negs	r3, r3
 80005ca:	2103      	movs	r1, #3
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff ff2f 	bl	8000430 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <SysTick_Config+0x44>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <SysTick_Config+0x44>)
 80005da:	2207      	movs	r2, #7
 80005dc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005de:	2300      	movs	r3, #0
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b002      	add	sp, #8
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	00ffffff 	.word	0x00ffffff
 80005ec:	e000e010 	.word	0xe000e010

080005f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
 80005fa:	230f      	movs	r3, #15
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	1c02      	adds	r2, r0, #0
 8000600:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	230f      	movs	r3, #15
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b25b      	sxtb	r3, r3
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f7ff ff0e 	bl	8000430 <NVIC_SetPriority>
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b004      	add	sp, #16
 800061a:	bd80      	pop	{r7, pc}

0800061c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b25b      	sxtb	r3, r3
 800062e:	0018      	movs	r0, r3
 8000630:	f7ff fe86 	bl	8000340 <NVIC_EnableIRQ>
}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}

0800063c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	0002      	movs	r2, r0
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff fe8c 	bl	800036c <NVIC_DisableIRQ>
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b002      	add	sp, #8
 800065a:	bd80      	pop	{r7, pc}

0800065c <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000660:	f7ff ff92 	bl	8000588 <NVIC_SystemReset>
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff97 	bl	80005a8 <SysTick_Config>
 800067a:	0003      	movs	r3, r0
}
 800067c:	0018      	movs	r0, r3
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}

08000684 <HAL_NVIC_GetPriority>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	0002      	movs	r2, r0
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	701a      	strb	r2, [r3, #0]
  /* Get priority for Cortex-M system or device specific interrupts */
  return NVIC_GetPriority(IRQn);
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b25b      	sxtb	r3, r3
 8000696:	0018      	movs	r0, r3
 8000698:	f7ff ff38 	bl	800050c <NVIC_GetPriority>
 800069c:	0003      	movs	r3, r0
}
 800069e:	0018      	movs	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	0002      	movs	r2, r0
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff fe89 	bl	80003d0 <NVIC_SetPendingIRQ>
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	0002      	movs	r2, r0
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff fe5f 	bl	800039c <NVIC_GetPendingIRQ>
 80006de:	0003      	movs	r3, r0
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	0002      	movs	r2, r0
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff fe80 	bl	8000400 <NVIC_ClearPendingIRQ>
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b002      	add	sp, #8
 8000706:	bd80      	pop	{r7, pc}

08000708 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b04      	cmp	r3, #4
 8000714:	d106      	bne.n	8000724 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	2104      	movs	r1, #4
 800071e:	430a      	orrs	r2, r1
 8000720:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000722:	e005      	b.n	8000730 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000726:	4a04      	ldr	r2, [pc, #16]	; (8000738 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8000728:	6812      	ldr	r2, [r2, #0]
 800072a:	2104      	movs	r1, #4
 800072c:	438a      	bics	r2, r1
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	e000e010 	.word	0xe000e010

0800073c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000740:	f000 f803 	bl	800074a <HAL_SYSTICK_Callback>
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e042      	b.n	80007f0 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2221      	movs	r2, #33	; 0x21
 800076e:	2102      	movs	r1, #2
 8000770:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4a1e      	ldr	r2, [pc, #120]	; (80007f8 <HAL_DMA_Init+0xa4>)
 800077e:	4013      	ands	r3, r2
 8000780:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800078a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	69db      	ldr	r3, [r3, #28]
 80007a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 fba0 	bl	8000f00 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2221      	movs	r2, #33	; 0x21
 80007e2:	2101      	movs	r1, #1
 80007e4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2220      	movs	r2, #32
 80007ea:	2100      	movs	r1, #0
 80007ec:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80007ee:	2300      	movs	r3, #0
}  
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b004      	add	sp, #16
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	ffffc00f 	.word	0xffffc00f

080007fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d101      	bne.n	800080e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e02f      	b.n	800086e <HAL_DMA_DeInit+0x72>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	6812      	ldr	r2, [r2, #0]
 8000816:	6812      	ldr	r2, [r2, #0]
 8000818:	2101      	movs	r1, #1
 800081a:	438a      	bics	r2, r1
 800081c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]

/* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fb5d 	bl	8000f00 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800084e:	2101      	movs	r1, #1
 8000850:	4091      	lsls	r1, r2
 8000852:	000a      	movs	r2, r1
 8000854:	605a      	str	r2, [r3, #4]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2221      	movs	r2, #33	; 0x21
 8000860:	2100      	movs	r1, #0
 8000862:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2220      	movs	r2, #32
 8000868:	2100      	movs	r1, #0
 800086a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000884:	2317      	movs	r3, #23
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2220      	movs	r2, #32
 8000890:	5c9b      	ldrb	r3, [r3, r2]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d101      	bne.n	800089a <HAL_DMA_Start+0x24>
 8000896:	2302      	movs	r3, #2
 8000898:	e032      	b.n	8000900 <HAL_DMA_Start+0x8a>
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2220      	movs	r2, #32
 800089e:	2101      	movs	r1, #1
 80008a0:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2221      	movs	r2, #33	; 0x21
 80008a6:	5c9b      	ldrb	r3, [r3, r2]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d11d      	bne.n	80008ea <HAL_DMA_Start+0x74>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2221      	movs	r2, #33	; 0x21
 80008b2:	2102      	movs	r1, #2
 80008b4:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2200      	movs	r2, #0
 80008ba:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	6812      	ldr	r2, [r2, #0]
 80008c4:	6812      	ldr	r2, [r2, #0]
 80008c6:	2101      	movs	r1, #1
 80008c8:	438a      	bics	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f000 fae8 	bl	8000ea8 <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	2101      	movs	r1, #1
 80008e4:	430a      	orrs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e007      	b.n	80008fa <HAL_DMA_Start+0x84>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2220      	movs	r2, #32
 80008ee:	2100      	movs	r1, #0
 80008f0:	5499      	strb	r1, [r3, r2]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 80008f2:	2317      	movs	r3, #23
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	2202      	movs	r2, #2
 80008f8:	701a      	strb	r2, [r3, #0]
  }  

  return status; 
 80008fa:	2317      	movs	r3, #23
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	781b      	ldrb	r3, [r3, #0]
} 
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b006      	add	sp, #24
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000916:	2317      	movs	r3, #23
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2220      	movs	r2, #32
 8000922:	5c9b      	ldrb	r3, [r3, r2]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d101      	bne.n	800092c <HAL_DMA_Start_IT+0x24>
 8000928:	2302      	movs	r3, #2
 800092a:	e04f      	b.n	80009cc <HAL_DMA_Start_IT+0xc4>
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	2220      	movs	r2, #32
 8000930:	2101      	movs	r1, #1
 8000932:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2221      	movs	r2, #33	; 0x21
 8000938:	5c9b      	ldrb	r3, [r3, r2]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b01      	cmp	r3, #1
 800093e:	d13a      	bne.n	80009b6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2221      	movs	r2, #33	; 0x21
 8000944:	2102      	movs	r1, #2
 8000946:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2200      	movs	r2, #0
 800094c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	6812      	ldr	r2, [r2, #0]
 8000958:	2101      	movs	r1, #1
 800095a:	438a      	bics	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	68b9      	ldr	r1, [r7, #8]
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f000 fa9f 	bl	8000ea8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096e:	2b00      	cmp	r3, #0
 8000970:	d008      	beq.n	8000984 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	210e      	movs	r1, #14
 800097e:	430a      	orrs	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	e00f      	b.n	80009a4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	6812      	ldr	r2, [r2, #0]
 800098c:	6812      	ldr	r2, [r2, #0]
 800098e:	210a      	movs	r1, #10
 8000990:	430a      	orrs	r2, r1
 8000992:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	6812      	ldr	r2, [r2, #0]
 800099e:	2104      	movs	r1, #4
 80009a0:	438a      	bics	r2, r1
 80009a2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	6812      	ldr	r2, [r2, #0]
 80009ae:	2101      	movs	r1, #1
 80009b0:	430a      	orrs	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	e007      	b.n	80009c6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2220      	movs	r2, #32
 80009ba:	2100      	movs	r1, #0
 80009bc:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80009be:	2317      	movs	r3, #23
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	2202      	movs	r2, #2
 80009c4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80009c6:	2317      	movs	r3, #23
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	781b      	ldrb	r3, [r3, #0]
} 
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b006      	add	sp, #24
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	/* Disable DMA IT */
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	210e      	movs	r1, #14
 80009e8:	438a      	bics	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]
	
	/* Disable the channel */
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	6812      	ldr	r2, [r2, #0]
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	2101      	movs	r1, #1
 80009f8:	438a      	bics	r2, r1
 80009fa:	601a      	str	r2, [r3, #0]
	
	/* Clear all flags */
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000a04:	2101      	movs	r1, #1
 8000a06:	4091      	lsls	r1, r2
 8000a08:	000a      	movs	r2, r1
 8000a0a:	605a      	str	r2, [r3, #4]
	
	/* Change the DMA state*/
	hdma->State = HAL_DMA_STATE_READY; 
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2221      	movs	r2, #33	; 0x21
 8000a10:	2101      	movs	r1, #1
 8000a12:	5499      	strb	r1, [r3, r2]
	
	/* Process Unlocked */
	__HAL_UNLOCK(hdma);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2220      	movs	r2, #32
 8000a18:	2100      	movs	r1, #0
 8000a1a:	5499      	strb	r1, [r3, r2]
	
	return HAL_OK; 
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	0018      	movs	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b002      	add	sp, #8
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2e:	230f      	movs	r3, #15
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2221      	movs	r2, #33	; 0x21
 8000a3a:	5c9b      	ldrb	r3, [r3, r2]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d007      	beq.n	8000a52 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2204      	movs	r2, #4
 8000a46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a48:	230f      	movs	r3, #15
 8000a4a:	18fb      	adds	r3, r7, r3
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	e028      	b.n	8000aa4 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	6812      	ldr	r2, [r2, #0]
 8000a5a:	6812      	ldr	r2, [r2, #0]
 8000a5c:	210e      	movs	r1, #14
 8000a5e:	438a      	bics	r2, r1
 8000a60:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	6812      	ldr	r2, [r2, #0]
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	438a      	bics	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	000a      	movs	r2, r1
 8000a80:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2221      	movs	r2, #33	; 0x21
 8000a86:	2101      	movs	r1, #1
 8000a88:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2220      	movs	r2, #32
 8000a8e:	2100      	movs	r1, #0
 8000a90:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d004      	beq.n	8000aa4 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	0010      	movs	r0, r2
 8000aa2:	4798      	blx	r3
    } 
  }
  return status;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	781b      	ldrb	r3, [r3, #0]
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b004      	add	sp, #16
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.  
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2221      	movs	r2, #33	; 0x21
 8000ac6:	5c9b      	ldrb	r3, [r3, r2]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d008      	beq.n	8000ae0 <HAL_DMA_PollForTransfer+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	2100      	movs	r1, #0
 8000ada:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e07d      	b.n	8000bdc <HAL_DMA_PollForTransfer+0x12a>
  }
  
  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d005      	beq.n	8000af8 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e071      	b.n	8000bdc <HAL_DMA_PollForTransfer+0x12a>
  }
  
  /* Get the level transfer complete flag */
  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d106      	bne.n	8000b0c <HAL_DMA_PollForTransfer+0x5a>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	2202      	movs	r2, #2
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e005      	b.n	8000b18 <HAL_DMA_PollForTransfer+0x66>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	2204      	movs	r2, #4
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b18:	f7ff fb5c 	bl	80001d4 <HAL_GetTick>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	613b      	str	r3, [r7, #16]

  while(RESET == (hdma->DmaBaseAddress->ISR & temp))
 8000b20:	e039      	b.n	8000b96 <HAL_DMA_PollForTransfer+0xe4>
  {
    if(RESET != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << hdma->ChannelIndex)))
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	2108      	movs	r1, #8
 8000b2e:	4099      	lsls	r1, r3
 8000b30:	000b      	movs	r3, r1
 8000b32:	4013      	ands	r3, r2
 8000b34:	d014      	beq.n	8000b60 <HAL_DMA_PollForTransfer+0xae>
    {      
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]
      
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;       
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2221      	movs	r2, #33	; 0x21
 8000b50:	2101      	movs	r1, #1
 8000b52:	5499      	strb	r1, [r3, r2]
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2220      	movs	r2, #32
 8000b58:	2100      	movs	r1, #0
 8000b5a:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;      
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e03d      	b.n	8000bdc <HAL_DMA_PollForTransfer+0x12a>
    }      
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3301      	adds	r3, #1
 8000b64:	d017      	beq.n	8000b96 <HAL_DMA_PollForTransfer+0xe4>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d007      	beq.n	8000b7c <HAL_DMA_PollForTransfer+0xca>
 8000b6c:	f7ff fb32 	bl	80001d4 <HAL_GetTick>
 8000b70:	0002      	movs	r2, r0
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	1ad2      	subs	r2, r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d90c      	bls.n	8000b96 <HAL_DMA_PollForTransfer+0xe4>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2220      	movs	r2, #32
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2221      	movs	r2, #33	; 0x21
 8000b86:	2101      	movs	r1, #1
 8000b88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	2100      	movs	r1, #0
 8000b90:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e022      	b.n	8000bdc <HAL_DMA_PollForTransfer+0x12a>
  while(RESET == (hdma->DmaBaseAddress->ISR & temp))
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d0bf      	beq.n	8000b22 <HAL_DMA_PollForTransfer+0x70>
      }
    }
  }

  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d10c      	bne.n	8000bc2 <HAL_DMA_PollForTransfer+0x110>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	000a      	movs	r2, r1
 8000bb6:	605a      	str	r2, [r3, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and 
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2221      	movs	r2, #33	; 0x21
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	5499      	strb	r1, [r3, r2]
 8000bc0:	e007      	b.n	8000bd2 <HAL_DMA_PollForTransfer+0x120>
  }
  else
  { 
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);  
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2220      	movs	r2, #32
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b006      	add	sp, #24
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	2204      	movs	r2, #4
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d024      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x72>
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4013      	ands	r3, r2
 8000c12:	d020      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	d107      	bne.n	8000c30 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	2104      	movs	r1, #4
 8000c2c:	438a      	bics	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000c38:	2104      	movs	r1, #4
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	000a      	movs	r2, r1
 8000c3e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d100      	bne.n	8000c4a <HAL_DMA_IRQHandler+0x66>
 8000c48:	e06a      	b.n	8000d20 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	0010      	movs	r0, r2
 8000c52:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c54:	e064      	b.n	8000d20 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	d02b      	beq.n	8000cbe <HAL_DMA_IRQHandler+0xda>
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d027      	beq.n	8000cbe <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2220      	movs	r2, #32
 8000c76:	4013      	ands	r3, r2
 8000c78:	d10b      	bne.n	8000c92 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	6812      	ldr	r2, [r2, #0]
 8000c84:	210a      	movs	r1, #10
 8000c86:	438a      	bics	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2221      	movs	r2, #33	; 0x21
 8000c8e:	2101      	movs	r1, #1
 8000c90:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d036      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	0010      	movs	r0, r2
 8000cba:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cbc:	e030      	b.n	8000d20 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d028      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x13c>
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d024      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	6812      	ldr	r2, [r2, #0]
 8000ce0:	210e      	movs	r1, #14
 8000ce2:	438a      	bics	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4091      	lsls	r1, r2
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2221      	movs	r2, #33	; 0x21
 8000d00:	2101      	movs	r1, #1
 8000d02:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2220      	movs	r2, #32
 8000d08:	2100      	movs	r1, #0
 8000d0a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	0010      	movs	r0, r2
 8000d1c:	4798      	blx	r3
    }
   }
}  
 8000d1e:	e7ff      	b.n	8000d20 <HAL_DMA_IRQHandler+0x13c>
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b004      	add	sp, #16
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	230b      	movs	r3, #11
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	1c0a      	adds	r2, r1, #0
 8000d38:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d3a:	2317      	movs	r3, #23
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2220      	movs	r2, #32
 8000d46:	5c9b      	ldrb	r3, [r3, r2]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d101      	bne.n	8000d50 <HAL_DMA_RegisterCallback+0x28>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e038      	b.n	8000dc2 <HAL_DMA_RegisterCallback+0x9a>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2220      	movs	r2, #32
 8000d54:	2101      	movs	r1, #1
 8000d56:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2221      	movs	r2, #33	; 0x21
 8000d5c:	5c9b      	ldrb	r3, [r3, r2]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d123      	bne.n	8000dac <HAL_DMA_RegisterCallback+0x84>
  {
    switch (CallbackID)
 8000d64:	230b      	movs	r3, #11
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d00c      	beq.n	8000d88 <HAL_DMA_RegisterCallback+0x60>
 8000d6e:	dc02      	bgt.n	8000d76 <HAL_DMA_RegisterCallback+0x4e>
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <HAL_DMA_RegisterCallback+0x58>
 8000d74:	e014      	b.n	8000da0 <HAL_DMA_RegisterCallback+0x78>
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d00a      	beq.n	8000d90 <HAL_DMA_RegisterCallback+0x68>
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d00c      	beq.n	8000d98 <HAL_DMA_RegisterCallback+0x70>
 8000d7e:	e00f      	b.n	8000da0 <HAL_DMA_RegisterCallback+0x78>
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	629a      	str	r2, [r3, #40]	; 0x28
           break;
 8000d86:	e015      	b.n	8000db4 <HAL_DMA_RegisterCallback+0x8c>
       
     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
           break;         
 8000d8e:	e011      	b.n	8000db4 <HAL_DMA_RegisterCallback+0x8c>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
           break;         
 8000d96:	e00d      	b.n	8000db4 <HAL_DMA_RegisterCallback+0x8c>
           
     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
           break; 
 8000d9e:	e009      	b.n	8000db4 <HAL_DMA_RegisterCallback+0x8c>
           
     default:
           status = HAL_ERROR;
 8000da0:	2317      	movs	r3, #23
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
           break;                                                            
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	e003      	b.n	8000db4 <HAL_DMA_RegisterCallback+0x8c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dac:	2317      	movs	r3, #23
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2220      	movs	r2, #32
 8000db8:	2100      	movs	r1, #0
 8000dba:	5499      	strb	r1, [r3, r2]
  
  return status;
 8000dbc:	2317      	movs	r3, #23
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	781b      	ldrb	r3, [r3, #0]
}
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b006      	add	sp, #24
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	1cfb      	adds	r3, r7, #3
 8000dd6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]

    /* Process locked */
  __HAL_LOCK(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2220      	movs	r2, #32
 8000de4:	5c9b      	ldrb	r3, [r3, r2]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d101      	bne.n	8000dee <HAL_DMA_UnRegisterCallback+0x24>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e040      	b.n	8000e70 <HAL_DMA_UnRegisterCallback+0xa6>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2220      	movs	r2, #32
 8000df2:	2101      	movs	r1, #1
 8000df4:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2221      	movs	r2, #33	; 0x21
 8000dfa:	5c9b      	ldrb	r3, [r3, r2]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d12b      	bne.n	8000e5a <HAL_DMA_UnRegisterCallback+0x90>
  {
    switch (CallbackID)
 8000e02:	1cfb      	adds	r3, r7, #3
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d821      	bhi.n	8000e4e <HAL_DMA_UnRegisterCallback+0x84>
 8000e0a:	009a      	lsls	r2, r3, #2
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <HAL_DMA_UnRegisterCallback+0xae>)
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	469f      	mov	pc, r3
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = NULL;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
           break;
 8000e1a:	e022      	b.n	8000e62 <HAL_DMA_UnRegisterCallback+0x98>
       
     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = NULL;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	62da      	str	r2, [r3, #44]	; 0x2c
           break;         
 8000e22:	e01e      	b.n	8000e62 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = NULL;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	631a      	str	r2, [r3, #48]	; 0x30
           break;         
 8000e2a:	e01a      	b.n	8000e62 <HAL_DMA_UnRegisterCallback+0x98>
           
     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = NULL;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34
           break; 
 8000e32:	e016      	b.n	8000e62 <HAL_DMA_UnRegisterCallback+0x98>
     
    case   HAL_DMA_XFER_ALL_CB_ID:
           hdma->XferCpltCallback = NULL;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
           hdma->XferHalfCpltCallback = NULL;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
           hdma->XferErrorCallback = NULL;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	631a      	str	r2, [r3, #48]	; 0x30
           hdma->XferAbortCallback = NULL;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
           break; 
 8000e4c:	e009      	b.n	8000e62 <HAL_DMA_UnRegisterCallback+0x98>
     
    default:
           status = HAL_ERROR;
 8000e4e:	230f      	movs	r3, #15
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
           break;                                                            
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	e003      	b.n	8000e62 <HAL_DMA_UnRegisterCallback+0x98>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2220      	movs	r2, #32
 8000e66:	2100      	movs	r1, #0
 8000e68:	5499      	strb	r1, [r3, r2]
  
  return status;
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	781b      	ldrb	r3, [r3, #0]
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b004      	add	sp, #16
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	08010364 	.word	0x08010364

08000e7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2221      	movs	r2, #33	; 0x21
 8000e88:	5c9b      	ldrb	r3, [r3, r2]
 8000e8a:	b2db      	uxtb	r3, r3
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b10      	cmp	r3, #16
 8000ed4:	d108      	bne.n	8000ee8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ee6:	e007      	b.n	8000ef8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	60da      	str	r2, [r3, #12]
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b004      	add	sp, #16
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <DMA_CalcBaseAndBitshift+0x30>)
 8000f0e:	4694      	mov	ip, r2
 8000f10:	4463      	add	r3, ip
 8000f12:	2114      	movs	r1, #20
 8000f14:	0018      	movs	r0, r3
 8000f16:	f00f f92d 	bl	8010174 <__udivsi3>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	009a      	lsls	r2, r3, #2
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <DMA_CalcBaseAndBitshift+0x34>)
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	bffdfff8 	.word	0xbffdfff8
 8000f34:	40020000 	.word	0x40020000

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f4e:	e155      	b.n	80011fc <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d100      	bne.n	8000f68 <HAL_GPIO_Init+0x30>
 8000f66:	e146      	b.n	80011f6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b12      	cmp	r3, #18
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	58d3      	ldr	r3, [r2, r3]
 8000f84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2207      	movs	r2, #7
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	43da      	mvns	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2107      	movs	r1, #7
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	409a      	lsls	r2, r3
 8000faa:	0013      	movs	r3, r2
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	6939      	ldr	r1, [r7, #16]
 8000fbe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	0013      	movs	r3, r2
 8000fd0:	43da      	mvns	r2, r3
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d00b      	beq.n	8001014 <HAL_GPIO_Init+0xdc>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d007      	beq.n	8001014 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001008:	2b11      	cmp	r3, #17
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b12      	cmp	r3, #18
 8001012:	d130      	bne.n	8001076 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	43da      	mvns	r2, r3
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800104a:	2201      	movs	r2, #1
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	2201      	movs	r2, #1
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	43da      	mvns	r2, r3
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	055b      	lsls	r3, r3, #21
 80010ae:	4013      	ands	r3, r2
 80010b0:	d100      	bne.n	80010b4 <HAL_GPIO_Init+0x17c>
 80010b2:	e0a0      	b.n	80011f6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b4:	4b57      	ldr	r3, [pc, #348]	; (8001214 <HAL_GPIO_Init+0x2dc>)
 80010b6:	4a57      	ldr	r2, [pc, #348]	; (8001214 <HAL_GPIO_Init+0x2dc>)
 80010b8:	6992      	ldr	r2, [r2, #24]
 80010ba:	2101      	movs	r1, #1
 80010bc:	430a      	orrs	r2, r1
 80010be:	619a      	str	r2, [r3, #24]
 80010c0:	4b54      	ldr	r3, [pc, #336]	; (8001214 <HAL_GPIO_Init+0x2dc>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	2201      	movs	r2, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x2e0>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	589b      	ldr	r3, [r3, r2]
 80010d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	2203      	movs	r2, #3
 80010de:	4013      	ands	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	409a      	lsls	r2, r3
 80010e6:	0013      	movs	r3, r2
 80010e8:	43da      	mvns	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	2390      	movs	r3, #144	; 0x90
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x1f6>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a47      	ldr	r2, [pc, #284]	; (800121c <HAL_GPIO_Init+0x2e4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x1f2>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a46      	ldr	r2, [pc, #280]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x1ee>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a45      	ldr	r2, [pc, #276]	; (8001224 <HAL_GPIO_Init+0x2ec>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x1ea>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a44      	ldr	r2, [pc, #272]	; (8001228 <HAL_GPIO_Init+0x2f0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x1e6>
 800111a:	2304      	movs	r3, #4
 800111c:	e008      	b.n	8001130 <HAL_GPIO_Init+0x1f8>
 800111e:	2305      	movs	r3, #5
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x1f8>
 8001122:	2303      	movs	r3, #3
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x1f8>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x1f8>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x1f8>
 800112e:	2300      	movs	r3, #0
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	2103      	movs	r1, #3
 8001134:	400a      	ands	r2, r1
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001140:	4935      	ldr	r1, [pc, #212]	; (8001218 <HAL_GPIO_Init+0x2e0>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114e:	4b37      	ldr	r3, [pc, #220]	; (800122c <HAL_GPIO_Init+0x2f4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	025b      	lsls	r3, r3, #9
 8001166:	4013      	ands	r3, r2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <HAL_GPIO_Init+0x2f4>)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <HAL_GPIO_Init+0x2f4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43da      	mvns	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	029b      	lsls	r3, r3, #10
 8001190:	4013      	ands	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_GPIO_Init+0x2f4>)
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b22      	ldr	r3, [pc, #136]	; (800122c <HAL_GPIO_Init+0x2f4>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43da      	mvns	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	035b      	lsls	r3, r3, #13
 80011ba:	4013      	ands	r3, r2
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_GPIO_Init+0x2f4>)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_GPIO_Init+0x2f4>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43da      	mvns	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	039b      	lsls	r3, r3, #14
 80011e4:	4013      	ands	r3, r2
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_GPIO_Init+0x2f4>)
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	40da      	lsrs	r2, r3
 8001204:	1e13      	subs	r3, r2, #0
 8001206:	d000      	beq.n	800120a <HAL_GPIO_Init+0x2d2>
 8001208:	e6a2      	b.n	8000f50 <HAL_GPIO_Init+0x18>
  } 
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b006      	add	sp, #24
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	48001000 	.word	0x48001000
 800122c:	40010400 	.word	0x40010400

08001230 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 8001246:	e0b9      	b.n	80013bc <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1U << position);
 8001248:	2201      	movs	r2, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <HAL_GPIO_DeInit+0x2e>
 800125c:	e0ab      	b.n	80013b6 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2U)); 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	0052      	lsls	r2, r2, #1
 8001266:	2103      	movs	r1, #3
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	43d2      	mvns	r2, r2
 800126e:	401a      	ands	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	601a      	str	r2, [r3, #0]
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3U], 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	08d9      	lsrs	r1, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3108      	adds	r1, #8
 8001280:	0089      	lsls	r1, r1, #2
 8001282:	58cb      	ldr	r3, [r1, r3]
 8001284:	6979      	ldr	r1, [r7, #20]
 8001286:	2007      	movs	r0, #7
 8001288:	4001      	ands	r1, r0
 800128a:	0089      	lsls	r1, r1, #2
 800128c:	200f      	movs	r0, #15
 800128e:	4088      	lsls	r0, r1
 8001290:	0001      	movs	r1, r0
 8001292:	43c9      	mvns	r1, r1
 8001294:	4019      	ands	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	50d1      	str	r1, [r2, r3]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	0052      	lsls	r2, r2, #1
 80012a6:	2103      	movs	r1, #3
 80012a8:	4091      	lsls	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	43d2      	mvns	r2, r2
 80012ae:	401a      	ands	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	609a      	str	r2, [r3, #8]
                  
      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	43d2      	mvns	r2, r2
 80012c2:	401a      	ands	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	605a      	str	r2, [r3, #4]
  
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	0052      	lsls	r2, r2, #1
 80012d0:	2103      	movs	r1, #3
 80012d2:	4091      	lsls	r1, r2
 80012d4:	000a      	movs	r2, r1
 80012d6:	43d2      	mvns	r2, r2
 80012d8:	401a      	ands	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a3c      	ldr	r2, [pc, #240]	; (80013d0 <HAL_GPIO_DeInit+0x1a0>)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	589b      	ldr	r3, [r3, r2]
 80012ea:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2203      	movs	r2, #3
 80012f0:	4013      	ands	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	409a      	lsls	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4013      	ands	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	2390      	movs	r3, #144	; 0x90
 8001302:	05db      	lsls	r3, r3, #23
 8001304:	429a      	cmp	r2, r3
 8001306:	d019      	beq.n	800133c <HAL_GPIO_DeInit+0x10c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <HAL_GPIO_DeInit+0x1a4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d013      	beq.n	8001338 <HAL_GPIO_DeInit+0x108>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <HAL_GPIO_DeInit+0x1a8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d00d      	beq.n	8001334 <HAL_GPIO_DeInit+0x104>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a30      	ldr	r2, [pc, #192]	; (80013dc <HAL_GPIO_DeInit+0x1ac>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d007      	beq.n	8001330 <HAL_GPIO_DeInit+0x100>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a2f      	ldr	r2, [pc, #188]	; (80013e0 <HAL_GPIO_DeInit+0x1b0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_GPIO_DeInit+0xfc>
 8001328:	2304      	movs	r3, #4
 800132a:	e008      	b.n	800133e <HAL_GPIO_DeInit+0x10e>
 800132c:	2305      	movs	r3, #5
 800132e:	e006      	b.n	800133e <HAL_GPIO_DeInit+0x10e>
 8001330:	2303      	movs	r3, #3
 8001332:	e004      	b.n	800133e <HAL_GPIO_DeInit+0x10e>
 8001334:	2302      	movs	r3, #2
 8001336:	e002      	b.n	800133e <HAL_GPIO_DeInit+0x10e>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <HAL_GPIO_DeInit+0x10e>
 800133c:	2300      	movs	r3, #0
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	2103      	movs	r1, #3
 8001342:	400a      	ands	r2, r1
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4093      	lsls	r3, r2
 8001348:	001a      	movs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d132      	bne.n	80013b6 <HAL_GPIO_DeInit+0x186>
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2203      	movs	r2, #3
 8001354:	4013      	ands	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2U], tmp);
 8001360:	481b      	ldr	r0, [pc, #108]	; (80013d0 <HAL_GPIO_DeInit+0x1a0>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	491a      	ldr	r1, [pc, #104]	; (80013d0 <HAL_GPIO_DeInit+0x1a0>)
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	0892      	lsrs	r2, r2, #2
 800136c:	3202      	adds	r2, #2
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	5852      	ldr	r2, [r2, r1]
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	43c9      	mvns	r1, r1
 8001376:	400a      	ands	r2, r1
 8001378:	3302      	adds	r3, #2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	501a      	str	r2, [r3, r0]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_GPIO_DeInit+0x1b4>)
 8001380:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <HAL_GPIO_DeInit+0x1b4>)
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	6939      	ldr	r1, [r7, #16]
 8001386:	43c9      	mvns	r1, r1
 8001388:	400a      	ands	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_GPIO_DeInit+0x1b4>)
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_GPIO_DeInit+0x1b4>)
 8001390:	6852      	ldr	r2, [r2, #4]
 8001392:	6939      	ldr	r1, [r7, #16]
 8001394:	43c9      	mvns	r1, r1
 8001396:	400a      	ands	r2, r1
 8001398:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_GPIO_DeInit+0x1b4>)
 800139c:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_GPIO_DeInit+0x1b4>)
 800139e:	6892      	ldr	r2, [r2, #8]
 80013a0:	6939      	ldr	r1, [r7, #16]
 80013a2:	43c9      	mvns	r1, r1
 80013a4:	400a      	ands	r2, r1
 80013a6:	609a      	str	r2, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_GPIO_DeInit+0x1b4>)
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_GPIO_DeInit+0x1b4>)
 80013ac:	68d2      	ldr	r2, [r2, #12]
 80013ae:	6939      	ldr	r1, [r7, #16]
 80013b0:	43c9      	mvns	r1, r1
 80013b2:	400a      	ands	r2, r1
 80013b4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	40da      	lsrs	r2, r3
 80013c2:	1e13      	subs	r3, r2, #0
 80013c4:	d000      	beq.n	80013c8 <HAL_GPIO_DeInit+0x198>
 80013c6:	e73f      	b.n	8001248 <HAL_GPIO_DeInit+0x18>
  }
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b006      	add	sp, #24
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010000 	.word	0x40010000
 80013d4:	48000400 	.word	0x48000400
 80013d8:	48000800 	.word	0x48000800
 80013dc:	48000c00 	.word	0x48000c00
 80013e0:	48001000 	.word	0x48001000
 80013e4:	40010400 	.word	0x40010400

080013e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	000a      	movs	r2, r1
 80013f2:	1cbb      	adds	r3, r7, #2
 80013f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	1cba      	adds	r2, r7, #2
 80013fc:	8812      	ldrh	r2, [r2, #0]
 80013fe:	4013      	ands	r3, r2
 8001400:	d004      	beq.n	800140c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001402:	230f      	movs	r3, #15
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	e003      	b.n	8001414 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800140c:	230f      	movs	r3, #15
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001414:	230f      	movs	r3, #15
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	781b      	ldrb	r3, [r3, #0]
  }
 800141a:	0018      	movs	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	b004      	add	sp, #16
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	0008      	movs	r0, r1
 800142c:	0011      	movs	r1, r2
 800142e:	1cbb      	adds	r3, r7, #2
 8001430:	1c02      	adds	r2, r0, #0
 8001432:	801a      	strh	r2, [r3, #0]
 8001434:	1c7b      	adds	r3, r7, #1
 8001436:	1c0a      	adds	r2, r1, #0
 8001438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143a:	1c7b      	adds	r3, r7, #1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001442:	1cbb      	adds	r3, r7, #2
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800144a:	e003      	b.n	8001454 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144c:	1cbb      	adds	r3, r7, #2
 800144e:	881a      	ldrh	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001454:	46c0      	nop			; (mov r8, r8)
 8001456:	46bd      	mov	sp, r7
 8001458:	b002      	add	sp, #8
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	000a      	movs	r2, r1
 8001466:	1cbb      	adds	r3, r7, #2
 8001468:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	1cbb      	adds	r3, r7, #2
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	405a      	eors	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	615a      	str	r2, [r3, #20]
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	000a      	movs	r2, r1
 800148a:	1cbb      	adds	r3, r7, #2
 800148c:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 8001494:	1cbb      	adds	r3, r7, #2
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80014a4:	1cbb      	adds	r3, r7, #2
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	60fb      	str	r3, [r7, #12]

  if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	025b      	lsls	r3, r3, #9
 80014c0:	4013      	ands	r3, r2
 80014c2:	d001      	beq.n	80014c8 <HAL_GPIO_LockPin+0x48>
  {
    return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_LockPin+0x4a>
  }
  else
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
  }
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	0002      	movs	r2, r0
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_GPIO_EXTI_IRQHandler+0x32>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	1dba      	adds	r2, r7, #6
 80014e4:	8812      	ldrh	r2, [r2, #0]
 80014e6:	4013      	ands	r3, r2
 80014e8:	d008      	beq.n	80014fc <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_GPIO_EXTI_IRQHandler+0x32>)
 80014ec:	1dba      	adds	r2, r7, #6
 80014ee:	8812      	ldrh	r2, [r2, #0]
 80014f0:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014f2:	1dbb      	adds	r3, r7, #6
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 f806 	bl	8001508 <HAL_GPIO_EXTI_Callback>
  }
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b002      	add	sp, #8
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	0002      	movs	r2, r0
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0de      	b.n	80016f4 <HAL_PCD_Init+0x1d8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	23ea      	movs	r3, #234	; 0xea
 800153a:	33ff      	adds	r3, #255	; 0xff
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d108      	bne.n	8001556 <HAL_PCD_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	23f4      	movs	r3, #244	; 0xf4
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2100      	movs	r1, #0
 800154c:	54d1      	strb	r1, [r2, r3]
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0018      	movs	r0, r3
 8001552:	f00d fd5b 	bl	800f00c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	23ea      	movs	r3, #234	; 0xea
 800155a:	33ff      	adds	r3, #255	; 0xff
 800155c:	2103      	movs	r1, #3
 800155e:	54d1      	strb	r1, [r2, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	e043      	b.n	80015ee <HAL_PCD_Init+0xd2>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	2029      	movs	r0, #41	; 0x29
 800156c:	0013      	movs	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	18cb      	adds	r3, r1, r3
 8001576:	181b      	adds	r3, r3, r0
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	b2dc      	uxtb	r4, r3
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	2028      	movs	r0, #40	; 0x28
 8001586:	0013      	movs	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	18cb      	adds	r3, r1, r3
 8001590:	181b      	adds	r3, r3, r0
 8001592:	1c22      	adds	r2, r4, #0
 8001594:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	202b      	movs	r0, #43	; 0x2b
 800159c:	0013      	movs	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	18cb      	adds	r3, r1, r3
 80015a6:	181b      	adds	r3, r3, r0
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	0013      	movs	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	18cb      	adds	r3, r1, r3
 80015ba:	3334      	adds	r3, #52	; 0x34
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	0013      	movs	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	18cb      	adds	r3, r1, r3
 80015ce:	3338      	adds	r3, #56	; 0x38
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	0013      	movs	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	18cb      	adds	r3, r1, r3
 80015e2:	333c      	adds	r3, #60	; 0x3c
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8b6      	bhi.n	8001566 <HAL_PCD_Init+0x4a>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e04e      	b.n	800169c <HAL_PCD_Init+0x180>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	230a      	movs	r3, #10
 8001604:	33ff      	adds	r3, #255	; 0xff
 8001606:	0019      	movs	r1, r3
 8001608:	0013      	movs	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	1a9b      	subs	r3, r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	18c3      	adds	r3, r0, r3
 8001612:	185b      	adds	r3, r3, r1
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	b2dc      	uxtb	r4, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	2384      	movs	r3, #132	; 0x84
 8001622:	0059      	lsls	r1, r3, #1
 8001624:	0013      	movs	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	18c3      	adds	r3, r0, r3
 800162e:	185b      	adds	r3, r3, r1
 8001630:	1c22      	adds	r2, r4, #0
 8001632:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	230c      	movs	r3, #12
 800163a:	33ff      	adds	r3, #255	; 0xff
 800163c:	0019      	movs	r1, r3
 800163e:	0013      	movs	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	18c3      	adds	r3, r0, r3
 8001648:	185b      	adds	r3, r3, r1
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	238a      	movs	r3, #138	; 0x8a
 8001654:	0059      	lsls	r1, r3, #1
 8001656:	0013      	movs	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	18c3      	adds	r3, r0, r3
 8001660:	185b      	adds	r3, r3, r1
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	238c      	movs	r3, #140	; 0x8c
 800166c:	0059      	lsls	r1, r3, #1
 800166e:	0013      	movs	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	18c3      	adds	r3, r0, r3
 8001678:	185b      	adds	r3, r3, r1
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	238e      	movs	r3, #142	; 0x8e
 8001684:	0059      	lsls	r1, r3, #1
 8001686:	0013      	movs	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	18c3      	adds	r3, r0, r3
 8001690:	185b      	adds	r3, r3, r1
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3301      	adds	r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d8ab      	bhi.n	80015fe <HAL_PCD_Init+0xe2>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2240      	movs	r2, #64	; 0x40
 80016ac:	2101      	movs	r1, #1
 80016ae:	5299      	strh	r1, [r3, r2]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2240      	movs	r2, #64	; 0x40
 80016b6:	2100      	movs	r1, #0
 80016b8:	5299      	strh	r1, [r3, r2]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2244      	movs	r2, #68	; 0x44
 80016c0:	2100      	movs	r1, #0
 80016c2:	5299      	strh	r1, [r3, r2]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2250      	movs	r2, #80	; 0x50
 80016ca:	2100      	movs	r1, #0
 80016cc:	5299      	strh	r1, [r3, r2]
  
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80016ce:	23bf      	movs	r3, #191	; 0xbf
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	60bb      	str	r3, [r7, #8]
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	b291      	uxth	r1, r2
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	5299      	strh	r1, [r3, r2]
  
  hpcd->USB_Address = 0U;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2224      	movs	r2, #36	; 0x24
 80016e4:	2100      	movs	r1, #0
 80016e6:	5499      	strb	r1, [r3, r2]
  hpcd->State= HAL_PCD_STATE_READY;
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	23ea      	movs	r3, #234	; 0xea
 80016ec:	33ff      	adds	r3, #255	; 0xff
 80016ee:	2101      	movs	r1, #1
 80016f0:	54d1      	strb	r1, [r2, r3]

 return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b005      	add	sp, #20
 80016fa:	bd90      	pop	{r4, r7, pc}

080016fc <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral 
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e012      	b.n	8001734 <HAL_PCD_DeInit+0x38>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	23ea      	movs	r3, #234	; 0xea
 8001712:	33ff      	adds	r3, #255	; 0xff
 8001714:	2103      	movs	r1, #3
 8001716:	54d1      	strb	r1, [r2, r3]
  
  /* Stop Device */
  HAL_PCD_Stop(hpcd);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	0018      	movs	r0, r3
 800171c:	f000 f836 	bl	800178c <HAL_PCD_Stop>
    
  /* DeInit the low level hardware */
  HAL_PCD_MspDeInit(hpcd);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	0018      	movs	r0, r3
 8001724:	f00d fc9a 	bl	800f05c <HAL_PCD_MspDeInit>
  
  hpcd->State = HAL_PCD_STATE_RESET; 
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	23ea      	movs	r3, #234	; 0xea
 800172c:	33ff      	adds	r3, #255	; 0xff
 800172e:	2100      	movs	r1, #0
 8001730:	54d1      	strb	r1, [r2, r3]
  
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	0018      	movs	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	b002      	add	sp, #8
 800173a:	bd80      	pop	{r7, pc}
  * @brief  Initializes the PCD MSP.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_MspInit could be implemented in the user file
   */
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}
  * @brief  DeInitializes PCD MSP.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_MspDeInit could be implemented in the user file
   */
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2158      	movs	r1, #88	; 0x58
 800176e:	5a5b      	ldrh	r3, [r3, r1]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4905      	ldr	r1, [pc, #20]	; (8001788 <HAL_PCD_Start+0x2c>)
 8001774:	430b      	orrs	r3, r1
 8001776:	b299      	uxth	r1, r3
 8001778:	2358      	movs	r3, #88	; 0x58
 800177a:	52d1      	strh	r1, [r2, r3]
  
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	ffff8000 	.word	0xffff8000

0800178c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	23f4      	movs	r3, #244	; 0xf4
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	5cd3      	ldrb	r3, [r2, r3]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_PCD_Stop+0x18>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e019      	b.n	80017d8 <HAL_PCD_Stop+0x4c>
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	23f4      	movs	r3, #244	; 0xf4
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2101      	movs	r1, #1
 80017ac:	54d1      	strb	r1, [r2, r3]
  
    /* disable all interrupts and force USB reset */
  hpcd->Instance->CNTR = USB_CNTR_FRES;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	2101      	movs	r1, #1
 80017b6:	5299      	strh	r1, [r3, r2]
  
  /* clear interrupt status register */
  hpcd->Instance->ISTR = 0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2244      	movs	r2, #68	; 0x44
 80017be:	2100      	movs	r1, #0
 80017c0:	5299      	strh	r1, [r3, r2]
  
  /* switch-off device */
  hpcd->Instance->CNTR = (USB_CNTR_FRES | USB_CNTR_PDWN);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2240      	movs	r2, #64	; 0x40
 80017c8:	2103      	movs	r1, #3
 80017ca:	5299      	strh	r1, [r3, r2]
  
  __HAL_UNLOCK(hpcd); 
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	23f4      	movs	r3, #244	; 0xf4
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2100      	movs	r1, #0
 80017d4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2244      	movs	r2, #68	; 0x44
 80017f2:	5a9b      	ldrh	r3, [r3, r2]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	001a      	movs	r2, r3
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	401a      	ands	r2, r3
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	429a      	cmp	r2, r3
 8001804:	d103      	bne.n	800180e <HAL_PCD_IRQHandler+0x2e>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	0018      	movs	r0, r3
 800180a:	f001 fd32 	bl	8003272 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2244      	movs	r2, #68	; 0x44
 8001814:	5a9b      	ldrh	r3, [r3, r2]
 8001816:	b29b      	uxth	r3, r3
 8001818:	001a      	movs	r2, r3
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	401a      	ands	r2, r3
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	429a      	cmp	r2, r3
 8001826:	d114      	bne.n	8001852 <HAL_PCD_IRQHandler+0x72>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2144      	movs	r1, #68	; 0x44
 8001832:	5a5b      	ldrh	r3, [r3, r1]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4977      	ldr	r1, [pc, #476]	; (8001a14 <HAL_PCD_IRQHandler+0x234>)
 8001838:	400b      	ands	r3, r1
 800183a:	b299      	uxth	r1, r3
 800183c:	2344      	movs	r3, #68	; 0x44
 800183e:	52d1      	strh	r1, [r2, r3]
    HAL_PCD_ResetCallback(hpcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	0018      	movs	r0, r3
 8001844:	f00d fc87 	bl	800f156 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2100      	movs	r1, #0
 800184c:	0018      	movs	r0, r3
 800184e:	f000 f9a4 	bl	8001b9a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2244      	movs	r2, #68	; 0x44
 8001858:	5a9b      	ldrh	r3, [r3, r2]
 800185a:	b29b      	uxth	r3, r3
 800185c:	001a      	movs	r2, r3
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	01db      	lsls	r3, r3, #7
 8001862:	401a      	ands	r2, r3
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	01db      	lsls	r3, r3, #7
 8001868:	429a      	cmp	r2, r3
 800186a:	d10b      	bne.n	8001884 <HAL_PCD_IRQHandler+0xa4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2144      	movs	r1, #68	; 0x44
 8001876:	5a5b      	ldrh	r3, [r3, r1]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4967      	ldr	r1, [pc, #412]	; (8001a18 <HAL_PCD_IRQHandler+0x238>)
 800187c:	400b      	ands	r3, r1
 800187e:	b299      	uxth	r1, r3
 8001880:	2344      	movs	r3, #68	; 0x44
 8001882:	52d1      	strh	r1, [r2, r3]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2244      	movs	r2, #68	; 0x44
 800188a:	5a9b      	ldrh	r3, [r3, r2]
 800188c:	b29b      	uxth	r3, r3
 800188e:	001a      	movs	r2, r3
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	019b      	lsls	r3, r3, #6
 8001894:	401a      	ands	r2, r3
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	019b      	lsls	r3, r3, #6
 800189a:	429a      	cmp	r2, r3
 800189c:	d10b      	bne.n	80018b6 <HAL_PCD_IRQHandler+0xd6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2144      	movs	r1, #68	; 0x44
 80018a8:	5a5b      	ldrh	r3, [r3, r1]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	495b      	ldr	r1, [pc, #364]	; (8001a1c <HAL_PCD_IRQHandler+0x23c>)
 80018ae:	400b      	ands	r3, r1
 80018b0:	b299      	uxth	r1, r3
 80018b2:	2344      	movs	r3, #68	; 0x44
 80018b4:	52d1      	strh	r1, [r2, r3]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2244      	movs	r2, #68	; 0x44
 80018bc:	5a9b      	ldrh	r3, [r3, r2]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	001a      	movs	r2, r3
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	015b      	lsls	r3, r3, #5
 80018c6:	401a      	ands	r2, r3
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	015b      	lsls	r3, r3, #5
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d124      	bne.n	800191a <HAL_PCD_IRQHandler+0x13a>
  {
    
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2140      	movs	r1, #64	; 0x40
 80018da:	5a5b      	ldrh	r3, [r3, r1]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	2104      	movs	r1, #4
 80018e0:	438b      	bics	r3, r1
 80018e2:	b299      	uxth	r1, r3
 80018e4:	2340      	movs	r3, #64	; 0x40
 80018e6:	52d1      	strh	r1, [r2, r3]

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80018e8:	23bd      	movs	r3, #189	; 0xbd
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	b291      	uxth	r1, r2
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	5299      	strh	r1, [r3, r2]
    
    HAL_PCD_ResumeCallback(hpcd);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f00d fc71 	bl	800f1e4 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2144      	movs	r1, #68	; 0x44
 800190c:	5a5b      	ldrh	r3, [r3, r1]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4943      	ldr	r1, [pc, #268]	; (8001a20 <HAL_PCD_IRQHandler+0x240>)
 8001912:	400b      	ands	r3, r1
 8001914:	b299      	uxth	r1, r3
 8001916:	2344      	movs	r3, #68	; 0x44
 8001918:	52d1      	strh	r1, [r2, r3]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2244      	movs	r2, #68	; 0x44
 8001920:	5a9b      	ldrh	r3, [r3, r2]
 8001922:	b29b      	uxth	r3, r3
 8001924:	001a      	movs	r2, r3
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	401a      	ands	r2, r3
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	429a      	cmp	r2, r3
 8001932:	d134      	bne.n	800199e <HAL_PCD_IRQHandler+0x1be>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2144      	movs	r1, #68	; 0x44
 800193e:	5a5b      	ldrh	r3, [r3, r1]
 8001940:	b29b      	uxth	r3, r3
 8001942:	4938      	ldr	r1, [pc, #224]	; (8001a24 <HAL_PCD_IRQHandler+0x244>)
 8001944:	400b      	ands	r3, r1
 8001946:	b299      	uxth	r1, r3
 8001948:	2344      	movs	r3, #68	; 0x44
 800194a:	52d1      	strh	r1, [r2, r3]
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2140      	movs	r1, #64	; 0x40
 8001956:	5a5b      	ldrh	r3, [r3, r1]
 8001958:	b29b      	uxth	r3, r3
 800195a:	2108      	movs	r1, #8
 800195c:	430b      	orrs	r3, r1
 800195e:	b299      	uxth	r1, r3
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	52d1      	strh	r1, [r2, r3]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2140      	movs	r1, #64	; 0x40
 800196e:	5a5b      	ldrh	r3, [r3, r1]
 8001970:	b29b      	uxth	r3, r3
 8001972:	2104      	movs	r1, #4
 8001974:	430b      	orrs	r3, r1
 8001976:	b299      	uxth	r1, r3
 8001978:	2340      	movs	r3, #64	; 0x40
 800197a:	52d1      	strh	r1, [r2, r3]

    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2244      	movs	r2, #68	; 0x44
 8001982:	5a9b      	ldrh	r3, [r3, r2]
 8001984:	b29b      	uxth	r3, r3
 8001986:	001a      	movs	r2, r3
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	401a      	ands	r2, r3
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	429a      	cmp	r2, r3
 8001994:	d003      	beq.n	800199e <HAL_PCD_IRQHandler+0x1be>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0018      	movs	r0, r3
 800199a:	f00d fc08 	bl	800f1ae <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2244      	movs	r2, #68	; 0x44
 80019a4:	5a9b      	ldrh	r3, [r3, r2]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	001a      	movs	r2, r3
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	401a      	ands	r2, r3
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d10f      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x1f8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2144      	movs	r1, #68	; 0x44
 80019c2:	5a5b      	ldrh	r3, [r3, r1]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4918      	ldr	r1, [pc, #96]	; (8001a28 <HAL_PCD_IRQHandler+0x248>)
 80019c8:	400b      	ands	r3, r1
 80019ca:	b299      	uxth	r1, r3
 80019cc:	2344      	movs	r3, #68	; 0x44
 80019ce:	52d1      	strh	r1, [r2, r3]
    HAL_PCD_SOFCallback(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	0018      	movs	r0, r3
 80019d4:	f00d fbb0 	bl	800f138 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2244      	movs	r2, #68	; 0x44
 80019de:	5a9b      	ldrh	r3, [r3, r2]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	001a      	movs	r2, r3
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	401a      	ands	r2, r3
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d10b      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x22a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2144      	movs	r1, #68	; 0x44
 80019fc:	5a5b      	ldrh	r3, [r3, r1]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	490a      	ldr	r1, [pc, #40]	; (8001a2c <HAL_PCD_IRQHandler+0x24c>)
 8001a02:	400b      	ands	r3, r1
 8001a04:	b299      	uxth	r1, r3
 8001a06:	2344      	movs	r3, #68	; 0x44
 8001a08:	52d1      	strh	r1, [r2, r3]
  }
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b004      	add	sp, #16
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	fffffbff 	.word	0xfffffbff
 8001a18:	ffffbfff 	.word	0xffffbfff
 8001a1c:	ffffdfff 	.word	0xffffdfff
 8001a20:	ffffefff 	.word	0xffffefff
 8001a24:	fffff7ff 	.word	0xfffff7ff
 8001a28:	fffffdff 	.word	0xfffffdff
 8001a2c:	fffffeff 	.word	0xfffffeff
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
 __weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	000a      	movs	r2, r1
 8001a3a:	1cfb      	adds	r3, r7, #3
 8001a3c:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */ 
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b002      	add	sp, #8
 8001a44:	bd80      	pop	{r7, pc}
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
 __weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	000a      	movs	r2, r1
 8001a50:	1cfb      	adds	r3, r7, #3
 8001a52:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */ 
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */ 
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}
  * @brief  USB Start Of Frame callbacks
  * @param  hpcd PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */ 
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}
  * @brief  USB Reset callbacks
  * @param  hpcd PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */ 
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}
  * @brief  Suspend event callbacks
  * @param  hpcd PCD handle
  * @retval None
  */
 __weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */ 
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}
  * @brief  Resume event callbacks
  * @param  hpcd PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */ 
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b002      	add	sp, #8
 8001aaa:	bd80      	pop	{r7, pc}
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
 __weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	000a      	movs	r2, r1
 8001ab6:	1cfb      	adds	r3, r7, #3
 8001ab8:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */ 
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
 __weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	000a      	movs	r2, r1
 8001acc:	1cfb      	adds	r3, r7, #3
 8001ace:	701a      	strb	r2, [r3, #0]
  UNUSED(epnum);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */ 
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}
  * @brief  Connection event callbacks
  * @param  hpcd PCD handle
  * @retval None
  */
 __weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */ 
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}
  * @brief  Disconnection event callbacks
  * @param  hpcd PCD handle
  * @retval None
  */
 __weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */ 
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b002      	add	sp, #8
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_DevConnect>:
  * @brief  Connect the USB device 
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	23f4      	movs	r3, #244	; 0xf4
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_PCD_DevConnect+0x18>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e016      	b.n	8001b3e <HAL_PCD_DevConnect+0x46>
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	23f4      	movs	r3, #244	; 0xf4
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2101      	movs	r1, #1
 8001b18:	54d1      	strb	r1, [r2, r3]
  
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2158      	movs	r1, #88	; 0x58
 8001b24:	5a5b      	ldrh	r3, [r3, r1]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4907      	ldr	r1, [pc, #28]	; (8001b48 <HAL_PCD_DevConnect+0x50>)
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	b299      	uxth	r1, r3
 8001b2e:	2358      	movs	r3, #88	; 0x58
 8001b30:	52d1      	strh	r1, [r2, r3]
  
  __HAL_UNLOCK(hpcd); 
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	23f4      	movs	r3, #244	; 0xf4
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2100      	movs	r1, #0
 8001b3a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	ffff8000 	.word	0xffff8000

08001b4c <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device 
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	23f4      	movs	r3, #244	; 0xf4
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_PCD_DevDisconnect+0x18>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e016      	b.n	8001b92 <HAL_PCD_DevDisconnect+0x46>
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	23f4      	movs	r3, #244	; 0xf4
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	54d1      	strb	r1, [r2, r3]
  
  /* Disable DP Pull-Down bit*/
   hpcd->Instance->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2158      	movs	r1, #88	; 0x58
 8001b78:	5a5b      	ldrh	r3, [r3, r1]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	045b      	lsls	r3, r3, #17
 8001b7e:	0c5b      	lsrs	r3, r3, #17
 8001b80:	b299      	uxth	r1, r3
 8001b82:	2358      	movs	r3, #88	; 0x58
 8001b84:	52d1      	strh	r1, [r2, r3]
  
  __HAL_UNLOCK(hpcd); 
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	23f4      	movs	r3, #244	; 0xf4
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	000a      	movs	r2, r1
 8001ba4:	1cfb      	adds	r3, r7, #3
 8001ba6:	701a      	strb	r2, [r3, #0]
   __HAL_LOCK(hpcd); 
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	23f4      	movs	r3, #244	; 0xf4
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	5cd3      	ldrb	r3, [r2, r3]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_PCD_SetAddress+0x1e>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e019      	b.n	8001bec <HAL_PCD_SetAddress+0x52>
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	23f4      	movs	r3, #244	; 0xf4
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	54d1      	strb	r1, [r2, r3]

   if(address == 0U) 
 8001bc2:	1cfb      	adds	r3, r7, #3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d105      	bne.n	8001bd6 <HAL_PCD_SetAddress+0x3c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	224c      	movs	r2, #76	; 0x4c
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	5299      	strh	r1, [r3, r2]
 8001bd4:	e004      	b.n	8001be0 <HAL_PCD_SetAddress+0x46>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	1cfa      	adds	r2, r7, #3
 8001bda:	2124      	movs	r1, #36	; 0x24
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	545a      	strb	r2, [r3, r1]
   }

  __HAL_UNLOCK(hpcd);   
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	23f4      	movs	r3, #244	; 0xf4
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2100      	movs	r1, #0
 8001be8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	000c      	movs	r4, r1
 8001bfe:	0010      	movs	r0, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	1cfb      	adds	r3, r7, #3
 8001c04:	1c22      	adds	r2, r4, #0
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	003b      	movs	r3, r7
 8001c0a:	1c02      	adds	r2, r0, #0
 8001c0c:	801a      	strh	r2, [r3, #0]
 8001c0e:	1cbb      	adds	r3, r7, #2
 8001c10:	1c0a      	adds	r2, r1, #0
 8001c12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c14:	2311      	movs	r3, #17
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001c1c:	1cfb      	adds	r3, r7, #3
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da0c      	bge.n	8001c40 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001c26:	1cfb      	adds	r3, r7, #3
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	227f      	movs	r2, #127	; 0x7f
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	0013      	movs	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	3328      	adds	r3, #40	; 0x28
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	18d3      	adds	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e00c      	b.n	8001c5a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001c40:	1cfb      	adds	r3, r7, #3
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	227f      	movs	r2, #127	; 0x7f
 8001c46:	401a      	ands	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	3309      	adds	r3, #9
 8001c52:	33ff      	adds	r3, #255	; 0xff
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	18d3      	adds	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 8001c5a:	1cfb      	adds	r3, r7, #3
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	227f      	movs	r2, #127	; 0x7f
 8001c60:	4013      	ands	r3, r2
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001c68:	1cfb      	adds	r3, r7, #3
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	09db      	lsrs	r3, r3, #7
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	001a      	movs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001c7a:	003b      	movs	r3, r7
 8001c7c:	881a      	ldrh	r2, [r3, #0]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1cba      	adds	r2, r7, #2
 8001c86:	7812      	ldrb	r2, [r2, #0]
 8001c88:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	23f4      	movs	r3, #244	; 0xf4
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_PCD_EP_Open+0xa6>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e30f      	b.n	80022ba <HAL_PCD_EP_Open+0x6c6>
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	23f4      	movs	r3, #244	; 0xf4
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	54d1      	strb	r1, [r2, r3]

  /* initialize Endpoint */
  switch (ep->type)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	78db      	ldrb	r3, [r3, #3]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d04c      	beq.n	8001d46 <HAL_PCD_EP_Open+0x152>
 8001cac:	dc02      	bgt.n	8001cb4 <HAL_PCD_EP_Open+0xc0>
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_PCD_EP_Open+0xca>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
    break;
  default:
    break;
 8001cb2:	e060      	b.n	8001d76 <HAL_PCD_EP_Open+0x182>
  switch (ep->type)
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d01a      	beq.n	8001cee <HAL_PCD_EP_Open+0xfa>
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d02c      	beq.n	8001d16 <HAL_PCD_EP_Open+0x122>
    break;
 8001cbc:	e05b      	b.n	8001d76 <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	18d2      	adds	r2, r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	18cb      	adds	r3, r1, r3
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	49b6      	ldr	r1, [pc, #728]	; (8001fb8 <HAL_PCD_EP_Open+0x3c4>)
 8001cde:	400b      	ands	r3, r1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	0089      	lsls	r1, r1, #2
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	8013      	strh	r3, [r2, #0]
    break;
 8001cec:	e043      	b.n	8001d76 <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	18d2      	adds	r2, r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0019      	movs	r1, r3
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	18cb      	adds	r3, r1, r3
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	49aa      	ldr	r1, [pc, #680]	; (8001fb8 <HAL_PCD_EP_Open+0x3c4>)
 8001d0e:	400b      	ands	r3, r1
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	8013      	strh	r3, [r2, #0]
    break;
 8001d14:	e02f      	b.n	8001d76 <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	18d2      	adds	r2, r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0019      	movs	r1, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	18cb      	adds	r3, r1, r3
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	49a0      	ldr	r1, [pc, #640]	; (8001fb8 <HAL_PCD_EP_Open+0x3c4>)
 8001d36:	400b      	ands	r3, r1
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	21c0      	movs	r1, #192	; 0xc0
 8001d3c:	00c9      	lsls	r1, r1, #3
 8001d3e:	430b      	orrs	r3, r1
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	8013      	strh	r3, [r2, #0]
    break;
 8001d44:	e017      	b.n	8001d76 <HAL_PCD_EP_Open+0x182>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	18d2      	adds	r2, r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0019      	movs	r1, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	18cb      	adds	r3, r1, r3
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	4994      	ldr	r1, [pc, #592]	; (8001fb8 <HAL_PCD_EP_Open+0x3c4>)
 8001d66:	400b      	ands	r3, r1
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	00c9      	lsls	r1, r1, #3
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	8013      	strh	r3, [r2, #0]
    break;
 8001d74:	46c0      	nop			; (mov r8, r8)
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	18d2      	adds	r2, r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0019      	movs	r1, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	18cb      	adds	r3, r1, r3
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	4989      	ldr	r1, [pc, #548]	; (8001fbc <HAL_PCD_EP_Open+0x3c8>)
 8001d96:	400b      	ands	r3, r1
 8001d98:	b299      	uxth	r1, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	430b      	orrs	r3, r1
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4986      	ldr	r1, [pc, #536]	; (8001fc0 <HAL_PCD_EP_Open+0x3cc>)
 8001da6:	430b      	orrs	r3, r1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0U) 
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	7a9b      	ldrb	r3, [r3, #10]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d000      	beq.n	8001db6 <HAL_PCD_EP_Open+0x1c2>
 8001db4:	e114      	b.n	8001fe0 <HAL_PCD_EP_Open+0x3ec>
  {
    if (ep->is_in)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	785b      	ldrb	r3, [r3, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d055      	beq.n	8001e6a <HAL_PCD_EP_Open+0x276>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2250      	movs	r2, #80	; 0x50
 8001dc4:	5a9b      	ldrh	r3, [r3, r2]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	001a      	movs	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	18d3      	adds	r3, r2, r3
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	18d3      	adds	r3, r2, r3
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	00d2      	lsls	r2, r2, #3
 8001dde:	4694      	mov	ip, r2
 8001de0:	4463      	add	r3, ip
 8001de2:	001a      	movs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	889b      	ldrh	r3, [r3, #4]
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	18db      	adds	r3, r3, r3
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	001a      	movs	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	18d3      	adds	r3, r2, r3
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	001a      	movs	r2, r3
 8001e04:	2340      	movs	r3, #64	; 0x40
 8001e06:	4013      	ands	r3, r2
 8001e08:	d015      	beq.n	8001e36 <HAL_PCD_EP_Open+0x242>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	001a      	movs	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	18d2      	adds	r2, r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	18cb      	adds	r3, r1, r3
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	4964      	ldr	r1, [pc, #400]	; (8001fbc <HAL_PCD_EP_Open+0x3c8>)
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4965      	ldr	r1, [pc, #404]	; (8001fc4 <HAL_PCD_EP_Open+0x3d0>)
 8001e30:	430b      	orrs	r3, r1
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	18d3      	adds	r3, r2, r3
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	4a60      	ldr	r2, [pc, #384]	; (8001fc8 <HAL_PCD_EP_Open+0x3d4>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	b29c      	uxth	r4, r3
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	4063      	eors	r3, r4
 8001e50:	b29c      	uxth	r4, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	001a      	movs	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	18d3      	adds	r3, r2, r3
 8001e60:	4a57      	ldr	r2, [pc, #348]	; (8001fc0 <HAL_PCD_EP_Open+0x3cc>)
 8001e62:	4322      	orrs	r2, r4
 8001e64:	b292      	uxth	r2, r2
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	e21f      	b.n	80022aa <HAL_PCD_EP_Open+0x6b6>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2250      	movs	r2, #80	; 0x50
 8001e70:	5a9b      	ldrh	r3, [r3, r2]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	001a      	movs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	18d3      	adds	r3, r2, r3
 8001e7e:	001a      	movs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	18d3      	adds	r3, r2, r3
 8001e86:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <HAL_PCD_EP_Open+0x3d8>)
 8001e88:	4694      	mov	ip, r2
 8001e8a:	4463      	add	r3, ip
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	889b      	ldrh	r3, [r3, #4]
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	18db      	adds	r3, r3, r3
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2250      	movs	r2, #80	; 0x50
 8001ea2:	5a9b      	ldrh	r3, [r3, r2]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	18d3      	adds	r3, r2, r3
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	18d3      	adds	r3, r2, r3
 8001eb8:	4a45      	ldr	r2, [pc, #276]	; (8001fd0 <HAL_PCD_EP_Open+0x3dc>)
 8001eba:	4694      	mov	ip, r2
 8001ebc:	4463      	add	r3, ip
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b3e      	cmp	r3, #62	; 0x3e
 8001ec6:	d91c      	bls.n	8001f02 <HAL_PCD_EP_Open+0x30e>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	095a      	lsrs	r2, r3, #5
 8001ece:	2312      	movs	r3, #18
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	801a      	strh	r2, [r3, #0]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	221f      	movs	r2, #31
 8001eda:	4013      	ands	r3, r2
 8001edc:	d106      	bne.n	8001eec <HAL_PCD_EP_Open+0x2f8>
 8001ede:	2312      	movs	r3, #18
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	2312      	movs	r3, #18
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	3a01      	subs	r2, #1
 8001eea:	801a      	strh	r2, [r3, #0]
 8001eec:	2312      	movs	r3, #18
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	029b      	lsls	r3, r3, #10
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4a37      	ldr	r2, [pc, #220]	; (8001fd4 <HAL_PCD_EP_Open+0x3e0>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	e018      	b.n	8001f34 <HAL_PCD_EP_Open+0x340>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	085a      	lsrs	r2, r3, #1
 8001f08:	2312      	movs	r3, #18
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4013      	ands	r3, r2
 8001f16:	d006      	beq.n	8001f26 <HAL_PCD_EP_Open+0x332>
 8001f18:	2312      	movs	r3, #18
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	881a      	ldrh	r2, [r3, #0]
 8001f1e:	2312      	movs	r3, #18
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	3201      	adds	r2, #1
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	2312      	movs	r3, #18
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	029b      	lsls	r3, r3, #10
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	001a      	movs	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	18d3      	adds	r3, r2, r3
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	001a      	movs	r2, r3
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	01db      	lsls	r3, r3, #7
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d015      	beq.n	8001f7a <HAL_PCD_EP_Open+0x386>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	001a      	movs	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	18d2      	adds	r2, r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0019      	movs	r1, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	18cb      	adds	r3, r1, r3
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	4913      	ldr	r1, [pc, #76]	; (8001fbc <HAL_PCD_EP_Open+0x3c8>)
 8001f6e:	400b      	ands	r3, r1
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4919      	ldr	r1, [pc, #100]	; (8001fd8 <HAL_PCD_EP_Open+0x3e4>)
 8001f74:	430b      	orrs	r3, r1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	001a      	movs	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	18d3      	adds	r3, r2, r3
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <HAL_PCD_EP_Open+0x3e8>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	b29c      	uxth	r4, r3
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	4063      	eors	r3, r4
 8001f96:	b29c      	uxth	r4, r3
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	019b      	lsls	r3, r3, #6
 8001f9c:	4063      	eors	r3, r4
 8001f9e:	b29c      	uxth	r4, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	001a      	movs	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_PCD_EP_Open+0x3cc>)
 8001fb0:	4322      	orrs	r2, r4
 8001fb2:	b292      	uxth	r2, r2
 8001fb4:	801a      	strh	r2, [r3, #0]
 8001fb6:	e178      	b.n	80022aa <HAL_PCD_EP_Open+0x6b6>
 8001fb8:	ffff898f 	.word	0xffff898f
 8001fbc:	00000f0f 	.word	0x00000f0f
 8001fc0:	ffff8080 	.word	0xffff8080
 8001fc4:	ffff80c0 	.word	0xffff80c0
 8001fc8:	ffff8fbf 	.word	0xffff8fbf
 8001fcc:	00000404 	.word	0x00000404
 8001fd0:	00000406 	.word	0x00000406
 8001fd4:	ffff8000 	.word	0xffff8000
 8001fd8:	ffffc080 	.word	0xffffc080
 8001fdc:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	18d2      	adds	r2, r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	18cb      	adds	r3, r1, r3
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	49b1      	ldr	r1, [pc, #708]	; (80022c4 <HAL_PCD_EP_Open+0x6d0>)
 8002000:	400b      	ands	r3, r1
 8002002:	b29b      	uxth	r3, r3
 8002004:	49b0      	ldr	r1, [pc, #704]	; (80022c8 <HAL_PCD_EP_Open+0x6d4>)
 8002006:	430b      	orrs	r3, r1
 8002008:	b29b      	uxth	r3, r3
 800200a:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2250      	movs	r2, #80	; 0x50
 8002012:	5a9b      	ldrh	r3, [r3, r2]
 8002014:	b29b      	uxth	r3, r3
 8002016:	001a      	movs	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	18d3      	adds	r3, r2, r3
 8002020:	001a      	movs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	18d3      	adds	r3, r2, r3
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	00d2      	lsls	r2, r2, #3
 800202c:	4694      	mov	ip, r2
 800202e:	4463      	add	r3, ip
 8002030:	001a      	movs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	88db      	ldrh	r3, [r3, #6]
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	b29b      	uxth	r3, r3
 800203a:	18db      	adds	r3, r3, r3
 800203c:	b29b      	uxth	r3, r3
 800203e:	8013      	strh	r3, [r2, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2250      	movs	r2, #80	; 0x50
 8002046:	5a9b      	ldrh	r3, [r3, r2]
 8002048:	b29b      	uxth	r3, r3
 800204a:	001a      	movs	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	18d3      	adds	r3, r2, r3
 8002054:	001a      	movs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	18d3      	adds	r3, r2, r3
 800205c:	4a9b      	ldr	r2, [pc, #620]	; (80022cc <HAL_PCD_EP_Open+0x6d8>)
 800205e:	4694      	mov	ip, r2
 8002060:	4463      	add	r3, ip
 8002062:	001a      	movs	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	891b      	ldrh	r3, [r3, #8]
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	b29b      	uxth	r3, r3
 800206c:	18db      	adds	r3, r3, r3
 800206e:	b29b      	uxth	r3, r3
 8002070:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	785b      	ldrb	r3, [r3, #1]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d000      	beq.n	800207c <HAL_PCD_EP_Open+0x488>
 800207a:	e08f      	b.n	800219c <HAL_PCD_EP_Open+0x5a8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	001a      	movs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	18d3      	adds	r3, r2, r3
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	001a      	movs	r2, r3
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	01db      	lsls	r3, r3, #7
 8002092:	4013      	ands	r3, r2
 8002094:	d015      	beq.n	80020c2 <HAL_PCD_EP_Open+0x4ce>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	001a      	movs	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	18d2      	adds	r2, r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0019      	movs	r1, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	18cb      	adds	r3, r1, r3
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	4986      	ldr	r1, [pc, #536]	; (80022d0 <HAL_PCD_EP_Open+0x6dc>)
 80020b6:	400b      	ands	r3, r1
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4986      	ldr	r1, [pc, #536]	; (80022d4 <HAL_PCD_EP_Open+0x6e0>)
 80020bc:	430b      	orrs	r3, r1
 80020be:	b29b      	uxth	r3, r3
 80020c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	001a      	movs	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	18d3      	adds	r3, r2, r3
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	001a      	movs	r2, r3
 80020d4:	2340      	movs	r3, #64	; 0x40
 80020d6:	4013      	ands	r3, r2
 80020d8:	d015      	beq.n	8002106 <HAL_PCD_EP_Open+0x512>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	001a      	movs	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	18d2      	adds	r2, r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0019      	movs	r1, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	18cb      	adds	r3, r1, r3
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	4975      	ldr	r1, [pc, #468]	; (80022d0 <HAL_PCD_EP_Open+0x6dc>)
 80020fa:	400b      	ands	r3, r1
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4976      	ldr	r1, [pc, #472]	; (80022d8 <HAL_PCD_EP_Open+0x6e4>)
 8002100:	430b      	orrs	r3, r1
 8002102:	b29b      	uxth	r3, r3
 8002104:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	001a      	movs	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	18d2      	adds	r2, r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0019      	movs	r1, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	18cb      	adds	r3, r1, r3
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	496a      	ldr	r1, [pc, #424]	; (80022d0 <HAL_PCD_EP_Open+0x6dc>)
 8002126:	400b      	ands	r3, r1
 8002128:	b29b      	uxth	r3, r3
 800212a:	496b      	ldr	r1, [pc, #428]	; (80022d8 <HAL_PCD_EP_Open+0x6e4>)
 800212c:	430b      	orrs	r3, r1
 800212e:	b29b      	uxth	r3, r3
 8002130:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	001a      	movs	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	18d3      	adds	r3, r2, r3
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	4a66      	ldr	r2, [pc, #408]	; (80022dc <HAL_PCD_EP_Open+0x6e8>)
 8002144:	4013      	ands	r3, r2
 8002146:	b29c      	uxth	r4, r3
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	015b      	lsls	r3, r3, #5
 800214c:	4063      	eors	r3, r4
 800214e:	b29c      	uxth	r4, r3
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	019b      	lsls	r3, r3, #6
 8002154:	4063      	eors	r3, r4
 8002156:	b29c      	uxth	r4, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	001a      	movs	r2, r3
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	18d3      	adds	r3, r2, r3
 8002166:	4a5e      	ldr	r2, [pc, #376]	; (80022e0 <HAL_PCD_EP_Open+0x6ec>)
 8002168:	4322      	orrs	r2, r4
 800216a:	b292      	uxth	r2, r2
 800216c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	001a      	movs	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	18d3      	adds	r3, r2, r3
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	4a59      	ldr	r2, [pc, #356]	; (80022e4 <HAL_PCD_EP_Open+0x6f0>)
 8002180:	4013      	ands	r3, r2
 8002182:	b29c      	uxth	r4, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	001a      	movs	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	18d3      	adds	r3, r2, r3
 8002192:	4a53      	ldr	r2, [pc, #332]	; (80022e0 <HAL_PCD_EP_Open+0x6ec>)
 8002194:	4322      	orrs	r2, r4
 8002196:	b292      	uxth	r2, r2
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	e086      	b.n	80022aa <HAL_PCD_EP_Open+0x6b6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	001a      	movs	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	18d3      	adds	r3, r2, r3
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	001a      	movs	r2, r3
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	01db      	lsls	r3, r3, #7
 80021b2:	4013      	ands	r3, r2
 80021b4:	d015      	beq.n	80021e2 <HAL_PCD_EP_Open+0x5ee>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	001a      	movs	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	18d2      	adds	r2, r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0019      	movs	r1, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	18cb      	adds	r3, r1, r3
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	493e      	ldr	r1, [pc, #248]	; (80022d0 <HAL_PCD_EP_Open+0x6dc>)
 80021d6:	400b      	ands	r3, r1
 80021d8:	b29b      	uxth	r3, r3
 80021da:	493e      	ldr	r1, [pc, #248]	; (80022d4 <HAL_PCD_EP_Open+0x6e0>)
 80021dc:	430b      	orrs	r3, r1
 80021de:	b29b      	uxth	r3, r3
 80021e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	001a      	movs	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	18d3      	adds	r3, r2, r3
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	001a      	movs	r2, r3
 80021f4:	2340      	movs	r3, #64	; 0x40
 80021f6:	4013      	ands	r3, r2
 80021f8:	d015      	beq.n	8002226 <HAL_PCD_EP_Open+0x632>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	001a      	movs	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	18d2      	adds	r2, r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	0019      	movs	r1, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	18cb      	adds	r3, r1, r3
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	492d      	ldr	r1, [pc, #180]	; (80022d0 <HAL_PCD_EP_Open+0x6dc>)
 800221a:	400b      	ands	r3, r1
 800221c:	b29b      	uxth	r3, r3
 800221e:	492e      	ldr	r1, [pc, #184]	; (80022d8 <HAL_PCD_EP_Open+0x6e4>)
 8002220:	430b      	orrs	r3, r1
 8002222:	b29b      	uxth	r3, r3
 8002224:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	001a      	movs	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	18d2      	adds	r2, r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0019      	movs	r1, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	18cb      	adds	r3, r1, r3
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	4922      	ldr	r1, [pc, #136]	; (80022d0 <HAL_PCD_EP_Open+0x6dc>)
 8002246:	400b      	ands	r3, r1
 8002248:	b29b      	uxth	r3, r3
 800224a:	4922      	ldr	r1, [pc, #136]	; (80022d4 <HAL_PCD_EP_Open+0x6e0>)
 800224c:	430b      	orrs	r3, r1
 800224e:	b29b      	uxth	r3, r3
 8002250:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	001a      	movs	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	18d3      	adds	r3, r2, r3
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <HAL_PCD_EP_Open+0x6f0>)
 8002264:	4013      	ands	r3, r2
 8002266:	b29c      	uxth	r4, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	001a      	movs	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	18d3      	adds	r3, r2, r3
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_PCD_EP_Open+0x6ec>)
 8002278:	4322      	orrs	r2, r4
 800227a:	b292      	uxth	r2, r2
 800227c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	001a      	movs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	18d3      	adds	r3, r2, r3
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	4a13      	ldr	r2, [pc, #76]	; (80022dc <HAL_PCD_EP_Open+0x6e8>)
 8002290:	4013      	ands	r3, r2
 8002292:	b29c      	uxth	r4, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	001a      	movs	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_PCD_EP_Open+0x6ec>)
 80022a4:	4322      	orrs	r2, r4
 80022a6:	b292      	uxth	r2, r2
 80022a8:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	23f4      	movs	r3, #244	; 0xf4
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2100      	movs	r1, #0
 80022b2:	54d1      	strb	r1, [r2, r3]
  return ret;
 80022b4:	2311      	movs	r3, #17
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	781b      	ldrb	r3, [r3, #0]
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b007      	add	sp, #28
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	00000e0f 	.word	0x00000e0f
 80022c8:	ffff8180 	.word	0xffff8180
 80022cc:	00000404 	.word	0x00000404
 80022d0:	00000f0f 	.word	0x00000f0f
 80022d4:	ffffc080 	.word	0xffffc080
 80022d8:	ffff80c0 	.word	0xffff80c0
 80022dc:	ffffbf8f 	.word	0xffffbf8f
 80022e0:	ffff8080 	.word	0xffff8080
 80022e4:	ffff8fbf 	.word	0xffff8fbf

080022e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	000a      	movs	r2, r1
 80022f2:	1cfb      	adds	r3, r7, #3
 80022f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80022f6:	1cfb      	adds	r3, r7, #3
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	da0c      	bge.n	800231a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002300:	1cfb      	adds	r3, r7, #3
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	227f      	movs	r2, #127	; 0x7f
 8002306:	401a      	ands	r2, r3
 8002308:	0013      	movs	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	3328      	adds	r3, #40	; 0x28
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	18d3      	adds	r3, r2, r3
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e00c      	b.n	8002334 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800231a:	1cfb      	adds	r3, r7, #3
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	227f      	movs	r2, #127	; 0x7f
 8002320:	401a      	ands	r2, r3
 8002322:	0013      	movs	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3309      	adds	r3, #9
 800232c:	33ff      	adds	r3, #255	; 0xff
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	18d3      	adds	r3, r2, r3
 8002332:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8002334:	1cfb      	adds	r3, r7, #3
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	227f      	movs	r2, #127	; 0x7f
 800233a:	4013      	ands	r3, r2
 800233c:	b2da      	uxtb	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8002342:	1cfb      	adds	r3, r7, #3
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b25b      	sxtb	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	09db      	lsrs	r3, r3, #7
 800234c:	b2db      	uxtb	r3, r3
 800234e:	001a      	movs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	23f4      	movs	r3, #244	; 0xf4
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_PCD_EP_Close+0x7c>
 8002360:	2302      	movs	r3, #2
 8002362:	e19a      	b.n	800269a <HAL_PCD_EP_Close+0x3b2>
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	23f4      	movs	r3, #244	; 0xf4
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2101      	movs	r1, #1
 800236c:	54d1      	strb	r1, [r2, r3]

  if (ep->doublebuffer == 0U) 
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	7a9b      	ldrb	r3, [r3, #10]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d000      	beq.n	8002378 <HAL_PCD_EP_Close+0x90>
 8002376:	e076      	b.n	8002466 <HAL_PCD_EP_Close+0x17e>
  {
    if (ep->is_in)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	785b      	ldrb	r3, [r3, #1]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d038      	beq.n	80023f2 <HAL_PCD_EP_Close+0x10a>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	001a      	movs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	18d3      	adds	r3, r2, r3
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	001a      	movs	r2, r3
 8002392:	2340      	movs	r3, #64	; 0x40
 8002394:	4013      	ands	r3, r2
 8002396:	d015      	beq.n	80023c4 <HAL_PCD_EP_Close+0xdc>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	001a      	movs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	18d2      	adds	r2, r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0019      	movs	r1, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	18cb      	adds	r3, r1, r3
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	49bb      	ldr	r1, [pc, #748]	; (80026a4 <HAL_PCD_EP_Close+0x3bc>)
 80023b8:	400b      	ands	r3, r1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	49ba      	ldr	r1, [pc, #744]	; (80026a8 <HAL_PCD_EP_Close+0x3c0>)
 80023be:	430b      	orrs	r3, r1
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	001a      	movs	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	4ab5      	ldr	r2, [pc, #724]	; (80026ac <HAL_PCD_EP_Close+0x3c4>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	b29c      	uxth	r4, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	001a      	movs	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	18d3      	adds	r3, r2, r3
 80023e8:	4ab1      	ldr	r2, [pc, #708]	; (80026b0 <HAL_PCD_EP_Close+0x3c8>)
 80023ea:	4322      	orrs	r2, r4
 80023ec:	b292      	uxth	r2, r2
 80023ee:	801a      	strh	r2, [r3, #0]
 80023f0:	e14d      	b.n	800268e <HAL_PCD_EP_Close+0x3a6>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	001a      	movs	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	18d3      	adds	r3, r2, r3
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	001a      	movs	r2, r3
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	01db      	lsls	r3, r3, #7
 8002408:	4013      	ands	r3, r2
 800240a:	d015      	beq.n	8002438 <HAL_PCD_EP_Close+0x150>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	001a      	movs	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	18d2      	adds	r2, r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0019      	movs	r1, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	18cb      	adds	r3, r1, r3
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	499e      	ldr	r1, [pc, #632]	; (80026a4 <HAL_PCD_EP_Close+0x3bc>)
 800242c:	400b      	ands	r3, r1
 800242e:	b29b      	uxth	r3, r3
 8002430:	49a0      	ldr	r1, [pc, #640]	; (80026b4 <HAL_PCD_EP_Close+0x3cc>)
 8002432:	430b      	orrs	r3, r1
 8002434:	b29b      	uxth	r3, r3
 8002436:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	001a      	movs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	18d3      	adds	r3, r2, r3
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	4a9b      	ldr	r2, [pc, #620]	; (80026b8 <HAL_PCD_EP_Close+0x3d0>)
 800244a:	4013      	ands	r3, r2
 800244c:	b29c      	uxth	r4, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	001a      	movs	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	18d3      	adds	r3, r2, r3
 800245c:	4a94      	ldr	r2, [pc, #592]	; (80026b0 <HAL_PCD_EP_Close+0x3c8>)
 800245e:	4322      	orrs	r2, r4
 8002460:	b292      	uxth	r2, r2
 8002462:	801a      	strh	r2, [r3, #0]
 8002464:	e113      	b.n	800268e <HAL_PCD_EP_Close+0x3a6>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d000      	beq.n	8002470 <HAL_PCD_EP_Close+0x188>
 800246e:	e087      	b.n	8002580 <HAL_PCD_EP_Close+0x298>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	001a      	movs	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	18d3      	adds	r3, r2, r3
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	001a      	movs	r2, r3
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	01db      	lsls	r3, r3, #7
 8002486:	4013      	ands	r3, r2
 8002488:	d015      	beq.n	80024b6 <HAL_PCD_EP_Close+0x1ce>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	001a      	movs	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	18d2      	adds	r2, r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	0019      	movs	r1, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	18cb      	adds	r3, r1, r3
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	497e      	ldr	r1, [pc, #504]	; (80026a4 <HAL_PCD_EP_Close+0x3bc>)
 80024aa:	400b      	ands	r3, r1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4981      	ldr	r1, [pc, #516]	; (80026b4 <HAL_PCD_EP_Close+0x3cc>)
 80024b0:	430b      	orrs	r3, r1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	001a      	movs	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	001a      	movs	r2, r3
 80024c8:	2340      	movs	r3, #64	; 0x40
 80024ca:	4013      	ands	r3, r2
 80024cc:	d015      	beq.n	80024fa <HAL_PCD_EP_Close+0x212>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	001a      	movs	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	18d2      	adds	r2, r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0019      	movs	r1, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	18cb      	adds	r3, r1, r3
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	496d      	ldr	r1, [pc, #436]	; (80026a4 <HAL_PCD_EP_Close+0x3bc>)
 80024ee:	400b      	ands	r3, r1
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	496d      	ldr	r1, [pc, #436]	; (80026a8 <HAL_PCD_EP_Close+0x3c0>)
 80024f4:	430b      	orrs	r3, r1
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	001a      	movs	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	18d2      	adds	r2, r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0019      	movs	r1, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	18cb      	adds	r3, r1, r3
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	4962      	ldr	r1, [pc, #392]	; (80026a4 <HAL_PCD_EP_Close+0x3bc>)
 800251a:	400b      	ands	r3, r1
 800251c:	b29b      	uxth	r3, r3
 800251e:	4962      	ldr	r1, [pc, #392]	; (80026a8 <HAL_PCD_EP_Close+0x3c0>)
 8002520:	430b      	orrs	r3, r1
 8002522:	b29b      	uxth	r3, r3
 8002524:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	001a      	movs	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	18d3      	adds	r3, r2, r3
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	4a60      	ldr	r2, [pc, #384]	; (80026b8 <HAL_PCD_EP_Close+0x3d0>)
 8002538:	4013      	ands	r3, r2
 800253a:	b29c      	uxth	r4, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	001a      	movs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	4a59      	ldr	r2, [pc, #356]	; (80026b0 <HAL_PCD_EP_Close+0x3c8>)
 800254c:	4322      	orrs	r2, r4
 800254e:	b292      	uxth	r2, r2
 8002550:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	001a      	movs	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	18d3      	adds	r3, r2, r3
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_PCD_EP_Close+0x3c4>)
 8002564:	4013      	ands	r3, r2
 8002566:	b29c      	uxth	r4, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	001a      	movs	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	18d3      	adds	r3, r2, r3
 8002576:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <HAL_PCD_EP_Close+0x3c8>)
 8002578:	4322      	orrs	r2, r4
 800257a:	b292      	uxth	r2, r2
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	e086      	b.n	800268e <HAL_PCD_EP_Close+0x3a6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	001a      	movs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	18d3      	adds	r3, r2, r3
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	001a      	movs	r2, r3
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	01db      	lsls	r3, r3, #7
 8002596:	4013      	ands	r3, r2
 8002598:	d015      	beq.n	80025c6 <HAL_PCD_EP_Close+0x2de>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	001a      	movs	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	18d2      	adds	r2, r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0019      	movs	r1, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	18cb      	adds	r3, r1, r3
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	493a      	ldr	r1, [pc, #232]	; (80026a4 <HAL_PCD_EP_Close+0x3bc>)
 80025ba:	400b      	ands	r3, r1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	493d      	ldr	r1, [pc, #244]	; (80026b4 <HAL_PCD_EP_Close+0x3cc>)
 80025c0:	430b      	orrs	r3, r1
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	001a      	movs	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	18d3      	adds	r3, r2, r3
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	001a      	movs	r2, r3
 80025d8:	2340      	movs	r3, #64	; 0x40
 80025da:	4013      	ands	r3, r2
 80025dc:	d015      	beq.n	800260a <HAL_PCD_EP_Close+0x322>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	001a      	movs	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	18d2      	adds	r2, r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0019      	movs	r1, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	18cb      	adds	r3, r1, r3
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	4929      	ldr	r1, [pc, #164]	; (80026a4 <HAL_PCD_EP_Close+0x3bc>)
 80025fe:	400b      	ands	r3, r1
 8002600:	b29b      	uxth	r3, r3
 8002602:	4929      	ldr	r1, [pc, #164]	; (80026a8 <HAL_PCD_EP_Close+0x3c0>)
 8002604:	430b      	orrs	r3, r1
 8002606:	b29b      	uxth	r3, r3
 8002608:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	001a      	movs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	18d2      	adds	r2, r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0019      	movs	r1, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	18cb      	adds	r3, r1, r3
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	491e      	ldr	r1, [pc, #120]	; (80026a4 <HAL_PCD_EP_Close+0x3bc>)
 800262a:	400b      	ands	r3, r1
 800262c:	b29b      	uxth	r3, r3
 800262e:	4921      	ldr	r1, [pc, #132]	; (80026b4 <HAL_PCD_EP_Close+0x3cc>)
 8002630:	430b      	orrs	r3, r1
 8002632:	b29b      	uxth	r3, r3
 8002634:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	001a      	movs	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	18d3      	adds	r3, r2, r3
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	4a19      	ldr	r2, [pc, #100]	; (80026ac <HAL_PCD_EP_Close+0x3c4>)
 8002648:	4013      	ands	r3, r2
 800264a:	b29c      	uxth	r4, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	001a      	movs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_PCD_EP_Close+0x3c8>)
 800265c:	4322      	orrs	r2, r4
 800265e:	b292      	uxth	r2, r2
 8002660:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	001a      	movs	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	18d3      	adds	r3, r2, r3
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_PCD_EP_Close+0x3d0>)
 8002674:	4013      	ands	r3, r2
 8002676:	b29c      	uxth	r4, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	001a      	movs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	18d3      	adds	r3, r2, r3
 8002686:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_PCD_EP_Close+0x3c8>)
 8002688:	4322      	orrs	r2, r4
 800268a:	b292      	uxth	r2, r2
 800268c:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	23f4      	movs	r3, #244	; 0xf4
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2100      	movs	r1, #0
 8002696:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b005      	add	sp, #20
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	00000f0f 	.word	0x00000f0f
 80026a8:	ffff80c0 	.word	0xffff80c0
 80026ac:	ffff8fbf 	.word	0xffff8fbf
 80026b0:	ffff8080 	.word	0xffff8080
 80026b4:	ffffc080 	.word	0xffffc080
 80026b8:	ffffbf8f 	.word	0xffffbf8f

080026bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b08b      	sub	sp, #44	; 0x2c
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	230b      	movs	r3, #11
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	1c0a      	adds	r2, r1, #0
 80026ce:	701a      	strb	r2, [r3, #0]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80026d0:	230b      	movs	r3, #11
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	227f      	movs	r2, #127	; 0x7f
 80026d8:	401a      	ands	r2, r3
 80026da:	0013      	movs	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	3309      	adds	r3, #9
 80026e4:	33ff      	adds	r3, #255	; 0xff
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	18d3      	adds	r3, r2, r3
 80026ea:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2200      	movs	r2, #0
 80026fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2200      	movs	r2, #0
 8002702:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002704:	230b      	movs	r3, #11
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	227f      	movs	r2, #127	; 0x7f
 800270c:	4013      	ands	r3, r2
 800270e:	b2da      	uxtb	r2, r3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	701a      	strb	r2, [r3, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	429a      	cmp	r2, r3
 800271e:	d909      	bls.n	8002734 <HAL_PCD_EP_Receive+0x78>
  {
    len=ep->maxpacket;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	1ad2      	subs	r2, r2, r3
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	615a      	str	r2, [r3, #20]
 8002732:	e005      	b.n	8002740 <HAL_PCD_EP_Receive+0x84>
  }
  else
  {
    len=ep->xfer_len;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	7a9b      	ldrb	r3, [r3, #10]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d147      	bne.n	80027d8 <HAL_PCD_EP_Receive+0x11c>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2250      	movs	r2, #80	; 0x50
 800274e:	5a9b      	ldrh	r3, [r3, r2]
 8002750:	b29b      	uxth	r3, r3
 8002752:	001a      	movs	r2, r3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	18d3      	adds	r3, r2, r3
 800275c:	001a      	movs	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	18d3      	adds	r3, r2, r3
 8002764:	4a92      	ldr	r2, [pc, #584]	; (80029b0 <HAL_PCD_EP_Receive+0x2f4>)
 8002766:	4694      	mov	ip, r2
 8002768:	4463      	add	r3, ip
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b3e      	cmp	r3, #62	; 0x3e
 8002770:	d91a      	bls.n	80027a8 <HAL_PCD_EP_Receive+0xec>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	095a      	lsrs	r2, r3, #5
 8002776:	2326      	movs	r3, #38	; 0x26
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	801a      	strh	r2, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	221f      	movs	r2, #31
 8002780:	4013      	ands	r3, r2
 8002782:	d106      	bne.n	8002792 <HAL_PCD_EP_Receive+0xd6>
 8002784:	2326      	movs	r3, #38	; 0x26
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	2326      	movs	r3, #38	; 0x26
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	3a01      	subs	r2, #1
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	2326      	movs	r3, #38	; 0x26
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	b29b      	uxth	r3, r3
 800279c:	4a85      	ldr	r2, [pc, #532]	; (80029b4 <HAL_PCD_EP_Receive+0x2f8>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	e0df      	b.n	8002968 <HAL_PCD_EP_Receive+0x2ac>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	085a      	lsrs	r2, r3, #1
 80027ac:	2326      	movs	r3, #38	; 0x26
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	d006      	beq.n	80027c8 <HAL_PCD_EP_Receive+0x10c>
 80027ba:	2326      	movs	r3, #38	; 0x26
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	881a      	ldrh	r2, [r3, #0]
 80027c0:	2326      	movs	r3, #38	; 0x26
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	3201      	adds	r2, #1
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	2326      	movs	r3, #38	; 0x26
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	e0c7      	b.n	8002968 <HAL_PCD_EP_Receive+0x2ac>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	785b      	ldrb	r3, [r3, #1]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d147      	bne.n	8002870 <HAL_PCD_EP_Receive+0x1b4>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2250      	movs	r2, #80	; 0x50
 80027e6:	5a9b      	ldrh	r3, [r3, r2]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	001a      	movs	r2, r3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	18d3      	adds	r3, r2, r3
 80027f4:	001a      	movs	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	18d3      	adds	r3, r2, r3
 80027fc:	4a6e      	ldr	r2, [pc, #440]	; (80029b8 <HAL_PCD_EP_Receive+0x2fc>)
 80027fe:	4694      	mov	ip, r2
 8002800:	4463      	add	r3, ip
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b3e      	cmp	r3, #62	; 0x3e
 8002808:	d91a      	bls.n	8002840 <HAL_PCD_EP_Receive+0x184>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	095a      	lsrs	r2, r3, #5
 800280e:	2324      	movs	r3, #36	; 0x24
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	221f      	movs	r2, #31
 8002818:	4013      	ands	r3, r2
 800281a:	d106      	bne.n	800282a <HAL_PCD_EP_Receive+0x16e>
 800281c:	2324      	movs	r3, #36	; 0x24
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	2324      	movs	r3, #36	; 0x24
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	3a01      	subs	r2, #1
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	2324      	movs	r3, #36	; 0x24
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	029b      	lsls	r3, r3, #10
 8002832:	b29b      	uxth	r3, r3
 8002834:	4a5f      	ldr	r2, [pc, #380]	; (80029b4 <HAL_PCD_EP_Receive+0x2f8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	b29a      	uxth	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	e02f      	b.n	80028a0 <HAL_PCD_EP_Receive+0x1e4>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	085a      	lsrs	r2, r3, #1
 8002844:	2324      	movs	r3, #36	; 0x24
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	801a      	strh	r2, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	d006      	beq.n	8002860 <HAL_PCD_EP_Receive+0x1a4>
 8002852:	2324      	movs	r3, #36	; 0x24
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	881a      	ldrh	r2, [r3, #0]
 8002858:	2324      	movs	r3, #36	; 0x24
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	3201      	adds	r2, #1
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	2324      	movs	r3, #36	; 0x24
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	029b      	lsls	r3, r3, #10
 8002868:	b29a      	uxth	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	801a      	strh	r2, [r3, #0]
 800286e:	e017      	b.n	80028a0 <HAL_PCD_EP_Receive+0x1e4>
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	785b      	ldrb	r3, [r3, #1]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d113      	bne.n	80028a0 <HAL_PCD_EP_Receive+0x1e4>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2250      	movs	r2, #80	; 0x50
 800287e:	5a9b      	ldrh	r3, [r3, r2]
 8002880:	b29b      	uxth	r3, r3
 8002882:	001a      	movs	r2, r3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	18d3      	adds	r3, r2, r3
 800288c:	001a      	movs	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	18d3      	adds	r3, r2, r3
 8002894:	4a48      	ldr	r2, [pc, #288]	; (80029b8 <HAL_PCD_EP_Receive+0x2fc>)
 8002896:	4694      	mov	ip, r2
 8002898:	4463      	add	r3, ip
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	b292      	uxth	r2, r2
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	785b      	ldrb	r3, [r3, #1]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d147      	bne.n	8002938 <HAL_PCD_EP_Receive+0x27c>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2250      	movs	r2, #80	; 0x50
 80028ae:	5a9b      	ldrh	r3, [r3, r2]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	001a      	movs	r2, r3
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	18d3      	adds	r3, r2, r3
 80028bc:	001a      	movs	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	18d3      	adds	r3, r2, r3
 80028c4:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <HAL_PCD_EP_Receive+0x2f4>)
 80028c6:	4694      	mov	ip, r2
 80028c8:	4463      	add	r3, ip
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b3e      	cmp	r3, #62	; 0x3e
 80028d0:	d91a      	bls.n	8002908 <HAL_PCD_EP_Receive+0x24c>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	095a      	lsrs	r2, r3, #5
 80028d6:	2322      	movs	r3, #34	; 0x22
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	801a      	strh	r2, [r3, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	221f      	movs	r2, #31
 80028e0:	4013      	ands	r3, r2
 80028e2:	d106      	bne.n	80028f2 <HAL_PCD_EP_Receive+0x236>
 80028e4:	2322      	movs	r3, #34	; 0x22
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	881a      	ldrh	r2, [r3, #0]
 80028ea:	2322      	movs	r3, #34	; 0x22
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	3a01      	subs	r2, #1
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	2322      	movs	r3, #34	; 0x22
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_PCD_EP_Receive+0x2f8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	b29a      	uxth	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	e02f      	b.n	8002968 <HAL_PCD_EP_Receive+0x2ac>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	085a      	lsrs	r2, r3, #1
 800290c:	2322      	movs	r3, #34	; 0x22
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2201      	movs	r2, #1
 8002916:	4013      	ands	r3, r2
 8002918:	d006      	beq.n	8002928 <HAL_PCD_EP_Receive+0x26c>
 800291a:	2322      	movs	r3, #34	; 0x22
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	881a      	ldrh	r2, [r3, #0]
 8002920:	2322      	movs	r3, #34	; 0x22
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	3201      	adds	r2, #1
 8002926:	801a      	strh	r2, [r3, #0]
 8002928:	2322      	movs	r3, #34	; 0x22
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	029b      	lsls	r3, r3, #10
 8002930:	b29a      	uxth	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	e017      	b.n	8002968 <HAL_PCD_EP_Receive+0x2ac>
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d113      	bne.n	8002968 <HAL_PCD_EP_Receive+0x2ac>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2250      	movs	r2, #80	; 0x50
 8002946:	5a9b      	ldrh	r3, [r3, r2]
 8002948:	b29b      	uxth	r3, r3
 800294a:	001a      	movs	r2, r3
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	18d3      	adds	r3, r2, r3
 8002954:	001a      	movs	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	18d3      	adds	r3, r2, r3
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_PCD_EP_Receive+0x2f4>)
 800295e:	4694      	mov	ip, r2
 8002960:	4463      	add	r3, ip
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	b292      	uxth	r2, r2
 8002966:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	001a      	movs	r2, r3
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	18d3      	adds	r3, r2, r3
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_PCD_EP_Receive+0x300>)
 800297a:	4013      	ands	r3, r2
 800297c:	b29c      	uxth	r4, r3
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	015b      	lsls	r3, r3, #5
 8002982:	4063      	eors	r3, r4
 8002984:	b29c      	uxth	r4, r3
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	4063      	eors	r3, r4
 800298c:	b29c      	uxth	r4, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	001a      	movs	r2, r3
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	18d3      	adds	r3, r2, r3
 800299c:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <HAL_PCD_EP_Receive+0x304>)
 800299e:	4322      	orrs	r2, r4
 80029a0:	b292      	uxth	r2, r2
 80029a2:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b00b      	add	sp, #44	; 0x2c
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	00000406 	.word	0x00000406
 80029b4:	ffff8000 	.word	0xffff8000
 80029b8:	00000402 	.word	0x00000402
 80029bc:	ffffbf8f 	.word	0xffffbf8f
 80029c0:	ffff8080 	.word	0xffff8080

080029c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	000a      	movs	r2, r1
 80029ce:	1cfb      	adds	r3, r7, #3
 80029d0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 80029d2:	1cfb      	adds	r3, r7, #3
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	227f      	movs	r2, #127	; 0x7f
 80029d8:	401a      	ands	r2, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	2390      	movs	r3, #144	; 0x90
 80029de:	0059      	lsls	r1, r3, #1
 80029e0:	0013      	movs	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	18c3      	adds	r3, r0, r3
 80029ea:	185b      	adds	r3, r3, r1
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b08b      	sub	sp, #44	; 0x2c
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	230b      	movs	r3, #11
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	1c0a      	adds	r2, r1, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 8002a0c:	2326      	movs	r3, #38	; 0x26
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2200      	movs	r2, #0
 8002a12:	801a      	strh	r2, [r3, #0]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002a14:	230b      	movs	r3, #11
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	227f      	movs	r2, #127	; 0x7f
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	0013      	movs	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3328      	adds	r3, #40	; 0x28
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	18d3      	adds	r3, r2, r3
 8002a2c:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2201      	movs	r2, #1
 8002a44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8002a46:	230b      	movs	r3, #11
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	227f      	movs	r2, #127	; 0x7f
 8002a4e:	4013      	ands	r3, r2
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	701a      	strb	r2, [r3, #0]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d909      	bls.n	8002a76 <HAL_PCD_EP_Transmit+0x7e>
  {
    len=ep->maxpacket;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	1ad2      	subs	r2, r2, r3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	615a      	str	r2, [r3, #20]
 8002a74:	e005      	b.n	8002a82 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {  
    len=ep->xfer_len;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	7a9b      	ldrb	r3, [r3, #10]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11e      	bne.n	8002ac8 <HAL_PCD_EP_Transmit+0xd0>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	6919      	ldr	r1, [r3, #16]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	889a      	ldrh	r2, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f000 fb5c 	bl	8003156 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2250      	movs	r2, #80	; 0x50
 8002aa4:	5a9b      	ldrh	r3, [r3, r2]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	18d3      	adds	r3, r2, r3
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	18d3      	adds	r3, r2, r3
 8002aba:	4aa4      	ldr	r2, [pc, #656]	; (8002d4c <HAL_PCD_EP_Transmit+0x354>)
 8002abc:	4694      	mov	ip, r2
 8002abe:	4463      	add	r3, ip
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	e11f      	b.n	8002d08 <HAL_PCD_EP_Transmit+0x310>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	001a      	movs	r2, r3
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	18d3      	adds	r3, r2, r3
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	001a      	movs	r2, r3
 8002ada:	2340      	movs	r3, #64	; 0x40
 8002adc:	4013      	ands	r3, r2
 8002ade:	d069      	beq.n	8002bb4 <HAL_PCD_EP_Transmit+0x1bc>
    {
      /*Set the Double buffer counter for pmabuffer1*/
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	785b      	ldrb	r3, [r3, #1]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d147      	bne.n	8002b78 <HAL_PCD_EP_Transmit+0x180>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2250      	movs	r2, #80	; 0x50
 8002aee:	5a9b      	ldrh	r3, [r3, r2]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	001a      	movs	r2, r3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	18d3      	adds	r3, r2, r3
 8002afc:	001a      	movs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	18d3      	adds	r3, r2, r3
 8002b04:	4a92      	ldr	r2, [pc, #584]	; (8002d50 <HAL_PCD_EP_Transmit+0x358>)
 8002b06:	4694      	mov	ip, r2
 8002b08:	4463      	add	r3, ip
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b10:	d91a      	bls.n	8002b48 <HAL_PCD_EP_Transmit+0x150>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	095a      	lsrs	r2, r3, #5
 8002b16:	2324      	movs	r3, #36	; 0x24
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	221f      	movs	r2, #31
 8002b20:	4013      	ands	r3, r2
 8002b22:	d106      	bne.n	8002b32 <HAL_PCD_EP_Transmit+0x13a>
 8002b24:	2324      	movs	r3, #36	; 0x24
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	881a      	ldrh	r2, [r3, #0]
 8002b2a:	2324      	movs	r3, #36	; 0x24
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	3a01      	subs	r2, #1
 8002b30:	801a      	strh	r2, [r3, #0]
 8002b32:	2324      	movs	r3, #36	; 0x24
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4a85      	ldr	r2, [pc, #532]	; (8002d54 <HAL_PCD_EP_Transmit+0x35c>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	e02f      	b.n	8002ba8 <HAL_PCD_EP_Transmit+0x1b0>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	085a      	lsrs	r2, r3, #1
 8002b4c:	2324      	movs	r3, #36	; 0x24
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4013      	ands	r3, r2
 8002b58:	d006      	beq.n	8002b68 <HAL_PCD_EP_Transmit+0x170>
 8002b5a:	2324      	movs	r3, #36	; 0x24
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	881a      	ldrh	r2, [r3, #0]
 8002b60:	2324      	movs	r3, #36	; 0x24
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	3201      	adds	r2, #1
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	2324      	movs	r3, #36	; 0x24
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	029b      	lsls	r3, r3, #10
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	e017      	b.n	8002ba8 <HAL_PCD_EP_Transmit+0x1b0>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d113      	bne.n	8002ba8 <HAL_PCD_EP_Transmit+0x1b0>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2250      	movs	r2, #80	; 0x50
 8002b86:	5a9b      	ldrh	r3, [r3, r2]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	001a      	movs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	18d3      	adds	r3, r2, r3
 8002b9c:	4a6c      	ldr	r2, [pc, #432]	; (8002d50 <HAL_PCD_EP_Transmit+0x358>)
 8002b9e:	4694      	mov	ip, r2
 8002ba0:	4463      	add	r3, ip
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr1;
 8002ba8:	2326      	movs	r3, #38	; 0x26
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	8912      	ldrh	r2, [r2, #8]
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	e068      	b.n	8002c86 <HAL_PCD_EP_Transmit+0x28e>
    }
    else
    {
      /*Set the Double buffer counter for pmabuffer0*/
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d147      	bne.n	8002c4c <HAL_PCD_EP_Transmit+0x254>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2250      	movs	r2, #80	; 0x50
 8002bc2:	5a9b      	ldrh	r3, [r3, r2]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	001a      	movs	r2, r3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	18d3      	adds	r3, r2, r3
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	18d3      	adds	r3, r2, r3
 8002bd8:	4a5c      	ldr	r2, [pc, #368]	; (8002d4c <HAL_PCD_EP_Transmit+0x354>)
 8002bda:	4694      	mov	ip, r2
 8002bdc:	4463      	add	r3, ip
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b3e      	cmp	r3, #62	; 0x3e
 8002be4:	d91a      	bls.n	8002c1c <HAL_PCD_EP_Transmit+0x224>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	095a      	lsrs	r2, r3, #5
 8002bea:	2322      	movs	r3, #34	; 0x22
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	801a      	strh	r2, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	221f      	movs	r2, #31
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d106      	bne.n	8002c06 <HAL_PCD_EP_Transmit+0x20e>
 8002bf8:	2322      	movs	r3, #34	; 0x22
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	881a      	ldrh	r2, [r3, #0]
 8002bfe:	2322      	movs	r3, #34	; 0x22
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	3a01      	subs	r2, #1
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	2322      	movs	r3, #34	; 0x22
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	029b      	lsls	r3, r3, #10
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4a50      	ldr	r2, [pc, #320]	; (8002d54 <HAL_PCD_EP_Transmit+0x35c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	801a      	strh	r2, [r3, #0]
 8002c1a:	e02f      	b.n	8002c7c <HAL_PCD_EP_Transmit+0x284>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	085a      	lsrs	r2, r3, #1
 8002c20:	2322      	movs	r3, #34	; 0x22
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d006      	beq.n	8002c3c <HAL_PCD_EP_Transmit+0x244>
 8002c2e:	2322      	movs	r3, #34	; 0x22
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	881a      	ldrh	r2, [r3, #0]
 8002c34:	2322      	movs	r3, #34	; 0x22
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	3201      	adds	r2, #1
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	2322      	movs	r3, #34	; 0x22
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	029b      	lsls	r3, r3, #10
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	e017      	b.n	8002c7c <HAL_PCD_EP_Transmit+0x284>
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d113      	bne.n	8002c7c <HAL_PCD_EP_Transmit+0x284>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2250      	movs	r2, #80	; 0x50
 8002c5a:	5a9b      	ldrh	r3, [r3, r2]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	001a      	movs	r2, r3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	18d3      	adds	r3, r2, r3
 8002c68:	001a      	movs	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	18d3      	adds	r3, r2, r3
 8002c70:	4a36      	ldr	r2, [pc, #216]	; (8002d4c <HAL_PCD_EP_Transmit+0x354>)
 8002c72:	4694      	mov	ip, r2
 8002c74:	4463      	add	r3, ip
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr0;
 8002c7c:	2326      	movs	r3, #38	; 0x26
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	88d2      	ldrh	r2, [r2, #6]
 8002c84:	801a      	strh	r2, [r3, #0]
    }

    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	6919      	ldr	r1, [r3, #16]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b29c      	uxth	r4, r3
 8002c92:	2326      	movs	r3, #38	; 0x26
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	881a      	ldrh	r2, [r3, #0]
 8002c98:	0023      	movs	r3, r4
 8002c9a:	f000 fa5c 	bl	8003156 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	785b      	ldrb	r3, [r3, #1]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_PCD_EP_Transmit+0x2dc>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	001a      	movs	r2, r3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	18d2      	adds	r2, r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0019      	movs	r1, r3
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	18cb      	adds	r3, r1, r3
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	4924      	ldr	r1, [pc, #144]	; (8002d58 <HAL_PCD_EP_Transmit+0x360>)
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4924      	ldr	r1, [pc, #144]	; (8002d5c <HAL_PCD_EP_Transmit+0x364>)
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	8013      	strh	r3, [r2, #0]
 8002cd2:	e019      	b.n	8002d08 <HAL_PCD_EP_Transmit+0x310>
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	785b      	ldrb	r3, [r3, #1]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d115      	bne.n	8002d08 <HAL_PCD_EP_Transmit+0x310>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	001a      	movs	r2, r3
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	18d2      	adds	r2, r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0019      	movs	r1, r3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	18cb      	adds	r3, r1, r3
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	4917      	ldr	r1, [pc, #92]	; (8002d58 <HAL_PCD_EP_Transmit+0x360>)
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4917      	ldr	r1, [pc, #92]	; (8002d60 <HAL_PCD_EP_Transmit+0x368>)
 8002d02:	430b      	orrs	r3, r1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	8013      	strh	r3, [r2, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	18d3      	adds	r3, r2, r3
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <HAL_PCD_EP_Transmit+0x36c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	b29c      	uxth	r4, r3
 8002d1e:	2310      	movs	r3, #16
 8002d20:	4063      	eors	r3, r4
 8002d22:	b29c      	uxth	r4, r3
 8002d24:	2320      	movs	r3, #32
 8002d26:	4063      	eors	r3, r4
 8002d28:	b29c      	uxth	r4, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	001a      	movs	r2, r3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	18d3      	adds	r3, r2, r3
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <HAL_PCD_EP_Transmit+0x370>)
 8002d3a:	4322      	orrs	r2, r4
 8002d3c:	b292      	uxth	r2, r2
 8002d3e:	801a      	strh	r2, [r3, #0]
     
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b00b      	add	sp, #44	; 0x2c
 8002d48:	bd90      	pop	{r4, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	00000402 	.word	0x00000402
 8002d50:	00000406 	.word	0x00000406
 8002d54:	ffff8000 	.word	0xffff8000
 8002d58:	00000f0f 	.word	0x00000f0f
 8002d5c:	ffff80c0 	.word	0xffff80c0
 8002d60:	ffffc080 	.word	0xffffc080
 8002d64:	ffff8fbf 	.word	0xffff8fbf
 8002d68:	ffff8080 	.word	0xffff8080

08002d6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	000a      	movs	r2, r1
 8002d76:	1cfb      	adds	r3, r7, #3
 8002d78:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	23f4      	movs	r3, #244	; 0xf4
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	5cd3      	ldrb	r3, [r2, r3]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_PCD_EP_SetStall+0x1e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e096      	b.n	8002eb8 <HAL_PCD_EP_SetStall+0x14c>
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	23f4      	movs	r3, #244	; 0xf4
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2101      	movs	r1, #1
 8002d92:	54d1      	strb	r1, [r2, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8002d94:	1cfb      	adds	r3, r7, #3
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b25b      	sxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	da0c      	bge.n	8002db8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002d9e:	1cfb      	adds	r3, r7, #3
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	227f      	movs	r2, #127	; 0x7f
 8002da4:	401a      	ands	r2, r3
 8002da6:	0013      	movs	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	3328      	adds	r3, #40	; 0x28
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	18d3      	adds	r3, r2, r3
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e00a      	b.n	8002dce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002db8:	1cfb      	adds	r3, r7, #3
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	0013      	movs	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	3309      	adds	r3, #9
 8002dc6:	33ff      	adds	r3, #255	; 0xff
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002dd4:	1cfb      	adds	r3, r7, #3
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	227f      	movs	r2, #127	; 0x7f
 8002dda:	4013      	ands	r3, r2
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002de2:	1cfb      	adds	r3, r7, #3
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	09db      	lsrs	r3, r3, #7
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	001a      	movs	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d11f      	bne.n	8002e3c <HAL_PCD_EP_SetStall+0xd0>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	001a      	movs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	18d3      	adds	r3, r2, r3
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <HAL_PCD_EP_SetStall+0x154>)
 8002e10:	401a      	ands	r2, r3
 8002e12:	0014      	movs	r4, r2
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	015b      	lsls	r3, r3, #5
 8002e18:	4063      	eors	r3, r4
 8002e1a:	001c      	movs	r4, r3
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	4063      	eors	r3, r4
 8002e20:	001c      	movs	r4, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	001a      	movs	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	18d3      	adds	r3, r2, r3
 8002e30:	b2a2      	uxth	r2, r4
 8002e32:	4924      	ldr	r1, [pc, #144]	; (8002ec4 <HAL_PCD_EP_SetStall+0x158>)
 8002e34:	430a      	orrs	r2, r1
 8002e36:	b292      	uxth	r2, r2
 8002e38:	801a      	strh	r2, [r3, #0]
 8002e3a:	e037      	b.n	8002eac <HAL_PCD_EP_SetStall+0x140>
  }
  else
  {
    if (ep->is_in)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	785b      	ldrb	r3, [r3, #1]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d019      	beq.n	8002e78 <HAL_PCD_EP_SetStall+0x10c>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	001a      	movs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	18d3      	adds	r3, r2, r3
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <HAL_PCD_EP_SetStall+0x15c>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	b29c      	uxth	r4, r3
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	4063      	eors	r3, r4
 8002e5e:	b29c      	uxth	r4, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	001a      	movs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	18d3      	adds	r3, r2, r3
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <HAL_PCD_EP_SetStall+0x158>)
 8002e70:	4322      	orrs	r2, r4
 8002e72:	b292      	uxth	r2, r2
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	e019      	b.n	8002eac <HAL_PCD_EP_SetStall+0x140>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	18d3      	adds	r3, r2, r3
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_PCD_EP_SetStall+0x160>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b29c      	uxth	r4, r3
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	015b      	lsls	r3, r3, #5
 8002e92:	4063      	eors	r3, r4
 8002e94:	b29c      	uxth	r4, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	18d3      	adds	r3, r2, r3
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_PCD_EP_SetStall+0x158>)
 8002ea6:	4322      	orrs	r2, r4
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	801a      	strh	r2, [r3, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	23f4      	movs	r3, #244	; 0xf4
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	54d1      	strb	r1, [r2, r3]
  
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b005      	add	sp, #20
 8002ebe:	bd90      	pop	{r4, r7, pc}
 8002ec0:	0000bfbf 	.word	0x0000bfbf
 8002ec4:	ffff8080 	.word	0xffff8080
 8002ec8:	ffff8fbf 	.word	0xffff8fbf
 8002ecc:	ffffbf8f 	.word	0xffffbf8f

08002ed0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	000a      	movs	r2, r1
 8002eda:	1cfb      	adds	r3, r7, #3
 8002edc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8002ede:	1cfb      	adds	r3, r7, #3
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	da0c      	bge.n	8002f02 <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8002ee8:	1cfb      	adds	r3, r7, #3
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	227f      	movs	r2, #127	; 0x7f
 8002eee:	401a      	ands	r2, r3
 8002ef0:	0013      	movs	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	3328      	adds	r3, #40	; 0x28
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	18d3      	adds	r3, r2, r3
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e00a      	b.n	8002f18 <HAL_PCD_EP_ClrStall+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f02:	1cfb      	adds	r3, r7, #3
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	0013      	movs	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	3309      	adds	r3, #9
 8002f10:	33ff      	adds	r3, #255	; 0xff
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	18d3      	adds	r3, r2, r3
 8002f16:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002f1e:	1cfb      	adds	r3, r7, #3
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	227f      	movs	r2, #127	; 0x7f
 8002f24:	4013      	ands	r3, r2
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002f2c:	1cfb      	adds	r3, r7, #3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	09db      	lsrs	r3, r3, #7
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	001a      	movs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	23f4      	movs	r3, #244	; 0xf4
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_PCD_EP_ClrStall+0x7e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e08e      	b.n	800306c <HAL_PCD_EP_ClrStall+0x19c>
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	23f4      	movs	r3, #244	; 0xf4
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	2101      	movs	r1, #1
 8002f56:	54d1      	strb	r1, [r2, r3]
  
  if (ep->is_in)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	785b      	ldrb	r3, [r3, #1]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d03e      	beq.n	8002fde <HAL_PCD_EP_ClrStall+0x10e>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	001a      	movs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	18d3      	adds	r3, r2, r3
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	001a      	movs	r2, r3
 8002f72:	2340      	movs	r3, #64	; 0x40
 8002f74:	4013      	ands	r3, r2
 8002f76:	d015      	beq.n	8002fa4 <HAL_PCD_EP_ClrStall+0xd4>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	18d2      	adds	r2, r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	18cb      	adds	r3, r1, r3
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	4937      	ldr	r1, [pc, #220]	; (8003074 <HAL_PCD_EP_ClrStall+0x1a4>)
 8002f98:	400b      	ands	r3, r1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	4936      	ldr	r1, [pc, #216]	; (8003078 <HAL_PCD_EP_ClrStall+0x1a8>)
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	18d3      	adds	r3, r2, r3
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	4a31      	ldr	r2, [pc, #196]	; (800307c <HAL_PCD_EP_ClrStall+0x1ac>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	b29c      	uxth	r4, r3
 8002fba:	2310      	movs	r3, #16
 8002fbc:	4063      	eors	r3, r4
 8002fbe:	b29c      	uxth	r4, r3
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	4063      	eors	r3, r4
 8002fc4:	b29c      	uxth	r4, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	001a      	movs	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	18d3      	adds	r3, r2, r3
 8002fd4:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <HAL_PCD_EP_ClrStall+0x1b0>)
 8002fd6:	4322      	orrs	r2, r4
 8002fd8:	b292      	uxth	r2, r2
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	e040      	b.n	8003060 <HAL_PCD_EP_ClrStall+0x190>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	18d3      	adds	r3, r2, r3
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	001a      	movs	r2, r3
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	01db      	lsls	r3, r3, #7
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d015      	beq.n	8003024 <HAL_PCD_EP_ClrStall+0x154>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	18d2      	adds	r2, r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0019      	movs	r1, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	18cb      	adds	r3, r1, r3
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	4917      	ldr	r1, [pc, #92]	; (8003074 <HAL_PCD_EP_ClrStall+0x1a4>)
 8003018:	400b      	ands	r3, r1
 800301a:	b29b      	uxth	r3, r3
 800301c:	4919      	ldr	r1, [pc, #100]	; (8003084 <HAL_PCD_EP_ClrStall+0x1b4>)
 800301e:	430b      	orrs	r3, r1
 8003020:	b29b      	uxth	r3, r3
 8003022:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	001a      	movs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	18d3      	adds	r3, r2, r3
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	4a14      	ldr	r2, [pc, #80]	; (8003088 <HAL_PCD_EP_ClrStall+0x1b8>)
 8003036:	4013      	ands	r3, r2
 8003038:	b29c      	uxth	r4, r3
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	015b      	lsls	r3, r3, #5
 800303e:	4063      	eors	r3, r4
 8003040:	b29c      	uxth	r4, r3
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	4063      	eors	r3, r4
 8003048:	b29c      	uxth	r4, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	001a      	movs	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	18d3      	adds	r3, r2, r3
 8003058:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_PCD_EP_ClrStall+0x1b0>)
 800305a:	4322      	orrs	r2, r4
 800305c:	b292      	uxth	r2, r2
 800305e:	801a      	strh	r2, [r3, #0]
  }
  __HAL_UNLOCK(hpcd); 
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	23f4      	movs	r3, #244	; 0xf4
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	2100      	movs	r1, #0
 8003068:	54d1      	strb	r1, [r2, r3]
    
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b005      	add	sp, #20
 8003072:	bd90      	pop	{r4, r7, pc}
 8003074:	00000f0f 	.word	0x00000f0f
 8003078:	ffff80c0 	.word	0xffff80c0
 800307c:	ffff8fbf 	.word	0xffff8fbf
 8003080:	ffff8080 	.word	0xffff8080
 8003084:	ffffc080 	.word	0xffffc080
 8003088:	ffffbf8f 	.word	0xffffbf8f

0800308c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{ 
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	000a      	movs	r2, r1
 8003096:	1cfb      	adds	r3, r7, #3
 8003098:	701a      	strb	r2, [r3, #0]
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  HAL_PCD_ActivateRemoteWakeup : active remote wakeup signalling
* @param  hpcd PCD handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if (hpcd->Init.lpm_enable ==1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10c      	bne.n	80030ce <HAL_PCD_ActivateRemoteWakeup+0x2a>
  {
    /* Apply L1 Resume */
    hpcd->Instance->CNTR |= USB_CNTR_L1RESUME;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2140      	movs	r1, #64	; 0x40
 80030be:	5a5b      	ldrh	r3, [r3, r1]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2120      	movs	r1, #32
 80030c4:	430b      	orrs	r3, r1
 80030c6:	b299      	uxth	r1, r3
 80030c8:	2340      	movs	r3, #64	; 0x40
 80030ca:	52d1      	strh	r1, [r2, r3]
 80030cc:	e00b      	b.n	80030e6 <HAL_PCD_ActivateRemoteWakeup+0x42>
  }
  else
  {
    /* Apply L2 Resume */
    hpcd->Instance->CNTR |= USB_CNTR_RESUME;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2140      	movs	r1, #64	; 0x40
 80030d8:	5a5b      	ldrh	r3, [r3, r1]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2110      	movs	r1, #16
 80030de:	430b      	orrs	r3, r1
 80030e0:	b299      	uxth	r1, r3
 80030e2:	2340      	movs	r3, #64	; 0x40
 80030e4:	52d1      	strh	r1, [r2, r3]
  }
  
  return (HAL_OK);
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_PCD_DeActivateRemoteWakeup>:
* @brief  HAL_PCD_DeActivateRemoteWakeup : de-active remote wakeup signalling
* @param  hpcd PCD handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if (hpcd->Init.lpm_enable ==1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10c      	bne.n	800311a <HAL_PCD_DeActivateRemoteWakeup+0x2a>
  {
    /* Release L1 Resume */
    hpcd->Instance->CNTR &= ((uint16_t)(~ USB_CNTR_L1RESUME));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2140      	movs	r1, #64	; 0x40
 800310a:	5a5b      	ldrh	r3, [r3, r1]
 800310c:	b29b      	uxth	r3, r3
 800310e:	2120      	movs	r1, #32
 8003110:	438b      	bics	r3, r1
 8003112:	b299      	uxth	r1, r3
 8003114:	2340      	movs	r3, #64	; 0x40
 8003116:	52d1      	strh	r1, [r2, r3]
 8003118:	e00b      	b.n	8003132 <HAL_PCD_DeActivateRemoteWakeup+0x42>
  }
  else
  {
    /* Release L2 Resume */
    hpcd->Instance->CNTR &= ((uint16_t)(~ USB_CNTR_RESUME)) ;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2140      	movs	r1, #64	; 0x40
 8003124:	5a5b      	ldrh	r3, [r3, r1]
 8003126:	b29b      	uxth	r3, r3
 8003128:	2110      	movs	r1, #16
 800312a:	438b      	bics	r3, r1
 800312c:	b299      	uxth	r1, r3
 800312e:	2340      	movs	r3, #64	; 0x40
 8003130:	52d1      	strh	r1, [r2, r3]
  }
  
  return (HAL_OK);
 8003132:	2300      	movs	r3, #0
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_PCD_GetState>:
  * @brief  Return the PCD state
  * @param  hpcd PCD handle
  * @retval HAL state
  */
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return hpcd->State;
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	23ea      	movs	r3, #234	; 0xea
 8003148:	33ff      	adds	r3, #255	; 0xff
 800314a:	5cd3      	ldrb	r3, [r2, r3]
 800314c:	b2db      	uxtb	r3, r3
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b002      	add	sp, #8
 8003154:	bd80      	pop	{r7, pc}

08003156 <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b088      	sub	sp, #32
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	0019      	movs	r1, r3
 8003162:	1dbb      	adds	r3, r7, #6
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	1d3b      	adds	r3, r7, #4
 8003168:	1c0a      	adds	r2, r1, #0
 800316a:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	3301      	adds	r3, #1
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8003176:	1dbb      	adds	r3, r7, #6
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	00d2      	lsls	r2, r2, #3
 8003182:	4694      	mov	ip, r2
 8003184:	4463      	add	r3, ip
 8003186:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0; i--)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	e020      	b.n	80031d0 <PCD_WritePMA+0x7a>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	2312      	movs	r3, #18
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	3301      	adds	r3, #1
 800319c:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	b299      	uxth	r1, r3
 80031a8:	2310      	movs	r3, #16
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	2212      	movs	r2, #18
 80031ae:	18ba      	adds	r2, r7, r2
 80031b0:	8812      	ldrh	r2, [r2, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	61ba      	str	r2, [r7, #24]
 80031bc:	2210      	movs	r2, #16
 80031be:	18ba      	adds	r2, r7, r2
 80031c0:	8812      	ldrh	r2, [r2, #0]
 80031c2:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1db      	bne.n	800318e <PCD_WritePMA+0x38>
  }
}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	b008      	add	sp, #32
 80031dc:	bd80      	pop	{r7, pc}

080031de <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b088      	sub	sp, #32
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	0019      	movs	r1, r3
 80031ea:	1dbb      	adds	r3, r7, #6
 80031ec:	801a      	strh	r2, [r3, #0]
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	1c0a      	adds	r2, r1, #0
 80031f2:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80031fe:	1dbb      	adds	r3, r7, #6
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	18d3      	adds	r3, r2, r3
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	00d2      	lsls	r2, r2, #3
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0U; i--)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	e014      	b.n	8003240 <PCD_ReadPMA+0x62>
  {
    temp = *pdwVal++;
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	1c9a      	adds	r2, r3, #2
 800321a:	61ba      	str	r2, [r7, #24]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	60ba      	str	r2, [r7, #8]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	60ba      	str	r2, [r7, #8]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	0a12      	lsrs	r2, r2, #8
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b01      	subs	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e7      	bne.n	8003216 <PCD_ReadPMA+0x38>
  }
  
  if (wNBytes % 2)
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	2201      	movs	r2, #1
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <PCD_ReadPMA+0x8c>
  {
    temp = *pdwVal++;
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	1c9a      	adds	r2, r3, #2
 8003258:	61ba      	str	r2, [r7, #24]
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	60ba      	str	r2, [r7, #8]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]
  }
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	b008      	add	sp, #32
 8003270:	bd80      	pop	{r7, pc}

08003272 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003272:	b590      	push	{r4, r7, lr}
 8003274:	b089      	sub	sp, #36	; 0x24
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 800327a:	231e      	movs	r3, #30
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2200      	movs	r2, #0
 8003280:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8003282:	230c      	movs	r3, #12
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2200      	movs	r2, #0
 8003288:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 800328a:	e34a      	b.n	8003922 <PCD_EP_ISR_Handler+0x6b0>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800328c:	230e      	movs	r3, #14
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	b2da      	uxtb	r2, r3
 8003296:	231b      	movs	r3, #27
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	210f      	movs	r1, #15
 800329c:	400a      	ands	r2, r1
 800329e:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0U)
 80032a0:	231b      	movs	r3, #27
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d000      	beq.n	80032ac <PCD_EP_ISR_Handler+0x3a>
 80032aa:	e139      	b.n	8003520 <PCD_EP_ISR_Handler+0x2ae>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032ac:	230e      	movs	r3, #14
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	001a      	movs	r2, r3
 80032b6:	2310      	movs	r3, #16
 80032b8:	4013      	ands	r3, r2
 80032ba:	d14c      	bne.n	8003356 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	4ac6      	ldr	r2, [pc, #792]	; (80035e4 <PCD_EP_ISR_Handler+0x372>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	800b      	strh	r3, [r1, #0]
        ep = &hpcd->IN_ep[0];
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3328      	adds	r3, #40	; 0x28
 80032d4:	617b      	str	r3, [r7, #20]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2250      	movs	r2, #80	; 0x50
 80032dc:	5a9b      	ldrh	r3, [r3, r2]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	001a      	movs	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	18d3      	adds	r3, r2, r3
 80032ea:	001a      	movs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	18d3      	adds	r3, r2, r3
 80032f2:	4abd      	ldr	r2, [pc, #756]	; (80035e8 <PCD_EP_ISR_Handler+0x376>)
 80032f4:	4694      	mov	ip, r2
 80032f6:	4463      	add	r3, ip
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	059b      	lsls	r3, r3, #22
 80032fc:	0d9a      	lsrs	r2, r3, #22
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	18d2      	adds	r2, r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2100      	movs	r1, #0
 8003314:	0018      	movs	r0, r3
 8003316:	f00b fef1 	bl	800f0fc <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2224      	movs	r2, #36	; 0x24
 800331e:	5c9b      	ldrb	r3, [r3, r2]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d100      	bne.n	8003328 <PCD_EP_ISR_Handler+0xb6>
 8003326:	e2fc      	b.n	8003922 <PCD_EP_ISR_Handler+0x6b0>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d000      	beq.n	8003332 <PCD_EP_ISR_Handler+0xc0>
 8003330:	e2f7      	b.n	8003922 <PCD_EP_ISR_Handler+0x6b0>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	2124      	movs	r1, #36	; 0x24
 800333a:	5c52      	ldrb	r2, [r2, r1]
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	2180      	movs	r1, #128	; 0x80
 8003340:	4249      	negs	r1, r1
 8003342:	430a      	orrs	r2, r1
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	b291      	uxth	r1, r2
 8003348:	224c      	movs	r2, #76	; 0x4c
 800334a:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	2100      	movs	r1, #0
 8003352:	5499      	strb	r1, [r3, r2]
 8003354:	e2e5      	b.n	8003922 <PCD_EP_ISR_Handler+0x6b0>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3309      	adds	r3, #9
 800335a:	33ff      	adds	r3, #255	; 0xff
 800335c:	617b      	str	r3, [r7, #20]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	881a      	ldrh	r2, [r3, #0]
 8003364:	230c      	movs	r3, #12
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800336a:	230c      	movs	r3, #12
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	b29b      	uxth	r3, r3
 8003372:	001a      	movs	r2, r3
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	4013      	ands	r3, r2
 800337a:	d031      	beq.n	80033e0 <PCD_EP_ISR_Handler+0x16e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2250      	movs	r2, #80	; 0x50
 8003382:	5a9b      	ldrh	r3, [r3, r2]
 8003384:	b29b      	uxth	r3, r3
 8003386:	001a      	movs	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	18d3      	adds	r3, r2, r3
 8003390:	001a      	movs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	18d3      	adds	r3, r2, r3
 8003398:	4a94      	ldr	r2, [pc, #592]	; (80035ec <PCD_EP_ISR_Handler+0x37a>)
 800339a:	4694      	mov	ip, r2
 800339c:	4463      	add	r3, ip
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	059b      	lsls	r3, r3, #22
 80033a2:	0d9a      	lsrs	r2, r3, #22
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	33ed      	adds	r3, #237	; 0xed
 80033b0:	33ff      	adds	r3, #255	; 0xff
 80033b2:	0019      	movs	r1, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	889a      	ldrh	r2, [r3, #4]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f7ff ff0e 	bl	80031de <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	4a88      	ldr	r2, [pc, #544]	; (80035f0 <PCD_EP_ISR_Handler+0x37e>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	800b      	strh	r3, [r1, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0018      	movs	r0, r3
 80033da:	f00b fe5b 	bl	800f094 <HAL_PCD_SetupStageCallback>
 80033de:	e2a0      	b.n	8003922 <PCD_EP_ISR_Handler+0x6b0>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033e0:	230c      	movs	r3, #12
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db00      	blt.n	80033f0 <PCD_EP_ISR_Handler+0x17e>
 80033ee:	e298      	b.n	8003922 <PCD_EP_ISR_Handler+0x6b0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	4a7c      	ldr	r2, [pc, #496]	; (80035f0 <PCD_EP_ISR_Handler+0x37e>)
 80033fe:	4013      	ands	r3, r2
 8003400:	b29b      	uxth	r3, r3
 8003402:	800b      	strh	r3, [r1, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2250      	movs	r2, #80	; 0x50
 800340a:	5a9b      	ldrh	r3, [r3, r2]
 800340c:	b29b      	uxth	r3, r3
 800340e:	001a      	movs	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	18d3      	adds	r3, r2, r3
 8003418:	001a      	movs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	18d3      	adds	r3, r2, r3
 8003420:	4a72      	ldr	r2, [pc, #456]	; (80035ec <PCD_EP_ISR_Handler+0x37a>)
 8003422:	4694      	mov	ip, r2
 8003424:	4463      	add	r3, ip
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	059b      	lsls	r3, r3, #22
 800342a:	0d9a      	lsrs	r2, r3, #22
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d011      	beq.n	800345c <PCD_EP_ISR_Handler+0x1ea>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	6919      	ldr	r1, [r3, #16]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	889a      	ldrh	r2, [r3, #4]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f7ff fec8 	bl	80031de <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	18d2      	adds	r2, r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2100      	movs	r1, #0
 8003460:	0018      	movs	r0, r3
 8003462:	f00b fe2a 	bl	800f0ba <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2250      	movs	r2, #80	; 0x50
 800346c:	5a9b      	ldrh	r3, [r3, r2]
 800346e:	b29b      	uxth	r3, r3
 8003470:	001a      	movs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	18d3      	adds	r3, r2, r3
 8003478:	4a5c      	ldr	r2, [pc, #368]	; (80035ec <PCD_EP_ISR_Handler+0x37a>)
 800347a:	4694      	mov	ip, r2
 800347c:	4463      	add	r3, ip
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b3e      	cmp	r3, #62	; 0x3e
 8003486:	d91c      	bls.n	80034c2 <PCD_EP_ISR_Handler+0x250>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	095a      	lsrs	r2, r3, #5
 800348e:	231c      	movs	r3, #28
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	801a      	strh	r2, [r3, #0]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	221f      	movs	r2, #31
 800349a:	4013      	ands	r3, r2
 800349c:	d106      	bne.n	80034ac <PCD_EP_ISR_Handler+0x23a>
 800349e:	231c      	movs	r3, #28
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	231c      	movs	r3, #28
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	3a01      	subs	r2, #1
 80034aa:	801a      	strh	r2, [r3, #0]
 80034ac:	231c      	movs	r3, #28
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	029b      	lsls	r3, r3, #10
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	4a4f      	ldr	r2, [pc, #316]	; (80035f4 <PCD_EP_ISR_Handler+0x382>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	e018      	b.n	80034f4 <PCD_EP_ISR_Handler+0x282>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	085a      	lsrs	r2, r3, #1
 80034c8:	231c      	movs	r3, #28
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	801a      	strh	r2, [r3, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	d006      	beq.n	80034e6 <PCD_EP_ISR_Handler+0x274>
 80034d8:	231c      	movs	r3, #28
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	231c      	movs	r3, #28
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	3201      	adds	r2, #1
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	231c      	movs	r3, #28
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	029b      	lsls	r3, r3, #10
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	4a3f      	ldr	r2, [pc, #252]	; (80035f8 <PCD_EP_ISR_Handler+0x386>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	b29c      	uxth	r4, r3
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	015b      	lsls	r3, r3, #5
 8003504:	4063      	eors	r3, r4
 8003506:	b29c      	uxth	r4, r3
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	019b      	lsls	r3, r3, #6
 800350c:	4063      	eors	r3, r4
 800350e:	b29c      	uxth	r4, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	001a      	movs	r2, r3
 8003516:	4b39      	ldr	r3, [pc, #228]	; (80035fc <PCD_EP_ISR_Handler+0x38a>)
 8003518:	4323      	orrs	r3, r4
 800351a:	b29b      	uxth	r3, r3
 800351c:	8013      	strh	r3, [r2, #0]
 800351e:	e200      	b.n	8003922 <PCD_EP_ISR_Handler+0x6b0>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	001a      	movs	r2, r3
 8003526:	231b      	movs	r3, #27
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	18d3      	adds	r3, r2, r3
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	230c      	movs	r3, #12
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003538:	230c      	movs	r3, #12
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	b21b      	sxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	db00      	blt.n	8003548 <PCD_EP_ISR_Handler+0x2d6>
 8003546:	e0f9      	b.n	800373c <PCD_EP_ISR_Handler+0x4ca>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	001a      	movs	r2, r3
 800354e:	231b      	movs	r3, #27
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	18d2      	adds	r2, r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0019      	movs	r1, r3
 800355e:	231b      	movs	r3, #27
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	18cb      	adds	r3, r1, r3
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	4921      	ldr	r1, [pc, #132]	; (80035f0 <PCD_EP_ISR_Handler+0x37e>)
 800356c:	400b      	ands	r3, r1
 800356e:	b29b      	uxth	r3, r3
 8003570:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[EPindex];
 8003572:	231b      	movs	r3, #27
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781a      	ldrb	r2, [r3, #0]
 8003578:	0013      	movs	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3309      	adds	r3, #9
 8003582:	33ff      	adds	r3, #255	; 0xff
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	18d3      	adds	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	7a9b      	ldrb	r3, [r3, #10]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d136      	bne.n	8003600 <PCD_EP_ISR_Handler+0x38e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2250      	movs	r2, #80	; 0x50
 8003598:	5a9b      	ldrh	r3, [r3, r2]
 800359a:	b29b      	uxth	r3, r3
 800359c:	001a      	movs	r2, r3
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	001a      	movs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	18d3      	adds	r3, r2, r3
 80035ae:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <PCD_EP_ISR_Handler+0x37a>)
 80035b0:	4694      	mov	ip, r2
 80035b2:	4463      	add	r3, ip
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	231e      	movs	r3, #30
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	0592      	lsls	r2, r2, #22
 80035bc:	0d92      	lsrs	r2, r2, #22
 80035be:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 80035c0:	231e      	movs	r3, #30
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d100      	bne.n	80035cc <PCD_EP_ISR_Handler+0x35a>
 80035ca:	e08b      	b.n	80036e4 <PCD_EP_ISR_Handler+0x472>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	6919      	ldr	r1, [r3, #16]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	889a      	ldrh	r2, [r3, #4]
 80035d8:	231e      	movs	r3, #30
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	f7ff fdfe 	bl	80031de <PCD_ReadPMA>
 80035e2:	e07f      	b.n	80036e4 <PCD_EP_ISR_Handler+0x472>
 80035e4:	ffff8f0f 	.word	0xffff8f0f
 80035e8:	00000402 	.word	0x00000402
 80035ec:	00000406 	.word	0x00000406
 80035f0:	00000f8f 	.word	0x00000f8f
 80035f4:	ffff8000 	.word	0xffff8000
 80035f8:	ffffbf8f 	.word	0xffffbf8f
 80035fc:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	001a      	movs	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	18d3      	adds	r3, r2, r3
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	001a      	movs	r2, r3
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	01db      	lsls	r3, r3, #7
 8003616:	4013      	ands	r3, r2
 8003618:	d027      	beq.n	800366a <PCD_EP_ISR_Handler+0x3f8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2250      	movs	r2, #80	; 0x50
 8003620:	5a9b      	ldrh	r3, [r3, r2]
 8003622:	b29b      	uxth	r3, r3
 8003624:	001a      	movs	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	18d3      	adds	r3, r2, r3
 800362e:	001a      	movs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	4ac4      	ldr	r2, [pc, #784]	; (8003948 <PCD_EP_ISR_Handler+0x6d6>)
 8003638:	4694      	mov	ip, r2
 800363a:	4463      	add	r3, ip
 800363c:	881a      	ldrh	r2, [r3, #0]
 800363e:	231e      	movs	r3, #30
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	0592      	lsls	r2, r2, #22
 8003644:	0d92      	lsrs	r2, r2, #22
 8003646:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8003648:	231e      	movs	r3, #30
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d032      	beq.n	80036b8 <PCD_EP_ISR_Handler+0x446>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	6919      	ldr	r1, [r3, #16]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	88da      	ldrh	r2, [r3, #6]
 800365e:	231e      	movs	r3, #30
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	f7ff fdbb 	bl	80031de <PCD_ReadPMA>
 8003668:	e026      	b.n	80036b8 <PCD_EP_ISR_Handler+0x446>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2250      	movs	r2, #80	; 0x50
 8003670:	5a9b      	ldrh	r3, [r3, r2]
 8003672:	b29b      	uxth	r3, r3
 8003674:	001a      	movs	r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	18d3      	adds	r3, r2, r3
 800367e:	001a      	movs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	18d3      	adds	r3, r2, r3
 8003686:	4ab1      	ldr	r2, [pc, #708]	; (800394c <PCD_EP_ISR_Handler+0x6da>)
 8003688:	4694      	mov	ip, r2
 800368a:	4463      	add	r3, ip
 800368c:	881a      	ldrh	r2, [r3, #0]
 800368e:	231e      	movs	r3, #30
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	0592      	lsls	r2, r2, #22
 8003694:	0d92      	lsrs	r2, r2, #22
 8003696:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8003698:	231e      	movs	r3, #30
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <PCD_EP_ISR_Handler+0x446>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	6919      	ldr	r1, [r3, #16]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	891a      	ldrh	r2, [r3, #8]
 80036ae:	231e      	movs	r3, #30
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	f7ff fd93 	bl	80031de <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	001a      	movs	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	18d2      	adds	r2, r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	0019      	movs	r1, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	18cb      	adds	r3, r1, r3
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	499e      	ldr	r1, [pc, #632]	; (8003950 <PCD_EP_ISR_Handler+0x6de>)
 80036d8:	400b      	ands	r3, r1
 80036da:	b29b      	uxth	r3, r3
 80036dc:	499d      	ldr	r1, [pc, #628]	; (8003954 <PCD_EP_ISR_Handler+0x6e2>)
 80036de:	430b      	orrs	r3, r1
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	231e      	movs	r3, #30
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	18d2      	adds	r2, r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	231e      	movs	r3, #30
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	18d2      	adds	r2, r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <PCD_EP_ISR_Handler+0x4a8>
 800370c:	231e      	movs	r3, #30
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	881a      	ldrh	r2, [r3, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	429a      	cmp	r2, r3
 8003718:	d207      	bcs.n	800372a <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0011      	movs	r1, r2
 8003722:	0018      	movs	r0, r3
 8003724:	f00b fcc9 	bl	800f0ba <HAL_PCD_DataOutStageCallback>
 8003728:	e008      	b.n	800373c <PCD_EP_ISR_Handler+0x4ca>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	7819      	ldrb	r1, [r3, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fe ffc0 	bl	80026bc <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800373c:	230c      	movs	r3, #12
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29b      	uxth	r3, r3
 8003744:	001a      	movs	r2, r3
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	4013      	ands	r3, r2
 800374a:	d100      	bne.n	800374e <PCD_EP_ISR_Handler+0x4dc>
 800374c:	e0e9      	b.n	8003922 <PCD_EP_ISR_Handler+0x6b0>
      {
        ep = &hpcd->IN_ep[EPindex];
 800374e:	231b      	movs	r3, #27
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	0013      	movs	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3328      	adds	r3, #40	; 0x28
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	18d3      	adds	r3, r2, r3
 8003762:	617b      	str	r3, [r7, #20]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	001a      	movs	r2, r3
 800376a:	231b      	movs	r3, #27
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	18d2      	adds	r2, r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	0019      	movs	r1, r3
 800377a:	231b      	movs	r3, #27
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	18cb      	adds	r3, r1, r3
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	4974      	ldr	r1, [pc, #464]	; (8003958 <PCD_EP_ISR_Handler+0x6e6>)
 8003788:	400b      	ands	r3, r1
 800378a:	b29b      	uxth	r3, r3
 800378c:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	7a9b      	ldrb	r3, [r3, #10]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d126      	bne.n	80037e4 <PCD_EP_ISR_Handler+0x572>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2250      	movs	r2, #80	; 0x50
 800379c:	5a9b      	ldrh	r3, [r3, r2]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	001a      	movs	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	18d3      	adds	r3, r2, r3
 80037aa:	001a      	movs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	18d3      	adds	r3, r2, r3
 80037b2:	4a65      	ldr	r2, [pc, #404]	; (8003948 <PCD_EP_ISR_Handler+0x6d6>)
 80037b4:	4694      	mov	ip, r2
 80037b6:	4463      	add	r3, ip
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	059b      	lsls	r3, r3, #22
 80037bc:	0d9a      	lsrs	r2, r3, #22
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d100      	bne.n	80037cc <PCD_EP_ISR_Handler+0x55a>
 80037ca:	e078      	b.n	80038be <PCD_EP_ISR_Handler+0x64c>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	6919      	ldr	r1, [r3, #16]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	889a      	ldrh	r2, [r3, #4]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	b29b      	uxth	r3, r3
 80037de:	f7ff fcba 	bl	8003156 <PCD_WritePMA>
 80037e2:	e06c      	b.n	80038be <PCD_EP_ISR_Handler+0x64c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	001a      	movs	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	18d3      	adds	r3, r2, r3
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	001a      	movs	r2, r3
 80037f6:	2340      	movs	r3, #64	; 0x40
 80037f8:	4013      	ands	r3, r2
 80037fa:	d025      	beq.n	8003848 <PCD_EP_ISR_Handler+0x5d6>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2250      	movs	r2, #80	; 0x50
 8003802:	5a9b      	ldrh	r3, [r3, r2]
 8003804:	b29b      	uxth	r3, r3
 8003806:	001a      	movs	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	18d3      	adds	r3, r2, r3
 8003810:	001a      	movs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	18d3      	adds	r3, r2, r3
 8003818:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <PCD_EP_ISR_Handler+0x6d6>)
 800381a:	4694      	mov	ip, r2
 800381c:	4463      	add	r3, ip
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	059b      	lsls	r3, r3, #22
 8003822:	0d9a      	lsrs	r2, r3, #22
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d030      	beq.n	8003892 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	6919      	ldr	r1, [r3, #16]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	88da      	ldrh	r2, [r3, #6]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	b29b      	uxth	r3, r3
 8003842:	f7ff fc88 	bl	8003156 <PCD_WritePMA>
 8003846:	e024      	b.n	8003892 <PCD_EP_ISR_Handler+0x620>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2250      	movs	r2, #80	; 0x50
 800384e:	5a9b      	ldrh	r3, [r3, r2]
 8003850:	b29b      	uxth	r3, r3
 8003852:	001a      	movs	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	18d3      	adds	r3, r2, r3
 800385c:	001a      	movs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	18d3      	adds	r3, r2, r3
 8003864:	4a39      	ldr	r2, [pc, #228]	; (800394c <PCD_EP_ISR_Handler+0x6da>)
 8003866:	4694      	mov	ip, r2
 8003868:	4463      	add	r3, ip
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	059b      	lsls	r3, r3, #22
 800386e:	0d9a      	lsrs	r2, r3, #22
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <PCD_EP_ISR_Handler+0x620>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	6919      	ldr	r1, [r3, #16]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	891a      	ldrh	r2, [r3, #8]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	b29b      	uxth	r3, r3
 800388e:	f7ff fc62 	bl	8003156 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	001a      	movs	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	18d2      	adds	r2, r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0019      	movs	r1, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	18cb      	adds	r3, r1, r3
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	4927      	ldr	r1, [pc, #156]	; (8003950 <PCD_EP_ISR_Handler+0x6de>)
 80038b2:	400b      	ands	r3, r1
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	4929      	ldr	r1, [pc, #164]	; (800395c <PCD_EP_ISR_Handler+0x6ea>)
 80038b8:	430b      	orrs	r3, r1
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2250      	movs	r2, #80	; 0x50
 80038c4:	5a9b      	ldrh	r3, [r3, r2]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	001a      	movs	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	18d3      	adds	r3, r2, r3
 80038d2:	001a      	movs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	18d3      	adds	r3, r2, r3
 80038da:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <PCD_EP_ISR_Handler+0x6d6>)
 80038dc:	4694      	mov	ip, r2
 80038de:	4463      	add	r3, ip
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	059b      	lsls	r3, r3, #22
 80038e4:	0d9a      	lsrs	r2, r3, #22
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	18d2      	adds	r2, r2, r3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <PCD_EP_ISR_Handler+0x69e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0011      	movs	r1, r2
 8003908:	0018      	movs	r0, r3
 800390a:	f00b fbf7 	bl	800f0fc <HAL_PCD_DataInStageCallback>
 800390e:	e008      	b.n	8003922 <PCD_EP_ISR_Handler+0x6b0>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	7819      	ldrb	r1, [r3, #0]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff f86b 	bl	80029f8 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2244      	movs	r2, #68	; 0x44
 8003928:	5a9b      	ldrh	r3, [r3, r2]
 800392a:	b29a      	uxth	r2, r3
 800392c:	230e      	movs	r3, #14
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	1c11      	adds	r1, r2, #0
 8003932:	8019      	strh	r1, [r3, #0]
 8003934:	b213      	sxth	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	da00      	bge.n	800393c <PCD_EP_ISR_Handler+0x6ca>
 800393a:	e4a7      	b.n	800328c <PCD_EP_ISR_Handler+0x1a>
        }
      } 
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b009      	add	sp, #36	; 0x24
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	00000402 	.word	0x00000402
 800394c:	00000406 	.word	0x00000406
 8003950:	00000f0f 	.word	0x00000f0f
 8003954:	ffff80c0 	.word	0xffff80c0
 8003958:	ffff8f0f 	.word	0xffff8f0f
 800395c:	ffffc080 	.word	0xffffc080

08003960 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	0008      	movs	r0, r1
 800396a:	0011      	movs	r1, r2
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	230a      	movs	r3, #10
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	1c02      	adds	r2, r0, #0
 8003974:	801a      	strh	r2, [r3, #0]
 8003976:	2308      	movs	r3, #8
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	1c0a      	adds	r2, r1, #0
 800397c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800397e:	230a      	movs	r3, #10
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	4013      	ands	r3, r2
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00d      	beq.n	80039aa <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800398e:	230a      	movs	r3, #10
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	227f      	movs	r2, #127	; 0x7f
 8003996:	401a      	ands	r2, r3
 8003998:	0013      	movs	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	3328      	adds	r3, #40	; 0x28
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	18d3      	adds	r3, r2, r3
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	e00b      	b.n	80039c2 <HAL_PCDEx_PMAConfig+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039aa:	230a      	movs	r3, #10
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	0013      	movs	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	3309      	adds	r3, #9
 80039ba:	33ff      	adds	r3, #255	; 0xff
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	18d3      	adds	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039c2:	2308      	movs	r3, #8
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d107      	bne.n	80039dc <HAL_PCDEx_PMAConfig+0x7c>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2200      	movs	r2, #0
 80039d0:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	809a      	strh	r2, [r3, #4]
 80039da:	e00b      	b.n	80039f4 <HAL_PCDEx_PMAConfig+0x94>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2201      	movs	r2, #1
 80039e0:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b006      	add	sp, #24
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a06:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a08:	6812      	ldr	r2, [r2, #0]
 8003a0a:	2181      	movs	r1, #129	; 0x81
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a12:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a14:	6852      	ldr	r2, [r2, #4]
 8003a16:	4911      	ldr	r1, [pc, #68]	; (8003a5c <HAL_RCC_DeInit+0x5c>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a20:	6812      	ldr	r2, [r2, #0]
 8003a22:	490f      	ldr	r1, [pc, #60]	; (8003a60 <HAL_RCC_DeInit+0x60>)
 8003a24:	400a      	ands	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a2a:	4a0b      	ldr	r2, [pc, #44]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	490d      	ldr	r1, [pc, #52]	; (8003a64 <HAL_RCC_DeInit+0x64>)
 8003a30:	400a      	ands	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	605a      	str	r2, [r3, #4]
  
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003a46:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_RCC_DeInit+0x58>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_DeInit+0x68>)
 8003a4e:	4a07      	ldr	r2, [pc, #28]	; (8003a6c <HAL_RCC_DeInit+0x6c>)
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	f0fff80c 	.word	0xf0fff80c
 8003a60:	fef6ffff 	.word	0xfef6ffff
 8003a64:	fffbffff 	.word	0xfffbffff
 8003a68:	20000110 	.word	0x20000110
 8003a6c:	007a1200 	.word	0x007a1200

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	4013      	ands	r3, r2
 8003a84:	d100      	bne.n	8003a88 <HAL_RCC_OscConfig+0x18>
 8003a86:	e08d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a88:	4bc5      	ldr	r3, [pc, #788]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	220c      	movs	r2, #12
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d00e      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a94:	4bc2      	ldr	r3, [pc, #776]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	220c      	movs	r2, #12
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d116      	bne.n	8003ace <HAL_RCC_OscConfig+0x5e>
 8003aa0:	4bbf      	ldr	r3, [pc, #764]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	23c0      	movs	r3, #192	; 0xc0
 8003aa6:	025b      	lsls	r3, r3, #9
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	025b      	lsls	r3, r3, #9
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d10d      	bne.n	8003ace <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab2:	4bbb      	ldr	r3, [pc, #748]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	029b      	lsls	r3, r3, #10
 8003aba:	4013      	ands	r3, r2
 8003abc:	d100      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x50>
 8003abe:	e070      	b.n	8003ba2 <HAL_RCC_OscConfig+0x132>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d000      	beq.n	8003aca <HAL_RCC_OscConfig+0x5a>
 8003ac8:	e06b      	b.n	8003ba2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e327      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x76>
 8003ad6:	4bb2      	ldr	r3, [pc, #712]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003ad8:	4ab1      	ldr	r2, [pc, #708]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	0249      	lsls	r1, r1, #9
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e02f      	b.n	8003b46 <HAL_RCC_OscConfig+0xd6>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x98>
 8003aee:	4bac      	ldr	r3, [pc, #688]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003af0:	4aab      	ldr	r2, [pc, #684]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	49ab      	ldr	r1, [pc, #684]	; (8003da4 <HAL_RCC_OscConfig+0x334>)
 8003af6:	400a      	ands	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	4ba9      	ldr	r3, [pc, #676]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003afc:	4aa8      	ldr	r2, [pc, #672]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	49a9      	ldr	r1, [pc, #676]	; (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b02:	400a      	ands	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e01e      	b.n	8003b46 <HAL_RCC_OscConfig+0xd6>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d10e      	bne.n	8003b2e <HAL_RCC_OscConfig+0xbe>
 8003b10:	4ba3      	ldr	r3, [pc, #652]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b12:	4aa3      	ldr	r2, [pc, #652]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	02c9      	lsls	r1, r1, #11
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	4ba0      	ldr	r3, [pc, #640]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b20:	4a9f      	ldr	r2, [pc, #636]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	0249      	lsls	r1, r1, #9
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e00b      	b.n	8003b46 <HAL_RCC_OscConfig+0xd6>
 8003b2e:	4b9c      	ldr	r3, [pc, #624]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b30:	4a9b      	ldr	r2, [pc, #620]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	499b      	ldr	r1, [pc, #620]	; (8003da4 <HAL_RCC_OscConfig+0x334>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	4b99      	ldr	r3, [pc, #612]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b3c:	4a98      	ldr	r2, [pc, #608]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	4999      	ldr	r1, [pc, #612]	; (8003da8 <HAL_RCC_OscConfig+0x338>)
 8003b42:	400a      	ands	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d014      	beq.n	8003b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fc fb41 	bl	80001d4 <HAL_GetTick>
 8003b52:	0003      	movs	r3, r0
 8003b54:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fc fb3c 	bl	80001d4 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e2d9      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b8d      	ldr	r3, [pc, #564]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	029b      	lsls	r3, r3, #10
 8003b72:	4013      	ands	r3, r2
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xe8>
 8003b76:	e015      	b.n	8003ba4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fc fb2c 	bl	80001d4 <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b82:	f7fc fb27 	bl	80001d4 <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b64      	cmp	r3, #100	; 0x64
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e2c4      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b94:	4b82      	ldr	r3, [pc, #520]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	029b      	lsls	r3, r3, #10
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x112>
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	4013      	ands	r3, r2
 8003bac:	d100      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x140>
 8003bae:	e06c      	b.n	8003c8a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bb0:	4b7b      	ldr	r3, [pc, #492]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	220c      	movs	r2, #12
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d00e      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bba:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d11f      	bne.n	8003c06 <HAL_RCC_OscConfig+0x196>
 8003bc6:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	23c0      	movs	r3, #192	; 0xc0
 8003bcc:	025b      	lsls	r3, r3, #9
 8003bce:	401a      	ands	r2, r3
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d116      	bne.n	8003c06 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd8:	4b71      	ldr	r3, [pc, #452]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	4013      	ands	r3, r2
 8003be0:	d005      	beq.n	8003bee <HAL_RCC_OscConfig+0x17e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e297      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	4a6c      	ldr	r2, [pc, #432]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003bf0:	4b6b      	ldr	r3, [pc, #428]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	21f8      	movs	r1, #248	; 0xf8
 8003bf6:	438b      	bics	r3, r1
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c04:	e041      	b.n	8003c8a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d024      	beq.n	8003c58 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c0e:	4b64      	ldr	r3, [pc, #400]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003c10:	4a63      	ldr	r2, [pc, #396]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	430a      	orrs	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fc fadb 	bl	80001d4 <HAL_GetTick>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fc fad6 	bl	80001d4 <HAL_GetTick>
 8003c28:	0002      	movs	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e273      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c36:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d0f1      	beq.n	8003c24 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4a57      	ldr	r2, [pc, #348]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003c42:	4b57      	ldr	r3, [pc, #348]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	21f8      	movs	r1, #248	; 0xf8
 8003c48:	438b      	bics	r3, r1
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	430b      	orrs	r3, r1
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e018      	b.n	8003c8a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c58:	4b51      	ldr	r3, [pc, #324]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003c5a:	4a51      	ldr	r2, [pc, #324]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	438a      	bics	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fc fab6 	bl	80001d4 <HAL_GetTick>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6e:	f7fc fab1 	bl	80001d4 <HAL_GetTick>
 8003c72:	0002      	movs	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e24e      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c80:	4b47      	ldr	r3, [pc, #284]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2202      	movs	r2, #2
 8003c86:	4013      	ands	r3, r2
 8003c88:	d1f1      	bne.n	8003c6e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2208      	movs	r2, #8
 8003c90:	4013      	ands	r3, r2
 8003c92:	d036      	beq.n	8003d02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d019      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c9c:	4b40      	ldr	r3, [pc, #256]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003c9e:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca8:	f7fc fa94 	bl	80001d4 <HAL_GetTick>
 8003cac:	0003      	movs	r3, r0
 8003cae:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb2:	f7fc fa8f 	bl	80001d4 <HAL_GetTick>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e22c      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc4:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	2202      	movs	r2, #2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d0f1      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x242>
 8003cce:	e018      	b.n	8003d02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd0:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003cd2:	4a33      	ldr	r2, [pc, #204]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	438a      	bics	r2, r1
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cdc:	f7fc fa7a 	bl	80001d4 <HAL_GetTick>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fc fa75 	bl	80001d4 <HAL_GetTick>
 8003cea:	0002      	movs	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e212      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d1f1      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2204      	movs	r2, #4
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <HAL_RCC_OscConfig+0x29e>
 8003d0c:	e0b6      	b.n	8003e7c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0e:	2317      	movs	r3, #23
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003d18:	69da      	ldr	r2, [r3, #28]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	055b      	lsls	r3, r3, #21
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d111      	bne.n	8003d46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003d24:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003d26:	69d2      	ldr	r2, [r2, #28]
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	0549      	lsls	r1, r1, #21
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	61da      	str	r2, [r3, #28]
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	055b      	lsls	r3, r3, #21
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d3e:	2317      	movs	r3, #23
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d46:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_RCC_OscConfig+0x33c>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d11a      	bne.n	8003d88 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <HAL_RCC_OscConfig+0x33c>)
 8003d54:	4a15      	ldr	r2, [pc, #84]	; (8003dac <HAL_RCC_OscConfig+0x33c>)
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	0049      	lsls	r1, r1, #1
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d60:	f7fc fa38 	bl	80001d4 <HAL_GetTick>
 8003d64:	0003      	movs	r3, r0
 8003d66:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fc fa33 	bl	80001d4 <HAL_GetTick>
 8003d6e:	0002      	movs	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b64      	cmp	r3, #100	; 0x64
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1d0      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_OscConfig+0x33c>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4013      	ands	r3, r2
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10f      	bne.n	8003db0 <HAL_RCC_OscConfig+0x340>
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003d92:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <HAL_RCC_OscConfig+0x330>)
 8003d94:	6a12      	ldr	r2, [r2, #32]
 8003d96:	2101      	movs	r1, #1
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	621a      	str	r2, [r3, #32]
 8003d9c:	e036      	b.n	8003e0c <HAL_RCC_OscConfig+0x39c>
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	40021000 	.word	0x40021000
 8003da4:	fffeffff 	.word	0xfffeffff
 8003da8:	fffbffff 	.word	0xfffbffff
 8003dac:	40007000 	.word	0x40007000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10c      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x362>
 8003db8:	4bc9      	ldr	r3, [pc, #804]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003dba:	4ac9      	ldr	r2, [pc, #804]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003dbc:	6a12      	ldr	r2, [r2, #32]
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	438a      	bics	r2, r1
 8003dc2:	621a      	str	r2, [r3, #32]
 8003dc4:	4bc6      	ldr	r3, [pc, #792]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003dc6:	4ac6      	ldr	r2, [pc, #792]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003dc8:	6a12      	ldr	r2, [r2, #32]
 8003dca:	2104      	movs	r1, #4
 8003dcc:	438a      	bics	r2, r1
 8003dce:	621a      	str	r2, [r3, #32]
 8003dd0:	e01c      	b.n	8003e0c <HAL_RCC_OscConfig+0x39c>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x384>
 8003dda:	4bc1      	ldr	r3, [pc, #772]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003ddc:	4ac0      	ldr	r2, [pc, #768]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003dde:	6a12      	ldr	r2, [r2, #32]
 8003de0:	2104      	movs	r1, #4
 8003de2:	430a      	orrs	r2, r1
 8003de4:	621a      	str	r2, [r3, #32]
 8003de6:	4bbe      	ldr	r3, [pc, #760]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003de8:	4abd      	ldr	r2, [pc, #756]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003dea:	6a12      	ldr	r2, [r2, #32]
 8003dec:	2101      	movs	r1, #1
 8003dee:	430a      	orrs	r2, r1
 8003df0:	621a      	str	r2, [r3, #32]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0x39c>
 8003df4:	4bba      	ldr	r3, [pc, #744]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003df6:	4aba      	ldr	r2, [pc, #744]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003df8:	6a12      	ldr	r2, [r2, #32]
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	621a      	str	r2, [r3, #32]
 8003e00:	4bb7      	ldr	r3, [pc, #732]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e02:	4ab7      	ldr	r2, [pc, #732]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e04:	6a12      	ldr	r2, [r2, #32]
 8003e06:	2104      	movs	r1, #4
 8003e08:	438a      	bics	r2, r1
 8003e0a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7fc f9de 	bl	80001d4 <HAL_GetTick>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	e009      	b.n	8003e32 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fc f9d9 	bl	80001d4 <HAL_GetTick>
 8003e22:	0002      	movs	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	4aae      	ldr	r2, [pc, #696]	; (80040e4 <HAL_RCC_OscConfig+0x674>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e175      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e32:	4bab      	ldr	r3, [pc, #684]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	2202      	movs	r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x3ae>
 8003e3c:	e013      	b.n	8003e66 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3e:	f7fc f9c9 	bl	80001d4 <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e46:	e009      	b.n	8003e5c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e48:	f7fc f9c4 	bl	80001d4 <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4aa4      	ldr	r2, [pc, #656]	; (80040e4 <HAL_RCC_OscConfig+0x674>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e160      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5c:	4ba0      	ldr	r3, [pc, #640]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	2202      	movs	r2, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e66:	2317      	movs	r3, #23
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e70:	4b9b      	ldr	r3, [pc, #620]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e72:	4a9b      	ldr	r2, [pc, #620]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e74:	69d2      	ldr	r2, [r2, #28]
 8003e76:	499c      	ldr	r1, [pc, #624]	; (80040e8 <HAL_RCC_OscConfig+0x678>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2210      	movs	r2, #16
 8003e82:	4013      	ands	r3, r2
 8003e84:	d063      	beq.n	8003f4e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d12a      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e8e:	4b94      	ldr	r3, [pc, #592]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e90:	4a93      	ldr	r2, [pc, #588]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e94:	2104      	movs	r1, #4
 8003e96:	430a      	orrs	r2, r1
 8003e98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003e9a:	4b91      	ldr	r3, [pc, #580]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e9c:	4a90      	ldr	r2, [pc, #576]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003e9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea6:	f7fc f995 	bl	80001d4 <HAL_GetTick>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003eb0:	f7fc f990 	bl	80001d4 <HAL_GetTick>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e12d      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003ec2:	4b87      	ldr	r3, [pc, #540]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d0f1      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ecc:	4a84      	ldr	r2, [pc, #528]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003ece:	4b84      	ldr	r3, [pc, #528]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	21f8      	movs	r1, #248	; 0xf8
 8003ed4:	438b      	bics	r3, r1
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	6353      	str	r3, [r2, #52]	; 0x34
 8003ee2:	e034      	b.n	8003f4e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	3305      	adds	r3, #5
 8003eea:	d111      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003eec:	4b7c      	ldr	r3, [pc, #496]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003eee:	4a7c      	ldr	r2, [pc, #496]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003ef0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ef2:	2104      	movs	r1, #4
 8003ef4:	438a      	bics	r2, r1
 8003ef6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ef8:	4a79      	ldr	r2, [pc, #484]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003efa:	4b79      	ldr	r3, [pc, #484]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efe:	21f8      	movs	r1, #248	; 0xf8
 8003f00:	438b      	bics	r3, r1
 8003f02:	0019      	movs	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6353      	str	r3, [r2, #52]	; 0x34
 8003f0e:	e01e      	b.n	8003f4e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f10:	4b73      	ldr	r3, [pc, #460]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003f12:	4a73      	ldr	r2, [pc, #460]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003f14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f16:	2104      	movs	r1, #4
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003f1c:	4b70      	ldr	r3, [pc, #448]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003f1e:	4a70      	ldr	r2, [pc, #448]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003f20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f22:	2101      	movs	r1, #1
 8003f24:	438a      	bics	r2, r1
 8003f26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fc f954 	bl	80001d4 <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f32:	f7fc f94f 	bl	80001d4 <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0ec      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f44:	4b66      	ldr	r3, [pc, #408]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	2202      	movs	r2, #2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d1f1      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2220      	movs	r2, #32
 8003f54:	4013      	ands	r3, r2
 8003f56:	d05c      	beq.n	8004012 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f58:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	220c      	movs	r2, #12
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2b0c      	cmp	r3, #12
 8003f62:	d00e      	beq.n	8003f82 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f64:	4b5e      	ldr	r3, [pc, #376]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	220c      	movs	r2, #12
 8003f6a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d114      	bne.n	8003f9a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003f70:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	23c0      	movs	r3, #192	; 0xc0
 8003f76:	025b      	lsls	r3, r3, #9
 8003f78:	401a      	ands	r2, r3
 8003f7a:	23c0      	movs	r3, #192	; 0xc0
 8003f7c:	025b      	lsls	r3, r3, #9
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d10b      	bne.n	8003f9a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003f82:	4b57      	ldr	r3, [pc, #348]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	025b      	lsls	r3, r3, #9
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d040      	beq.n	8004010 <HAL_RCC_OscConfig+0x5a0>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d03c      	beq.n	8004010 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e0c1      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01b      	beq.n	8003fda <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003fa2:	4b4f      	ldr	r3, [pc, #316]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003fa4:	4a4e      	ldr	r2, [pc, #312]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003fa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0249      	lsls	r1, r1, #9
 8003fac:	430a      	orrs	r2, r1
 8003fae:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fc f910 	bl	80001d4 <HAL_GetTick>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fba:	f7fc f90b 	bl	80001d4 <HAL_GetTick>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e0a8      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003fcc:	4b44      	ldr	r3, [pc, #272]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	025b      	lsls	r3, r3, #9
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x54a>
 8003fd8:	e01b      	b.n	8004012 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003fda:	4b41      	ldr	r3, [pc, #260]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003fdc:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8003fde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fe0:	4942      	ldr	r1, [pc, #264]	; (80040ec <HAL_RCC_OscConfig+0x67c>)
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fc f8f5 	bl	80001d4 <HAL_GetTick>
 8003fea:	0003      	movs	r3, r0
 8003fec:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff0:	f7fc f8f0 	bl	80001d4 <HAL_GetTick>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e08d      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8004004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	025b      	lsls	r3, r3, #9
 800400a:	4013      	ands	r3, r2
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x580>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004010:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d100      	bne.n	800401c <HAL_RCC_OscConfig+0x5ac>
 800401a:	e07f      	b.n	800411c <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401c:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	220c      	movs	r2, #12
 8004022:	4013      	ands	r3, r2
 8004024:	2b08      	cmp	r3, #8
 8004026:	d100      	bne.n	800402a <HAL_RCC_OscConfig+0x5ba>
 8004028:	e076      	b.n	8004118 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b02      	cmp	r3, #2
 8004030:	d14b      	bne.n	80040ca <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004032:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8004034:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	492d      	ldr	r1, [pc, #180]	; (80040f0 <HAL_RCC_OscConfig+0x680>)
 800403a:	400a      	ands	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fc f8c9 	bl	80001d4 <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004048:	f7fc f8c4 	bl	80001d4 <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e061      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405a:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	049b      	lsls	r3, r3, #18
 8004062:	4013      	ands	r3, r2
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	210f      	movs	r1, #15
 800406e:	438b      	bics	r3, r1
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	430b      	orrs	r3, r1
 8004078:	62d3      	str	r3, [r2, #44]	; 0x2c
 800407a:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 800407c:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	491c      	ldr	r1, [pc, #112]	; (80040f4 <HAL_RCC_OscConfig+0x684>)
 8004082:	4019      	ands	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	4303      	orrs	r3, r0
 800408e:	430b      	orrs	r3, r1
 8004090:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8004094:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	0449      	lsls	r1, r1, #17
 800409c:	430a      	orrs	r2, r1
 800409e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fc f898 	bl	80001d4 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fc f893 	bl	80001d4 <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e030      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	049b      	lsls	r3, r3, #18
 80040c4:	4013      	ands	r3, r2
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x63a>
 80040c8:	e028      	b.n	800411c <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 80040cc:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <HAL_RCC_OscConfig+0x670>)
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	4907      	ldr	r1, [pc, #28]	; (80040f0 <HAL_RCC_OscConfig+0x680>)
 80040d2:	400a      	ands	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fc f87d 	bl	80001d4 <HAL_GetTick>
 80040da:	0003      	movs	r3, r0
 80040dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x69a>
 80040e0:	40021000 	.word	0x40021000
 80040e4:	00001388 	.word	0x00001388
 80040e8:	efffffff 	.word	0xefffffff
 80040ec:	fffeffff 	.word	0xfffeffff
 80040f0:	feffffff 	.word	0xfeffffff
 80040f4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fc f86c 	bl	80001d4 <HAL_GetTick>
 80040fc:	0002      	movs	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e009      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <HAL_RCC_OscConfig+0x6b8>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	049b      	lsls	r3, r3, #18
 8004112:	4013      	ands	r3, r2
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x688>
 8004116:	e001      	b.n	800411c <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b006      	add	sp, #24
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	40021000 	.word	0x40021000

0800412c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800413a:	4b7a      	ldr	r3, [pc, #488]	; (8004324 <HAL_RCC_ClockConfig+0x1f8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2201      	movs	r2, #1
 8004140:	401a      	ands	r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d211      	bcs.n	800416c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004148:	4b76      	ldr	r3, [pc, #472]	; (8004324 <HAL_RCC_ClockConfig+0x1f8>)
 800414a:	4a76      	ldr	r2, [pc, #472]	; (8004324 <HAL_RCC_ClockConfig+0x1f8>)
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	2101      	movs	r1, #1
 8004150:	438a      	bics	r2, r1
 8004152:	0011      	movs	r1, r2
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800415a:	4b72      	ldr	r3, [pc, #456]	; (8004324 <HAL_RCC_ClockConfig+0x1f8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2201      	movs	r2, #1
 8004160:	401a      	ands	r2, r3
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0d7      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2202      	movs	r2, #2
 8004172:	4013      	ands	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004176:	4a6c      	ldr	r2, [pc, #432]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 8004178:	4b6b      	ldr	r3, [pc, #428]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	21f0      	movs	r1, #240	; 0xf0
 800417e:	438b      	bics	r3, r1
 8004180:	0019      	movs	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	430b      	orrs	r3, r1
 8004188:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2201      	movs	r2, #1
 8004190:	4013      	ands	r3, r2
 8004192:	d100      	bne.n	8004196 <HAL_RCC_ClockConfig+0x6a>
 8004194:	e089      	b.n	80042aa <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b62      	ldr	r3, [pc, #392]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	029b      	lsls	r3, r3, #10
 80041a6:	4013      	ands	r3, r2
 80041a8:	d120      	bne.n	80041ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0b6      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	4b5c      	ldr	r3, [pc, #368]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	049b      	lsls	r3, r3, #18
 80041be:	4013      	ands	r3, r2
 80041c0:	d114      	bne.n	80041ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e0aa      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80041ce:	4b56      	ldr	r3, [pc, #344]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 80041d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	025b      	lsls	r3, r3, #9
 80041d6:	4013      	ands	r3, r2
 80041d8:	d108      	bne.n	80041ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e09e      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041de:	4b52      	ldr	r3, [pc, #328]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2202      	movs	r2, #2
 80041e4:	4013      	ands	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e097      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ec:	4a4e      	ldr	r2, [pc, #312]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 80041ee:	4b4e      	ldr	r3, [pc, #312]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2103      	movs	r1, #3
 80041f4:	438b      	bics	r3, r1
 80041f6:	0019      	movs	r1, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004200:	f7fb ffe8 	bl	80001d4 <HAL_GetTick>
 8004204:	0003      	movs	r3, r0
 8004206:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d111      	bne.n	8004234 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004210:	e009      	b.n	8004226 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004212:	f7fb ffdf 	bl	80001d4 <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	4a43      	ldr	r2, [pc, #268]	; (800432c <HAL_RCC_ClockConfig+0x200>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e07a      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004226:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	220c      	movs	r2, #12
 800422c:	4013      	ands	r3, r2
 800422e:	2b04      	cmp	r3, #4
 8004230:	d1ef      	bne.n	8004212 <HAL_RCC_ClockConfig+0xe6>
 8004232:	e03a      	b.n	80042aa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d111      	bne.n	8004260 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800423c:	e009      	b.n	8004252 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423e:	f7fb ffc9 	bl	80001d4 <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	4a38      	ldr	r2, [pc, #224]	; (800432c <HAL_RCC_ClockConfig+0x200>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e064      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004252:	4b35      	ldr	r3, [pc, #212]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	220c      	movs	r2, #12
 8004258:	4013      	ands	r3, r2
 800425a:	2b08      	cmp	r3, #8
 800425c:	d1ef      	bne.n	800423e <HAL_RCC_ClockConfig+0x112>
 800425e:	e024      	b.n	80042aa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d11b      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8004268:	e009      	b.n	800427e <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426a:	f7fb ffb3 	bl	80001d4 <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	4a2d      	ldr	r2, [pc, #180]	; (800432c <HAL_RCC_ClockConfig+0x200>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e04e      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800427e:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	220c      	movs	r2, #12
 8004284:	4013      	ands	r3, r2
 8004286:	2b0c      	cmp	r3, #12
 8004288:	d1ef      	bne.n	800426a <HAL_RCC_ClockConfig+0x13e>
 800428a:	e00e      	b.n	80042aa <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428c:	f7fb ffa2 	bl	80001d4 <HAL_GetTick>
 8004290:	0002      	movs	r2, r0
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	4a25      	ldr	r2, [pc, #148]	; (800432c <HAL_RCC_ClockConfig+0x200>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e03d      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a0:	4b21      	ldr	r3, [pc, #132]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	220c      	movs	r2, #12
 80042a6:	4013      	ands	r3, r2
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80042aa:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <HAL_RCC_ClockConfig+0x1f8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2201      	movs	r2, #1
 80042b0:	401a      	ands	r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d911      	bls.n	80042dc <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCC_ClockConfig+0x1f8>)
 80042ba:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <HAL_RCC_ClockConfig+0x1f8>)
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	2101      	movs	r1, #1
 80042c0:	438a      	bics	r2, r1
 80042c2:	0011      	movs	r1, r2
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042ca:	4b16      	ldr	r3, [pc, #88]	; (8004324 <HAL_RCC_ClockConfig+0x1f8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2201      	movs	r2, #1
 80042d0:	401a      	ands	r2, r3
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e01f      	b.n	800431c <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2204      	movs	r2, #4
 80042e2:	4013      	ands	r3, r2
 80042e4:	d008      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4910      	ldr	r1, [pc, #64]	; (8004330 <HAL_RCC_ClockConfig+0x204>)
 80042ee:	4019      	ands	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042f8:	f000 f882 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80042fc:	0001      	movs	r1, r0
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <HAL_RCC_ClockConfig+0x1fc>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	220f      	movs	r2, #15
 8004306:	4013      	ands	r3, r2
 8004308:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <HAL_RCC_ClockConfig+0x208>)
 800430a:	5cd3      	ldrb	r3, [r2, r3]
 800430c:	000a      	movs	r2, r1
 800430e:	40da      	lsrs	r2, r3
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <HAL_RCC_ClockConfig+0x20c>)
 8004312:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004314:	2000      	movs	r0, #0
 8004316:	f7fb ff35 	bl	8000184 <HAL_InitTick>
  
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b004      	add	sp, #16
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40022000 	.word	0x40022000
 8004328:	40021000 	.word	0x40021000
 800432c:	00001388 	.word	0x00001388
 8004330:	fffff8ff 	.word	0xfffff8ff
 8004334:	08010424 	.word	0x08010424
 8004338:	20000110 	.word	0x20000110

0800433c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8004348:	2314      	movs	r3, #20
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	2202      	movs	r2, #2
 800434e:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004350:	2314      	movs	r3, #20
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	2203      	movs	r2, #3
 8004356:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8004358:	2314      	movs	r3, #20
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	2200      	movs	r2, #0
 800435e:	609a      	str	r2, [r3, #8]
  gpio.Pin       = MCO1_PIN;
 8004360:	2314      	movs	r3, #20
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	0052      	lsls	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]
  gpio.Alternate = GPIO_AF0_MCO;
 800436a:	2314      	movs	r3, #20
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	2200      	movs	r2, #0
 8004370:	611a      	str	r2, [r3, #16]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8004372:	4b12      	ldr	r3, [pc, #72]	; (80043bc <HAL_RCC_MCOConfig+0x80>)
 8004374:	4a11      	ldr	r2, [pc, #68]	; (80043bc <HAL_RCC_MCOConfig+0x80>)
 8004376:	6952      	ldr	r2, [r2, #20]
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	0289      	lsls	r1, r1, #10
 800437c:	430a      	orrs	r2, r1
 800437e:	615a      	str	r2, [r3, #20]
 8004380:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <HAL_RCC_MCOConfig+0x80>)
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	029b      	lsls	r3, r3, #10
 8004388:	4013      	ands	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800438e:	2314      	movs	r3, #20
 8004390:	18fa      	adds	r2, r7, r3
 8004392:	2390      	movs	r3, #144	; 0x90
 8004394:	05db      	lsls	r3, r3, #23
 8004396:	0011      	movs	r1, r2
 8004398:	0018      	movs	r0, r3
 800439a:	f7fc fdcd 	bl	8000f38 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <HAL_RCC_MCOConfig+0x80>)
 80043a0:	4a06      	ldr	r2, [pc, #24]	; (80043bc <HAL_RCC_MCOConfig+0x80>)
 80043a2:	6852      	ldr	r2, [r2, #4]
 80043a4:	4906      	ldr	r1, [pc, #24]	; (80043c0 <HAL_RCC_MCOConfig+0x84>)
 80043a6:	4011      	ands	r1, r2
 80043a8:	68b8      	ldr	r0, [r7, #8]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4302      	orrs	r2, r0
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b00a      	add	sp, #40	; 0x28
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	40021000 	.word	0x40021000
 80043c0:	80ffffff 	.word	0x80ffffff

080043c4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <HAL_RCC_EnableCSS+0x18>)
 80043ca:	4a04      	ldr	r2, [pc, #16]	; (80043dc <HAL_RCC_EnableCSS+0x18>)
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	0309      	lsls	r1, r1, #12
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40021000 	.word	0x40021000

080043e0 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSON) ;
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_RCC_DisableCSS+0x18>)
 80043e6:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HAL_RCC_DisableCSS+0x18>)
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	4904      	ldr	r1, [pc, #16]	; (80043fc <HAL_RCC_DisableCSS+0x1c>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	40021000 	.word	0x40021000
 80043fc:	fff7ffff 	.word	0xfff7ffff

08004400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b08f      	sub	sp, #60	; 0x3c
 8004404:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004406:	2314      	movs	r3, #20
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	4a37      	ldr	r2, [pc, #220]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xe8>)
 800440c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800440e:	c313      	stmia	r3!, {r0, r1, r4}
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	4a35      	ldr	r2, [pc, #212]	; (80044ec <HAL_RCC_GetSysClockFreq+0xec>)
 8004418:	ca13      	ldmia	r2!, {r0, r1, r4}
 800441a:	c313      	stmia	r3!, {r0, r1, r4}
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004424:	2300      	movs	r3, #0
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
 8004428:	2300      	movs	r3, #0
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
 800442c:	2300      	movs	r3, #0
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004434:	4b2e      	ldr	r3, [pc, #184]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	220c      	movs	r2, #12
 800443e:	4013      	ands	r3, r2
 8004440:	2b08      	cmp	r3, #8
 8004442:	d006      	beq.n	8004452 <HAL_RCC_GetSysClockFreq+0x52>
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d043      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0xd0>
 8004448:	2b04      	cmp	r3, #4
 800444a:	d144      	bne.n	80044d6 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800444c:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800444e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004450:	e044      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	0c9b      	lsrs	r3, r3, #18
 8004456:	220f      	movs	r2, #15
 8004458:	4013      	ands	r3, r2
 800445a:	2214      	movs	r2, #20
 800445c:	18ba      	adds	r2, r7, r2
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004462:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	220f      	movs	r2, #15
 8004468:	4013      	ands	r3, r2
 800446a:	1d3a      	adds	r2, r7, #4
 800446c:	5cd3      	ldrb	r3, [r2, r3]
 800446e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004472:	23c0      	movs	r3, #192	; 0xc0
 8004474:	025b      	lsls	r3, r3, #9
 8004476:	401a      	ands	r2, r3
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	025b      	lsls	r3, r3, #9
 800447c:	429a      	cmp	r2, r3
 800447e:	d109      	bne.n	8004494 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004480:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004482:	481c      	ldr	r0, [pc, #112]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004484:	f00b fe76 	bl	8010174 <__udivsi3>
 8004488:	0003      	movs	r3, r0
 800448a:	001a      	movs	r2, r3
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	4353      	muls	r3, r2
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
 8004492:	e01a      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004496:	23c0      	movs	r3, #192	; 0xc0
 8004498:	025b      	lsls	r3, r3, #9
 800449a:	401a      	ands	r2, r3
 800449c:	23c0      	movs	r3, #192	; 0xc0
 800449e:	025b      	lsls	r3, r3, #9
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d109      	bne.n	80044b8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80044a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a6:	4814      	ldr	r0, [pc, #80]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044a8:	f00b fe64 	bl	8010174 <__udivsi3>
 80044ac:	0003      	movs	r3, r0
 80044ae:	001a      	movs	r2, r3
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	4353      	muls	r3, r2
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
 80044b6:	e008      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80044b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ba:	480e      	ldr	r0, [pc, #56]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80044bc:	f00b fe5a 	bl	8010174 <__udivsi3>
 80044c0:	0003      	movs	r3, r0
 80044c2:	001a      	movs	r2, r3
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	4353      	muls	r3, r2
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044ce:	e005      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044d4:	e002      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80044d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b00f      	add	sp, #60	; 0x3c
 80044e4:	bd90      	pop	{r4, r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	08010378 	.word	0x08010378
 80044ec:	08010388 	.word	0x08010388
 80044f0:	40021000 	.word	0x40021000
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	02dc6c00 	.word	0x02dc6c00

080044fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004500:	4b02      	ldr	r3, [pc, #8]	; (800450c <HAL_RCC_GetHCLKFreq+0x10>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	20000110 	.word	0x20000110

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004514:	f7ff fff2 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004518:	0001      	movs	r1, r0
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	0a1b      	lsrs	r3, r3, #8
 8004520:	2207      	movs	r2, #7
 8004522:	4013      	ands	r3, r2
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	40d9      	lsrs	r1, r3
 800452a:	000b      	movs	r3, r1
}    
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	40021000 	.word	0x40021000
 8004538:	08010434 	.word	0x08010434

0800453c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	221f      	movs	r2, #31
 8004548:	601a      	str	r2, [r3, #0]
                  | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI14;
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType |= RCC_OSCILLATORTYPE_HSI48;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2220      	movs	r2, #32
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
#endif /* RCC_HSI48_SUPPORT */


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8004556:	4b4e      	ldr	r3, [pc, #312]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	02db      	lsls	r3, r3, #11
 800455e:	401a      	ands	r2, r3
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	02db      	lsls	r3, r3, #11
 8004564:	429a      	cmp	r2, r3
 8004566:	d103      	bne.n	8004570 <HAL_RCC_GetOscConfig+0x34>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2205      	movs	r2, #5
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	e00f      	b.n	8004590 <HAL_RCC_GetOscConfig+0x54>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8004570:	4b47      	ldr	r3, [pc, #284]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	025b      	lsls	r3, r3, #9
 8004578:	401a      	ands	r2, r3
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	025b      	lsls	r3, r3, #9
 800457e:	429a      	cmp	r2, r3
 8004580:	d103      	bne.n	800458a <HAL_RCC_GetOscConfig+0x4e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	e002      	b.n	8004590 <HAL_RCC_GetOscConfig+0x54>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8004590:	4b3f      	ldr	r3, [pc, #252]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2201      	movs	r2, #1
 8004596:	4013      	ands	r3, r2
 8004598:	2b01      	cmp	r3, #1
 800459a:	d103      	bne.n	80045a4 <HAL_RCC_GetOscConfig+0x68>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	e002      	b.n	80045aa <HAL_RCC_GetOscConfig+0x6e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	60da      	str	r2, [r3, #12]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_BitNumber);
 80045aa:	4b39      	ldr	r3, [pc, #228]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	08db      	lsrs	r3, r3, #3
 80045b0:	221f      	movs	r2, #31
 80045b2:	401a      	ands	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	611a      	str	r2, [r3, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80045b8:	4b35      	ldr	r3, [pc, #212]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	2204      	movs	r2, #4
 80045be:	4013      	ands	r3, r2
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d103      	bne.n	80045cc <HAL_RCC_GetOscConfig+0x90>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2205      	movs	r2, #5
 80045c8:	609a      	str	r2, [r3, #8]
 80045ca:	e00c      	b.n	80045e6 <HAL_RCC_GetOscConfig+0xaa>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80045cc:	4b30      	ldr	r3, [pc, #192]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	2201      	movs	r2, #1
 80045d2:	4013      	ands	r3, r2
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d103      	bne.n	80045e0 <HAL_RCC_GetOscConfig+0xa4>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	609a      	str	r2, [r3, #8]
 80045de:	e002      	b.n	80045e6 <HAL_RCC_GetOscConfig+0xaa>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80045e6:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2201      	movs	r2, #1
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d103      	bne.n	80045fa <HAL_RCC_GetOscConfig+0xbe>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	61da      	str	r2, [r3, #28]
 80045f8:	e002      	b.n	8004600 <HAL_RCC_GetOscConfig+0xc4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	61da      	str	r2, [r3, #28]
  }
  
  /* Get the HSI14 configuration -----------------------------------------------*/
  if((RCC->CR2 & RCC_CR2_HSI14ON) == RCC_CR2_HSI14ON)
 8004600:	4b23      	ldr	r3, [pc, #140]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 8004602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004604:	2201      	movs	r2, #1
 8004606:	4013      	ands	r3, r2
 8004608:	2b01      	cmp	r3, #1
 800460a:	d103      	bne.n	8004614 <HAL_RCC_GetOscConfig+0xd8>
  {
    RCC_OscInitStruct->HSI14State = RCC_HSI_ON;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	615a      	str	r2, [r3, #20]
 8004612:	e002      	b.n	800461a <HAL_RCC_GetOscConfig+0xde>
  }
  else
  {
    RCC_OscInitStruct->HSI14State = RCC_HSI_OFF;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	615a      	str	r2, [r3, #20]
  }

  RCC_OscInitStruct->HSI14CalibrationValue = (uint32_t)((RCC->CR2 & RCC_CR2_HSI14TRIM) >> RCC_HSI14TRIM_BIT_NUMBER);
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	08db      	lsrs	r3, r3, #3
 8004620:	221f      	movs	r2, #31
 8004622:	401a      	ands	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  
#if defined(RCC_HSI48_SUPPORT)
  /* Get the HSI48 configuration if any-----------------------------------------*/
  RCC_OscInitStruct->HSI48State = __HAL_RCC_GET_HSI48_STATE();
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 800462a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	025b      	lsls	r3, r3, #9
 8004630:	4013      	ands	r3, r2
 8004632:	1e5a      	subs	r2, r3, #1
 8004634:	4193      	sbcs	r3, r2
 8004636:	b2db      	uxtb	r3, r3
 8004638:	001a      	movs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 800463e:	4b14      	ldr	r3, [pc, #80]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	045b      	lsls	r3, r3, #17
 8004646:	401a      	ands	r2, r3
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	045b      	lsls	r3, r3, #17
 800464c:	429a      	cmp	r2, r3
 800464e:	d103      	bne.n	8004658 <HAL_RCC_GetOscConfig+0x11c>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	625a      	str	r2, [r3, #36]	; 0x24
 8004656:	e002      	b.n	800465e <HAL_RCC_GetOscConfig+0x122>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	23c0      	movs	r3, #192	; 0xc0
 8004664:	025b      	lsls	r3, r3, #9
 8004666:	401a      	ands	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	23f0      	movs	r3, #240	; 0xf0
 8004672:	039b      	lsls	r3, r3, #14
 8004674:	401a      	ands	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PREDIV = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV);
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCC_GetOscConfig+0x154>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	220f      	movs	r2, #15
 8004680:	401a      	ands	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	46bd      	mov	sp, r7
 800468a:	b002      	add	sp, #8
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	40021000 	.word	0x40021000

08004694 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2207      	movs	r2, #7
 80046a2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046a4:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <HAL_RCC_GetClockConfig+0x4c>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	401a      	ands	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_GetClockConfig+0x4c>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	22f0      	movs	r2, #240	; 0xf0
 80046b6:	401a      	ands	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <HAL_RCC_GetClockConfig+0x4c>)
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	23e0      	movs	r3, #224	; 0xe0
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	401a      	ands	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_RCC_GetClockConfig+0x50>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	401a      	ands	r2, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	601a      	str	r2, [r3, #0]
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40022000 	.word	0x40022000

080046e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80046ec:	4b06      	ldr	r3, [pc, #24]	; (8004708 <HAL_RCC_NMI_IRQHandler+0x20>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2280      	movs	r2, #128	; 0x80
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b80      	cmp	r3, #128	; 0x80
 80046f6:	d104      	bne.n	8004702 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80046f8:	f000 f80a 	bl	8004710 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCC_NMI_IRQHandler+0x24>)
 80046fe:	2280      	movs	r2, #128	; 0x80
 8004700:	701a      	strb	r2, [r3, #0]
  }
}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	4002100a 	.word	0x4002100a

08004710 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	46c0      	nop			; (mov r8, r8)

0800471c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	025b      	lsls	r3, r3, #9
 8004734:	4013      	ands	r3, r2
 8004736:	d100      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004738:	e08e      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2317      	movs	r3, #23
 800473c:	18fb      	adds	r3, r7, r3
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004742:	4b6e      	ldr	r3, [pc, #440]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	055b      	lsls	r3, r3, #21
 800474a:	4013      	ands	r3, r2
 800474c:	d111      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	4b6b      	ldr	r3, [pc, #428]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004750:	4a6a      	ldr	r2, [pc, #424]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004752:	69d2      	ldr	r2, [r2, #28]
 8004754:	2180      	movs	r1, #128	; 0x80
 8004756:	0549      	lsls	r1, r1, #21
 8004758:	430a      	orrs	r2, r1
 800475a:	61da      	str	r2, [r3, #28]
 800475c:	4b67      	ldr	r3, [pc, #412]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	055b      	lsls	r3, r3, #21
 8004764:	4013      	ands	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2317      	movs	r3, #23
 800476c:	18fb      	adds	r3, r7, r3
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004772:	4b63      	ldr	r3, [pc, #396]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4013      	ands	r3, r2
 800477c:	d11a      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477e:	4b60      	ldr	r3, [pc, #384]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004780:	4a5f      	ldr	r2, [pc, #380]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	0049      	lsls	r1, r1, #1
 8004788:	430a      	orrs	r2, r1
 800478a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478c:	f7fb fd22 	bl	80001d4 <HAL_GetTick>
 8004790:	0003      	movs	r3, r0
 8004792:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	e008      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004796:	f7fb fd1d 	bl	80001d4 <HAL_GetTick>
 800479a:	0002      	movs	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b64      	cmp	r3, #100	; 0x64
 80047a2:	d901      	bls.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0a4      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	4b55      	ldr	r3, [pc, #340]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4013      	ands	r3, r2
 80047b2:	d0f0      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047b4:	4b51      	ldr	r3, [pc, #324]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047b6:	6a1a      	ldr	r2, [r3, #32]
 80047b8:	23c0      	movs	r3, #192	; 0xc0
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4013      	ands	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d034      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	23c0      	movs	r3, #192	; 0xc0
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	401a      	ands	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d02c      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d6:	4b49      	ldr	r3, [pc, #292]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a4a      	ldr	r2, [pc, #296]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e0:	4b46      	ldr	r3, [pc, #280]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047e2:	4a46      	ldr	r2, [pc, #280]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047e4:	6a12      	ldr	r2, [r2, #32]
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	0249      	lsls	r1, r1, #9
 80047ea:	430a      	orrs	r2, r1
 80047ec:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ee:	4b43      	ldr	r3, [pc, #268]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047f0:	4a42      	ldr	r2, [pc, #264]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047f2:	6a12      	ldr	r2, [r2, #32]
 80047f4:	4944      	ldr	r1, [pc, #272]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80047f6:	400a      	ands	r2, r1
 80047f8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047fa:	4b40      	ldr	r3, [pc, #256]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	4013      	ands	r3, r2
 8004806:	d013      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fb fce4 	bl	80001d4 <HAL_GetTick>
 800480c:	0003      	movs	r3, r0
 800480e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004810:	e009      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fb fcdf 	bl	80001d4 <HAL_GetTick>
 8004816:	0002      	movs	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	4a3b      	ldr	r2, [pc, #236]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e065      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	4b35      	ldr	r3, [pc, #212]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	d0f0      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004830:	4a32      	ldr	r2, [pc, #200]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004832:	4b32      	ldr	r3, [pc, #200]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4933      	ldr	r1, [pc, #204]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004838:	4019      	ands	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	430b      	orrs	r3, r1
 8004840:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004842:	2317      	movs	r3, #23
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484c:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800484e:	4a2b      	ldr	r2, [pc, #172]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004850:	69d2      	ldr	r2, [r2, #28]
 8004852:	492f      	ldr	r1, [pc, #188]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004854:	400a      	ands	r2, r1
 8004856:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2201      	movs	r2, #1
 800485e:	4013      	ands	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004862:	4a26      	ldr	r2, [pc, #152]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	2103      	movs	r1, #3
 800486a:	438b      	bics	r3, r1
 800486c:	0019      	movs	r1, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	430b      	orrs	r3, r1
 8004874:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2202      	movs	r2, #2
 800487c:	4013      	ands	r3, r2
 800487e:	d008      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004880:	4a1e      	ldr	r2, [pc, #120]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004882:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	4923      	ldr	r1, [pc, #140]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004888:	4019      	ands	r1, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	430b      	orrs	r3, r1
 8004890:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2220      	movs	r2, #32
 8004898:	4013      	ands	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800489c:	4a17      	ldr	r2, [pc, #92]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800489e:	4b17      	ldr	r3, [pc, #92]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	2110      	movs	r1, #16
 80048a4:	438b      	bics	r3, r1
 80048a6:	0019      	movs	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	029b      	lsls	r3, r3, #10
 80048b8:	4013      	ands	r3, r2
 80048ba:	d009      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048bc:	4a0f      	ldr	r2, [pc, #60]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048be:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	2180      	movs	r1, #128	; 0x80
 80048c4:	438b      	bics	r3, r1
 80048c6:	0019      	movs	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	4013      	ands	r3, r2
 80048da:	d009      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048dc:	4a07      	ldr	r2, [pc, #28]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	2140      	movs	r1, #64	; 0x40
 80048e4:	438b      	bics	r3, r1
 80048e6:	0019      	movs	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	0018      	movs	r0, r3
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b006      	add	sp, #24
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	40021000 	.word	0x40021000
 8004900:	40007000 	.word	0x40007000
 8004904:	fffffcff 	.word	0xfffffcff
 8004908:	fffeffff 	.word	0xfffeffff
 800490c:	00001388 	.word	0x00001388
 8004910:	efffffff 	.word	0xefffffff
 8004914:	fffcffff 	.word	0xfffcffff

08004918 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         returns the configuration information for the Extended Peripherals clocks
  *         (USART, RTC, I2C, CEC and USB).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  /* Common part first */
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_RTC;  
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <HAL_RCCEx_GetPeriphCLKConfig+0x8c>)
 8004924:	601a      	str	r2, [r3, #0]
  /* Get the RTC configuration --------------------------------------------*/
  PeriphClkInit->RTCClockSelection = __HAL_RCC_GET_RTC_SOURCE();
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	23c0      	movs	r3, #192	; 0xc0
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	401a      	ands	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	605a      	str	r2, [r3, #4]
  /* Get the USART1 clock configuration --------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8004934:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	2203      	movs	r2, #3
 800493a:	401a      	ands	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	609a      	str	r2, [r3, #8]
  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8004940:	4b19      	ldr	r3, [pc, #100]	; (80049a8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	2210      	movs	r2, #16
 8004946:	401a      	ands	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	611a      	str	r2, [r3, #16]

#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USART2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2202      	movs	r2, #2
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8004958:	4b13      	ldr	r3, [pc, #76]	; (80049a8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 800495a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495c:	23c0      	movs	r3, #192	; 0xc0
 800495e:	029b      	lsls	r3, r3, #10
 8004960:	401a      	ands	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60da      	str	r2, [r3, #12]
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
#endif /* STM32F091xC || STM32F098xx */

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	0292      	lsls	r2, r2, #10
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]
  /* Get the USB clock source ---------------------------------------------*/
  PeriphClkInit->UsbClockSelection = __HAL_RCC_GET_USB_SOURCE();
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	2280      	movs	r2, #128	; 0x80
 800497a:	401a      	ands	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	619a      	str	r2, [r3, #24]

#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_CEC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	00d2      	lsls	r2, r2, #3
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	2240      	movs	r2, #64	; 0x40
 8004994:	401a      	ands	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	615a      	str	r2, [r3, #20]
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	00010021 	.word	0x00010021
 80049a8:	40021000 	.word	0x40021000

080049ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_CEC     CEC peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* frequency == 0 : means that no available frequency for the peripheral */
  uint32_t frequency = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
  
  uint32_t srcclk = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
#if defined(USB)
  uint32_t pllmull = 0U, pllsource = 0U, predivfactor = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d100      	bne.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 80049ce:	e0aa      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80049d0:	d805      	bhi.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d044      	beq.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d100      	bne.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x30>
 80049da:	e06f      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      break;
    }
#endif /* CEC */
  default: 
    {
      break;
 80049dc:	e13c      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
  switch (PeriphClk)
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	0252      	lsls	r2, r2, #9
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x50>
 80049e6:	2280      	movs	r2, #128	; 0x80
 80049e8:	0292      	lsls	r2, r2, #10
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d100      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 80049ee:	e0b3      	b.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80049f0:	2280      	movs	r2, #128	; 0x80
 80049f2:	00d2      	lsls	r2, r2, #3
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d100      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 80049f8:	e107      	b.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
      break;
 80049fa:	e12d      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80049fc:	4b99      	ldr	r3, [pc, #612]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80049fe:	6a1a      	ldr	r2, [r3, #32]
 8004a00:	23c0      	movs	r3, #192	; 0xc0
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	2380      	movs	r3, #128	; 0x80
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d108      	bne.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8004a12:	4b94      	ldr	r3, [pc, #592]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	2202      	movs	r2, #2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
        frequency = LSE_VALUE;
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	e01c      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8004a2e:	4b8d      	ldr	r3, [pc, #564]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2202      	movs	r2, #2
 8004a34:	4013      	ands	r3, r2
 8004a36:	d002      	beq.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        frequency = LSI_VALUE;
 8004a38:	4b8b      	ldr	r3, [pc, #556]	; (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	e00f      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	23c0      	movs	r3, #192	; 0xc0
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d000      	beq.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8004a48:	e0fb      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
 8004a4a:	4b86      	ldr	r3, [pc, #536]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	029b      	lsls	r3, r3, #10
 8004a52:	4013      	ands	r3, r2
 8004a54:	d100      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8004a56:	e0f4      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
        frequency = HSE_VALUE / 32U;
 8004a58:	4b84      	ldr	r3, [pc, #528]	; (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004a5a:	61fb      	str	r3, [r7, #28]
      break;
 8004a5c:	e0f1      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
 8004a5e:	e0f0      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004a60:	4b80      	ldr	r3, [pc, #512]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	2203      	movs	r2, #3
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK1)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d104      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004a70:	f7ff fd4e 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8004a74:	0003      	movs	r3, r0
 8004a76:	61fb      	str	r3, [r7, #28]
      break;
 8004a78:	e0e5      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8004a80:	4b78      	ldr	r3, [pc, #480]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2202      	movs	r2, #2
 8004a86:	4013      	ands	r3, r2
 8004a88:	d002      	beq.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        frequency = HSI_VALUE;
 8004a8a:	4b79      	ldr	r3, [pc, #484]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004a8c:	61fb      	str	r3, [r7, #28]
      break;
 8004a8e:	e0da      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d104      	bne.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        frequency = HAL_RCC_GetSysClockFreq();
 8004a96:	f7ff fcb3 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	61fb      	str	r3, [r7, #28]
      break;
 8004a9e:	e0d2      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d000      	beq.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
 8004aa6:	e0ce      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8004aa8:	4b6e      	ldr	r3, [pc, #440]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	2202      	movs	r2, #2
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d100      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004ab2:	e0c8      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        frequency = LSE_VALUE;
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	61fb      	str	r3, [r7, #28]
      break;
 8004aba:	e0c4      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004abc:	4b69      	ldr	r3, [pc, #420]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac0:	23c0      	movs	r3, #192	; 0xc0
 8004ac2:	029b      	lsls	r3, r3, #10
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d104      	bne.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004ace:	f7ff fd1f 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	61fb      	str	r3, [r7, #28]
      break;
 8004ad6:	e0b8      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	23c0      	movs	r3, #192	; 0xc0
 8004adc:	029b      	lsls	r3, r3, #10
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004ae2:	4b60      	ldr	r3, [pc, #384]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d002      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSI_VALUE;
 8004aec:	4b60      	ldr	r3, [pc, #384]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004aee:	61fb      	str	r3, [r7, #28]
      break;
 8004af0:	e0ab      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	025b      	lsls	r3, r3, #9
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d104      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
        frequency = HAL_RCC_GetSysClockFreq();
 8004afc:	f7ff fc80 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8004b00:	0003      	movs	r3, r0
 8004b02:	61fb      	str	r3, [r7, #28]
      break;
 8004b04:	e0a1      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d000      	beq.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004b10:	e09b      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
 8004b12:	4b54      	ldr	r3, [pc, #336]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	2202      	movs	r2, #2
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d100      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8004b1c:	e095      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
        frequency = LSE_VALUE;
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	61fb      	str	r3, [r7, #28]
      break;
 8004b24:	e091      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x29e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004b26:	4b4f      	ldr	r3, [pc, #316]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
      if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d107      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8004b36:	4b4b      	ldr	r3, [pc, #300]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d002      	beq.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
        frequency = HSI_VALUE;
 8004b40:	4b4b      	ldr	r3, [pc, #300]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004b42:	61fb      	str	r3, [r7, #28]
      break;
 8004b44:	e083      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d000      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004b4c:	e07f      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7ff fc57 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8004b52:	0003      	movs	r3, r0
 8004b54:	61fb      	str	r3, [r7, #28]
      break;
 8004b56:	e07a      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004b58:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	4013      	ands	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
      if ((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b80      	cmp	r3, #128	; 0x80
 8004b66:	d143      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004b68:	4b3e      	ldr	r3, [pc, #248]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	049b      	lsls	r3, r3, #18
 8004b70:	4013      	ands	r3, r2
 8004b72:	d03d      	beq.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
        pllmull      = RCC->CFGR & RCC_CFGR_PLLMUL;
 8004b74:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	23f0      	movs	r3, #240	; 0xf0
 8004b7a:	039b      	lsls	r3, r3, #14
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
        pllsource    = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004b80:	4b38      	ldr	r3, [pc, #224]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	23c0      	movs	r3, #192	; 0xc0
 8004b86:	025b      	lsls	r3, r3, #9
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        pllmull      = (pllmull >> RCC_CFGR_PLLMUL_BITNUMBER) + 2U;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	0c9b      	lsrs	r3, r3, #18
 8004b90:	3302      	adds	r3, #2
 8004b92:	617b      	str	r3, [r7, #20]
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8004b94:	4b33      	ldr	r3, [pc, #204]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	220f      	movs	r2, #15
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
        if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	025b      	lsls	r3, r3, #9
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x212>
          frequency = (HSE_VALUE/predivfactor) * pllmull;
 8004baa:	68f9      	ldr	r1, [r7, #12]
 8004bac:	4830      	ldr	r0, [pc, #192]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004bae:	f00b fae1 	bl	8010174 <__udivsi3>
 8004bb2:	0003      	movs	r3, r0
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	4353      	muls	r3, r2
 8004bba:	61fb      	str	r3, [r7, #28]
        if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004bbc:	e024      	b.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	23c0      	movs	r3, #192	; 0xc0
 8004bc2:	025b      	lsls	r3, r3, #9
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = (HSI48_VALUE / predivfactor) * pllmull;
 8004bc8:	68f9      	ldr	r1, [r7, #12]
 8004bca:	482a      	ldr	r0, [pc, #168]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004bcc:	f00b fad2 	bl	8010174 <__udivsi3>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	001a      	movs	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4353      	muls	r3, r2
 8004bd8:	61fb      	str	r3, [r7, #28]
        if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004bda:	e015      	b.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          frequency = (HSI_VALUE / predivfactor) * pllmull;
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	4824      	ldr	r0, [pc, #144]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004be0:	f00b fac8 	bl	8010174 <__udivsi3>
 8004be4:	0003      	movs	r3, r0
 8004be6:	001a      	movs	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	4353      	muls	r3, r2
 8004bec:	61fb      	str	r3, [r7, #28]
        if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004bee:	e00b      	b.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
      else if ((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CR2, RCC_CR2_HSI48RDY)))
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d12d      	bne.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d027      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        frequency = HSI48_VALUE;
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004c04:	61fb      	str	r3, [r7, #28]
      break;
 8004c06:	e024      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004c08:	e023      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
      srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8004c0a:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	2240      	movs	r2, #64	; 0x40
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
      if ((srcclk == RCC_CECCLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d107      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	4013      	ands	r3, r2
 8004c22:	d002      	beq.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        frequency = HSI_VALUE;
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004c26:	61fb      	str	r3, [r7, #28]
      break;
 8004c28:	e015      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
      else if ((srcclk == RCC_CECCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d112      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	2202      	movs	r2, #2
 8004c36:	4013      	ands	r3, r2
 8004c38:	d00d      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        frequency = LSE_VALUE;
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	61fb      	str	r3, [r7, #28]
      break;
 8004c40:	e009      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
      break;
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	e008      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
      break;
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	e006      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
      break;
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	e004      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
      break;
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	e002      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
      break;
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	e000      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
      break;
 8004c56:	46c0      	nop			; (mov r8, r8)
    }
  }
  return(frequency);
 8004c58:	69fb      	ldr	r3, [r7, #28]
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b008      	add	sp, #32
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	40021000 	.word	0x40021000
 8004c68:	00009c40 	.word	0x00009c40
 8004c6c:	0003d090 	.word	0x0003d090
 8004c70:	007a1200 	.word	0x007a1200
 8004c74:	02dc6c00 	.word	0x02dc6c00

08004c78 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t value = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCCEx_CRSConfig+0x7c>)
 8004c86:	4a1b      	ldr	r2, [pc, #108]	; (8004cf4 <HAL_RCCEx_CRSConfig+0x7c>)
 8004c88:	6912      	ldr	r2, [r2, #16]
 8004c8a:	2180      	movs	r1, #128	; 0x80
 8004c8c:	0509      	lsls	r1, r1, #20
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	611a      	str	r2, [r3, #16]
  __HAL_RCC_CRS_RELEASE_RESET();
 8004c92:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <HAL_RCCEx_CRSConfig+0x7c>)
 8004c94:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <HAL_RCCEx_CRSConfig+0x7c>)
 8004c96:	6912      	ldr	r2, [r2, #16]
 8004c98:	4917      	ldr	r1, [pc, #92]	; (8004cf8 <HAL_RCCEx_CRSConfig+0x80>)
 8004c9a:	400a      	ands	r2, r1
 8004c9c:	611a      	str	r2, [r3, #16]

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_BITNUMBER);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <HAL_RCCEx_CRSConfig+0x84>)
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_BITNUMBER));
 8004ccc:	4a0b      	ldr	r2, [pc, #44]	; (8004cfc <HAL_RCCEx_CRSConfig+0x84>)
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_RCCEx_CRSConfig+0x84>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	490b      	ldr	r1, [pc, #44]	; (8004d00 <HAL_RCCEx_CRSConfig+0x88>)
 8004cd4:	4019      	ands	r1, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6013      	str	r3, [r2, #0]
  
  /* START AUTOMATIC SYNCHRONIZATION*/
  
  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCCEx_CRSConfig+0x84>)
 8004ce2:	4a06      	ldr	r2, [pc, #24]	; (8004cfc <HAL_RCCEx_CRSConfig+0x84>)
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	2160      	movs	r1, #96	; 0x60
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]
}
 8004cec:	46c0      	nop			; (mov r8, r8)
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b004      	add	sp, #16
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	f7ffffff 	.word	0xf7ffffff
 8004cfc:	40006c00 	.word	0x40006c00
 8004d00:	ffffc0ff 	.word	0xffffc0ff

08004d04 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x18>)
 8004d0a:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x18>)
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	2180      	movs	r1, #128	; 0x80
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	40006c00 	.word	0x40006c00

08004d20 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info 
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != NULL);
  
  /* Get the reload value */
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_RCCEx_CRSGetSynchronizationInfo+0x48>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	0c1a      	lsrs	r2, r3, #16
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	601a      	str	r2, [r3, #0]
  
  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_BITNUMBER);
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <HAL_RCCEx_CRSGetSynchronizationInfo+0x48>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	223f      	movs	r2, #63	; 0x3f
 8004d3c:	401a      	ands	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_BITNUMBER);
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_RCCEx_CRSGetSynchronizationInfo+0x48>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	0c1a      	lsrs	r2, r3, #16
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCCEx_CRSGetSynchronizationInfo+0x48>)
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	401a      	ands	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60da      	str	r2, [r3, #12]
}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b002      	add	sp, #8
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	40006c00 	.word	0x40006c00

08004d6c <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60bb      	str	r3, [r7, #8]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8004d7c:	f7fb fa2a 	bl	80001d4 <HAL_GetTick>
 8004d80:	0003      	movs	r3, r0
 8004d82:	60bb      	str	r3, [r7, #8]
  
  /* Wait for CRS flag or timeout detection */
  do
  {
    if(Timeout != HAL_MAX_DELAY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	d00c      	beq.n	8004da4 <HAL_RCCEx_CRSWaitSynchronization+0x38>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_RCCEx_CRSWaitSynchronization+0x34>
 8004d90:	f7fb fa20 	bl	80001d4 <HAL_GetTick>
 8004d94:	0002      	movs	r2, r0
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	1ad2      	subs	r2, r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCCEx_CRSWaitSynchronization+0x38>
      {
        crsstatus = RCC_CRS_TIMEOUT;
 8004da0:	2301      	movs	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
 8004da4:	4b2d      	ldr	r3, [pc, #180]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2201      	movs	r2, #1
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d106      	bne.n	8004dbe <HAL_RCCEx_CRSWaitSynchronization+0x52>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2202      	movs	r2, #2
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS SYNCWARN flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCCEx_CRSWaitSynchronization+0x6c>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS TRIM overflow flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
 8004dd8:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	401a      	ands	r2, r3
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d106      	bne.n	8004df8 <HAL_RCCEx_CRSWaitSynchronization+0x8c>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004df4:	2204      	movs	r2, #4
 8004df6:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS Error flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
 8004df8:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	401a      	ands	r2, r3
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d106      	bne.n	8004e18 <HAL_RCCEx_CRSWaitSynchronization+0xac>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004e14:	2204      	movs	r2, #4
 8004e16:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS SYNC Missed flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
 8004e18:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	401a      	ands	r2, r3
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d106      	bne.n	8004e38 <HAL_RCCEx_CRSWaitSynchronization+0xcc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
 8004e32:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004e34:	2204      	movs	r2, #4
 8004e36:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS Expected SYNC flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d102      	bne.n	8004e4a <HAL_RCCEx_CRSWaitSynchronization+0xde>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8004e46:	2208      	movs	r2, #8
 8004e48:	60da      	str	r2, [r3, #12]
    }
  } while(RCC_CRS_NONE == crsstatus);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d099      	beq.n	8004d84 <HAL_RCCEx_CRSWaitSynchronization+0x18>

  return crsstatus;
 8004e50:	68fb      	ldr	r3, [r7, #12]
}
 8004e52:	0018      	movs	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b004      	add	sp, #16
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	40006c00 	.word	0x40006c00

08004e60 <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
 8004e6a:	4b2f      	ldr	r3, [pc, #188]	; (8004f28 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
 8004e70:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if(((itflags & RCC_CRS_FLAG_SYNCOK) != RESET) && ((itsources & RCC_CRS_IT_SYNCOK) != RESET))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCCEx_CRS_IRQHandler+0x32>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	4013      	ands	r3, r2
 8004e84:	d005      	beq.n	8004e92 <HAL_RCCEx_CRS_IRQHandler+0x32>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
 8004e86:	4b28      	ldr	r3, [pc, #160]	; (8004f28 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
 8004e8c:	f000 f84e 	bl	8004f2c <HAL_RCCEx_CRS_SyncOkCallback>
 8004e90:	e046      	b.n	8004f20 <HAL_RCCEx_CRS_IRQHandler+0xc0>
  }
  /* Check CRS SYNCWARN flag  */
  else if(((itflags & RCC_CRS_FLAG_SYNCWARN) != RESET) && ((itsources & RCC_CRS_IT_SYNCWARN) != RESET))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2202      	movs	r2, #2
 8004e96:	4013      	ands	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_RCCEx_CRS_IRQHandler+0x4e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d005      	beq.n	8004eae <HAL_RCCEx_CRS_IRQHandler+0x4e>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
 8004ea2:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
 8004ea8:	f000 f845 	bl	8004f36 <HAL_RCCEx_CRS_SyncWarnCallback>
 8004eac:	e038      	b.n	8004f20 <HAL_RCCEx_CRS_IRQHandler+0xc0>
  }
  /* Check CRS Expected SYNC flag  */
  else if(((itflags & RCC_CRS_FLAG_ESYNC) != RESET) && ((itsources & RCC_CRS_IT_ESYNC) != RESET))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_RCCEx_CRS_IRQHandler+0x6a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d005      	beq.n	8004eca <HAL_RCCEx_CRS_IRQHandler+0x6a>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
 8004ebe:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
 8004ec4:	f000 f83c 	bl	8004f40 <HAL_RCCEx_CRS_ExpectedSyncCallback>
 8004ec8:	e02a      	b.n	8004f20 <HAL_RCCEx_CRS_IRQHandler+0xc0>
  }
  /* Check CRS Error flags  */
  else
  {
    if(((itflags & RCC_CRS_FLAG_ERR) != RESET) && ((itsources & RCC_CRS_IT_ERR) != RESET))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d026      	beq.n	8004f20 <HAL_RCCEx_CRS_IRQHandler+0xc0>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d022      	beq.n	8004f20 <HAL_RCCEx_CRS_IRQHandler+0xc0>
    {
      if((itflags & RCC_CRS_FLAG_SYNCERR) != RESET)
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d003      	beq.n	8004eec <HAL_RCCEx_CRS_IRQHandler+0x8c>
      {
        crserror |= RCC_CRS_SYNCERR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_SYNCMISS) != RESET)
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d003      	beq.n	8004efe <HAL_RCCEx_CRS_IRQHandler+0x9e>
      {
        crserror |= RCC_CRS_SYNCMISS;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_TRIMOVF) != RESET)
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4013      	ands	r3, r2
 8004f06:	d003      	beq.n	8004f10 <HAL_RCCEx_CRS_IRQHandler+0xb0>
      {
        crserror |= RCC_CRS_TRIMOVF;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8004f12:	2204      	movs	r2, #4
 8004f14:	60da      	str	r2, [r3, #12]
    
      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 f816 	bl	8004f4a <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
 8004f1e:	e7ff      	b.n	8004f20 <HAL_RCCEx_CRS_IRQHandler+0xc0>
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b004      	add	sp, #16
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40006c00 	.word	0x40006c00

08004f2c <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b002      	add	sp, #8
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)

08004f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e088      	b.n	8005080 <HAL_SPI_Init+0x124>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	225d      	movs	r2, #93	; 0x5d
 8004f78:	5c9b      	ldrb	r3, [r3, r2]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	225c      	movs	r2, #92	; 0x5c
 8004f84:	2100      	movs	r1, #0
 8004f86:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f009 fd84 	bl	800ea98 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	225d      	movs	r2, #93	; 0x5d
 8004f94:	2102      	movs	r1, #2
 8004f96:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	2140      	movs	r1, #64	; 0x40
 8004fa4:	438a      	bics	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	23e0      	movs	r3, #224	; 0xe0
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d902      	bls.n	8004fba <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e002      	b.n	8004fc0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	015b      	lsls	r3, r3, #5
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	23f0      	movs	r3, #240	; 0xf0
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d008      	beq.n	8004fde <HAL_SPI_Init+0x82>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	23e0      	movs	r3, #224	; 0xe0
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d002      	beq.n	8004fde <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10c      	bne.n	8005000 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	23e0      	movs	r3, #224	; 0xe0
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d903      	bls.n	8004ffa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff8:	e002      	b.n	8005000 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6851      	ldr	r1, [r2, #4]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6892      	ldr	r2, [r2, #8]
 800500c:	4311      	orrs	r1, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6912      	ldr	r2, [r2, #16]
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6952      	ldr	r2, [r2, #20]
 8005018:	4311      	orrs	r1, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6990      	ldr	r0, [r2, #24]
 800501e:	2280      	movs	r2, #128	; 0x80
 8005020:	0092      	lsls	r2, r2, #2
 8005022:	4002      	ands	r2, r0
 8005024:	4311      	orrs	r1, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	69d2      	ldr	r2, [r2, #28]
 800502a:	4311      	orrs	r1, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6a12      	ldr	r2, [r2, #32]
 8005030:	4311      	orrs	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6992      	ldr	r2, [r2, #24]
 8005042:	0c12      	lsrs	r2, r2, #16
 8005044:	2104      	movs	r1, #4
 8005046:	4011      	ands	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800504c:	4311      	orrs	r1, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005052:	4311      	orrs	r1, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	68d2      	ldr	r2, [r2, #12]
 8005058:	4311      	orrs	r1, r2
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	69d2      	ldr	r2, [r2, #28]
 800506a:	4907      	ldr	r1, [pc, #28]	; (8005088 <HAL_SPI_Init+0x12c>)
 800506c:	400a      	ands	r2, r1
 800506e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	225d      	movs	r2, #93	; 0x5d
 800507a:	2101      	movs	r1, #1
 800507c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b004      	add	sp, #16
 8005086:	bd80      	pop	{r7, pc}
 8005088:	fffff7ff 	.word	0xfffff7ff

0800508c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e01b      	b.n	80050d6 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	225d      	movs	r2, #93	; 0x5d
 80050a2:	2102      	movs	r1, #2
 80050a4:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	2140      	movs	r1, #64	; 0x40
 80050b2:	438a      	bics	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f009 fd75 	bl	800eba8 <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	225d      	movs	r2, #93	; 0x5d
 80050c8:	2100      	movs	r1, #0
 80050ca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	225c      	movs	r2, #92	; 0x5c
 80050d0:	2100      	movs	r1, #0
 80050d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b002      	add	sp, #8
 80050dc:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b002      	add	sp, #8
 80050ec:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b002      	add	sp, #8
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b088      	sub	sp, #32
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	1dbb      	adds	r3, r7, #6
 800510c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005112:	231f      	movs	r3, #31
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	225c      	movs	r2, #92	; 0x5c
 800511e:	5c9b      	ldrb	r3, [r3, r2]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_SPI_Transmit+0x2a>
 8005124:	2302      	movs	r3, #2
 8005126:	e14f      	b.n	80053c8 <HAL_SPI_Transmit+0x2ca>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	225c      	movs	r2, #92	; 0x5c
 800512c:	2101      	movs	r1, #1
 800512e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005130:	f7fb f850 	bl	80001d4 <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	225d      	movs	r2, #93	; 0x5d
 800513c:	5c9b      	ldrb	r3, [r3, r2]
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d004      	beq.n	800514e <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8005144:	231f      	movs	r3, #31
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	2202      	movs	r2, #2
 800514a:	701a      	strb	r2, [r3, #0]
    goto error;
 800514c:	e131      	b.n	80053b2 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_SPI_Transmit+0x5e>
 8005154:	1dbb      	adds	r3, r7, #6
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 800515c:	231f      	movs	r3, #31
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	2201      	movs	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
    goto error;
 8005164:	e125      	b.n	80053b2 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	225d      	movs	r2, #93	; 0x5d
 800516a:	2103      	movs	r1, #3
 800516c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1dba      	adds	r2, r7, #6
 800517e:	8812      	ldrh	r2, [r2, #0]
 8005180:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1dba      	adds	r2, r7, #6
 8005186:	8812      	ldrh	r2, [r2, #0]
 8005188:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2244      	movs	r2, #68	; 0x44
 8005194:	2100      	movs	r1, #0
 8005196:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2246      	movs	r2, #70	; 0x46
 800519c:	2100      	movs	r1, #0
 800519e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d108      	bne.n	80051ca <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	2180      	movs	r1, #128	; 0x80
 80051c4:	01c9      	lsls	r1, r1, #7
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2240      	movs	r2, #64	; 0x40
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	2140      	movs	r1, #64	; 0x40
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	23e0      	movs	r3, #224	; 0xe0
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d948      	bls.n	8005286 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_SPI_Transmit+0x108>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b01      	cmp	r3, #1
 8005204:	d139      	bne.n	800527a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	8812      	ldrh	r2, [r2, #0]
 800520e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	3302      	adds	r3, #2
 8005214:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005224:	e029      	b.n	800527a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2202      	movs	r2, #2
 800522e:	4013      	ands	r3, r2
 8005230:	2b02      	cmp	r3, #2
 8005232:	d10f      	bne.n	8005254 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	8812      	ldrh	r2, [r2, #0]
 800523c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	3302      	adds	r3, #2
 8005242:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005252:	e012      	b.n	800527a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_SPI_Transmit+0x172>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	d00c      	beq.n	800527a <HAL_SPI_Transmit+0x17c>
 8005260:	f7fa ffb8 	bl	80001d4 <HAL_GetTick>
 8005264:	0002      	movs	r2, r0
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	1ad2      	subs	r2, r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d304      	bcc.n	800527a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005270:	231f      	movs	r3, #31
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	2203      	movs	r2, #3
 8005276:	701a      	strb	r2, [r3, #0]
          goto error;
 8005278:	e09b      	b.n	80053b2 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1d0      	bne.n	8005226 <HAL_SPI_Transmit+0x128>
 8005284:	e073      	b.n	800536e <HAL_SPI_Transmit+0x270>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <HAL_SPI_Transmit+0x19a>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d165      	bne.n	8005364 <HAL_SPI_Transmit+0x266>
    {
      if (hspi->TxXferCount > 1U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d90f      	bls.n	80052c2 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	8812      	ldrh	r2, [r2, #0]
 80052aa:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	3302      	adds	r3, #2
 80052b0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b02      	subs	r3, #2
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052c0:	e050      	b.n	8005364 <HAL_SPI_Transmit+0x266>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	001a      	movs	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	1c59      	adds	r1, r3, #1
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80052e2:	e03f      	b.n	8005364 <HAL_SPI_Transmit+0x266>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2202      	movs	r2, #2
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d125      	bne.n	800533e <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d90f      	bls.n	800531c <HAL_SPI_Transmit+0x21e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	8812      	ldrh	r2, [r2, #0]
 8005304:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	3302      	adds	r3, #2
 800530a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b02      	subs	r3, #2
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	87da      	strh	r2, [r3, #62]	; 0x3e
 800531a:	e023      	b.n	8005364 <HAL_SPI_Transmit+0x266>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	001a      	movs	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800533c:	e012      	b.n	8005364 <HAL_SPI_Transmit+0x266>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_SPI_Transmit+0x25c>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	d00c      	beq.n	8005364 <HAL_SPI_Transmit+0x266>
 800534a:	f7fa ff43 	bl	80001d4 <HAL_GetTick>
 800534e:	0002      	movs	r2, r0
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	1ad2      	subs	r2, r2, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d304      	bcc.n	8005364 <HAL_SPI_Transmit+0x266>
        {
          errorcode = HAL_TIMEOUT;
 800535a:	231f      	movs	r3, #31
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	2203      	movs	r2, #3
 8005360:	701a      	strb	r2, [r3, #0]
          goto error;
 8005362:	e026      	b.n	80053b2 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1ba      	bne.n	80052e4 <HAL_SPI_Transmit+0x1e6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	0018      	movs	r0, r3
 8005376:	f002 fa23 	bl	80077c0 <SPI_EndRxTxTransaction>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d002      	beq.n	8005384 <HAL_SPI_Transmit+0x286>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <HAL_SPI_Transmit+0x2a4>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_SPI_Transmit+0x2b4>
  {
    errorcode = HAL_ERROR;
 80053aa:	231f      	movs	r3, #31
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	225d      	movs	r2, #93	; 0x5d
 80053b6:	2101      	movs	r1, #1
 80053b8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	225c      	movs	r2, #92	; 0x5c
 80053be:	2100      	movs	r1, #0
 80053c0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80053c2:	231f      	movs	r3, #31
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	781b      	ldrb	r3, [r3, #0]
}
 80053c8:	0018      	movs	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b008      	add	sp, #32
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d0:	b590      	push	{r4, r7, lr}
 80053d2:	b089      	sub	sp, #36	; 0x24
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	1dbb      	adds	r3, r7, #6
 80053de:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053e4:	2317      	movs	r3, #23
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	2382      	movs	r3, #130	; 0x82
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d113      	bne.n	8005420 <HAL_SPI_Receive+0x50>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10f      	bne.n	8005420 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	225d      	movs	r2, #93	; 0x5d
 8005404:	2104      	movs	r1, #4
 8005406:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005408:	1dbb      	adds	r3, r7, #6
 800540a:	881c      	ldrh	r4, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	0023      	movs	r3, r4
 8005418:	f000 f916 	bl	8005648 <HAL_SPI_TransmitReceive>
 800541c:	0003      	movs	r3, r0
 800541e:	e10a      	b.n	8005636 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	225c      	movs	r2, #92	; 0x5c
 8005424:	5c9b      	ldrb	r3, [r3, r2]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_SPI_Receive+0x5e>
 800542a:	2302      	movs	r3, #2
 800542c:	e103      	b.n	8005636 <HAL_SPI_Receive+0x266>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	225c      	movs	r2, #92	; 0x5c
 8005432:	2101      	movs	r1, #1
 8005434:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005436:	f7fa fecd 	bl	80001d4 <HAL_GetTick>
 800543a:	0003      	movs	r3, r0
 800543c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	225d      	movs	r2, #93	; 0x5d
 8005442:	5c9b      	ldrb	r3, [r3, r2]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b01      	cmp	r3, #1
 8005448:	d004      	beq.n	8005454 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800544a:	2317      	movs	r3, #23
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	2202      	movs	r2, #2
 8005450:	701a      	strb	r2, [r3, #0]
    goto error;
 8005452:	e0e5      	b.n	8005620 <HAL_SPI_Receive+0x250>
  }

  if ((pData == NULL) || (Size == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_SPI_Receive+0x92>
 800545a:	1dbb      	adds	r3, r7, #6
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <HAL_SPI_Receive+0x9c>
  {
    errorcode = HAL_ERROR;
 8005462:	2317      	movs	r3, #23
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	2201      	movs	r2, #1
 8005468:	701a      	strb	r2, [r3, #0]
    goto error;
 800546a:	e0d9      	b.n	8005620 <HAL_SPI_Receive+0x250>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	225d      	movs	r2, #93	; 0x5d
 8005470:	2104      	movs	r1, #4
 8005472:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1dba      	adds	r2, r7, #6
 8005484:	2144      	movs	r1, #68	; 0x44
 8005486:	8812      	ldrh	r2, [r2, #0]
 8005488:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	1dba      	adds	r2, r7, #6
 800548e:	2146      	movs	r1, #70	; 0x46
 8005490:	8812      	ldrh	r2, [r2, #0]
 8005492:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	23e0      	movs	r3, #224	; 0xe0
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d908      	bls.n	80054d0 <HAL_SPI_Receive+0x100>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	6852      	ldr	r2, [r2, #4]
 80054c8:	495d      	ldr	r1, [pc, #372]	; (8005640 <HAL_SPI_Receive+0x270>)
 80054ca:	400a      	ands	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	e008      	b.n	80054e2 <HAL_SPI_Receive+0x112>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	6852      	ldr	r2, [r2, #4]
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	0149      	lsls	r1, r1, #5
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d107      	bne.n	80054fe <HAL_SPI_Receive+0x12e>
  {
    SPI_1LINE_RX(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	4952      	ldr	r1, [pc, #328]	; (8005644 <HAL_SPI_Receive+0x274>)
 80054fa:	400a      	ands	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2240      	movs	r2, #64	; 0x40
 8005506:	4013      	ands	r3, r2
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d007      	beq.n	800551c <HAL_SPI_Receive+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	2140      	movs	r1, #64	; 0x40
 8005518:	430a      	orrs	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	23e0      	movs	r3, #224	; 0xe0
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	429a      	cmp	r2, r3
 8005526:	d862      	bhi.n	80055ee <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005528:	e02d      	b.n	8005586 <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2201      	movs	r2, #1
 8005532:	4013      	ands	r3, r2
 8005534:	2b01      	cmp	r3, #1
 8005536:	d113      	bne.n	8005560 <HAL_SPI_Receive+0x190>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	3301      	adds	r3, #1
 800554a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2246      	movs	r2, #70	; 0x46
 8005550:	5a9b      	ldrh	r3, [r3, r2]
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b299      	uxth	r1, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2246      	movs	r2, #70	; 0x46
 800555c:	5299      	strh	r1, [r3, r2]
 800555e:	e012      	b.n	8005586 <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_SPI_Receive+0x1ac>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	d00c      	beq.n	8005586 <HAL_SPI_Receive+0x1b6>
 800556c:	f7fa fe32 	bl	80001d4 <HAL_GetTick>
 8005570:	0002      	movs	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad2      	subs	r2, r2, r3
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d304      	bcc.n	8005586 <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 800557c:	2317      	movs	r3, #23
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	2203      	movs	r2, #3
 8005582:	701a      	strb	r2, [r3, #0]
          goto error;
 8005584:	e04c      	b.n	8005620 <HAL_SPI_Receive+0x250>
    while (hspi->RxXferCount > 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2246      	movs	r2, #70	; 0x46
 800558a:	5a9b      	ldrh	r3, [r3, r2]
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1cb      	bne.n	800552a <HAL_SPI_Receive+0x15a>
 8005592:	e032      	b.n	80055fa <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2201      	movs	r2, #1
 800559c:	4013      	ands	r3, r2
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d112      	bne.n	80055c8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3302      	adds	r3, #2
 80055b2:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2246      	movs	r2, #70	; 0x46
 80055b8:	5a9b      	ldrh	r3, [r3, r2]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b299      	uxth	r1, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2246      	movs	r2, #70	; 0x46
 80055c4:	5299      	strh	r1, [r3, r2]
 80055c6:	e012      	b.n	80055ee <HAL_SPI_Receive+0x21e>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_SPI_Receive+0x214>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	d00c      	beq.n	80055ee <HAL_SPI_Receive+0x21e>
 80055d4:	f7fa fdfe 	bl	80001d4 <HAL_GetTick>
 80055d8:	0002      	movs	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad2      	subs	r2, r2, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d304      	bcc.n	80055ee <HAL_SPI_Receive+0x21e>
        {
          errorcode = HAL_TIMEOUT;
 80055e4:	2317      	movs	r3, #23
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	2203      	movs	r2, #3
 80055ea:	701a      	strb	r2, [r3, #0]
          goto error;
 80055ec:	e018      	b.n	8005620 <HAL_SPI_Receive+0x250>
    while (hspi->RxXferCount > 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2246      	movs	r2, #70	; 0x46
 80055f2:	5a9b      	ldrh	r3, [r3, r2]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1cc      	bne.n	8005594 <HAL_SPI_Receive+0x1c4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	0018      	movs	r0, r3
 8005602:	f002 f87f 	bl	8007704 <SPI_EndRxTransaction>
 8005606:	1e03      	subs	r3, r0, #0
 8005608:	d002      	beq.n	8005610 <HAL_SPI_Receive+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_SPI_Receive+0x250>
  {
    errorcode = HAL_ERROR;
 8005618:	2317      	movs	r3, #23
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	2201      	movs	r2, #1
 800561e:	701a      	strb	r2, [r3, #0]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	225d      	movs	r2, #93	; 0x5d
 8005624:	2101      	movs	r1, #1
 8005626:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	225c      	movs	r2, #92	; 0x5c
 800562c:	2100      	movs	r1, #0
 800562e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005630:	2317      	movs	r3, #23
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	781b      	ldrb	r3, [r3, #0]
}
 8005636:	0018      	movs	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	b007      	add	sp, #28
 800563c:	bd90      	pop	{r4, r7, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	ffffefff 	.word	0xffffefff
 8005644:	ffffbfff 	.word	0xffffbfff

08005648 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	; 0x28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	001a      	movs	r2, r3
 8005656:	1cbb      	adds	r3, r7, #2
 8005658:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8005666:	2301      	movs	r3, #1
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800566a:	2323      	movs	r3, #35	; 0x23
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	225c      	movs	r2, #92	; 0x5c
 8005676:	5c9b      	ldrb	r3, [r3, r2]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_SPI_TransmitReceive+0x38>
 800567c:	2302      	movs	r3, #2
 800567e:	e1f1      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x41c>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	225c      	movs	r2, #92	; 0x5c
 8005684:	2101      	movs	r1, #1
 8005686:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005688:	f7fa fda4 	bl	80001d4 <HAL_GetTick>
 800568c:	0003      	movs	r3, r0
 800568e:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	225d      	movs	r2, #93	; 0x5d
 8005694:	5c9b      	ldrb	r3, [r3, r2]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d010      	beq.n	80056c8 <HAL_SPI_TransmitReceive+0x80>
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	2382      	movs	r3, #130	; 0x82
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d106      	bne.n	80056be <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d102      	bne.n	80056be <HAL_SPI_TransmitReceive+0x76>
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d004      	beq.n	80056c8 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80056be:	2323      	movs	r3, #35	; 0x23
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	2202      	movs	r2, #2
 80056c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80056c6:	e1c2      	b.n	8005a4e <HAL_SPI_TransmitReceive+0x406>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <HAL_SPI_TransmitReceive+0x94>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_SPI_TransmitReceive+0x94>
 80056d4:	1cbb      	adds	r3, r7, #2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 80056dc:	2323      	movs	r3, #35	; 0x23
 80056de:	18fb      	adds	r3, r7, r3
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80056e4:	e1b3      	b.n	8005a4e <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	225d      	movs	r2, #93	; 0x5d
 80056ea:	5c9b      	ldrb	r3, [r3, r2]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d003      	beq.n	80056fa <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	225d      	movs	r2, #93	; 0x5d
 80056f6:	2105      	movs	r1, #5
 80056f8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1cba      	adds	r2, r7, #2
 800570a:	2146      	movs	r1, #70	; 0x46
 800570c:	8812      	ldrh	r2, [r2, #0]
 800570e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1cba      	adds	r2, r7, #2
 8005714:	2144      	movs	r1, #68	; 0x44
 8005716:	8812      	ldrh	r2, [r2, #0]
 8005718:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1cba      	adds	r2, r7, #2
 8005724:	8812      	ldrh	r2, [r2, #0]
 8005726:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1cba      	adds	r2, r7, #2
 800572c:	8812      	ldrh	r2, [r2, #0]
 800572e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	23e0      	movs	r3, #224	; 0xe0
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	429a      	cmp	r2, r3
 8005746:	d805      	bhi.n	8005754 <HAL_SPI_TransmitReceive+0x10c>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2246      	movs	r2, #70	; 0x46
 800574c:	5a9b      	ldrh	r3, [r3, r2]
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d908      	bls.n	8005766 <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	6852      	ldr	r2, [r2, #4]
 800575e:	49c3      	ldr	r1, [pc, #780]	; (8005a6c <HAL_SPI_TransmitReceive+0x424>)
 8005760:	400a      	ands	r2, r1
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	e008      	b.n	8005778 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	6852      	ldr	r2, [r2, #4]
 8005770:	2180      	movs	r1, #128	; 0x80
 8005772:	0149      	lsls	r1, r1, #5
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2240      	movs	r2, #64	; 0x40
 8005780:	4013      	ands	r3, r2
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d007      	beq.n	8005796 <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	6812      	ldr	r2, [r2, #0]
 800578e:	6812      	ldr	r2, [r2, #0]
 8005790:	2140      	movs	r1, #64	; 0x40
 8005792:	430a      	orrs	r2, r1
 8005794:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	23e0      	movs	r3, #224	; 0xe0
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	429a      	cmp	r2, r3
 80057a0:	d800      	bhi.n	80057a4 <HAL_SPI_TransmitReceive+0x15c>
 80057a2:	e075      	b.n	8005890 <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <HAL_SPI_TransmitReceive+0x16e>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d160      	bne.n	8005878 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	8812      	ldrh	r2, [r2, #0]
 80057be:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	3302      	adds	r3, #2
 80057c4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d4:	e050      	b.n	8005878 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01c      	beq.n	8005816 <HAL_SPI_TransmitReceive+0x1ce>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d017      	beq.n	8005816 <HAL_SPI_TransmitReceive+0x1ce>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2202      	movs	r2, #2
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d110      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	8812      	ldrh	r2, [r2, #0]
 80057fc:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	3302      	adds	r3, #2
 8005802:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2246      	movs	r2, #70	; 0x46
 800581a:	5a9b      	ldrh	r3, [r3, r2]
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01a      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x210>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2201      	movs	r2, #1
 800582a:	4013      	ands	r3, r2
 800582c:	2b01      	cmp	r3, #1
 800582e:	d113      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3302      	adds	r3, #2
 8005840:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2246      	movs	r2, #70	; 0x46
 8005846:	5a9b      	ldrh	r3, [r3, r2]
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b299      	uxth	r1, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2246      	movs	r2, #70	; 0x46
 8005852:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005854:	2301      	movs	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	3301      	adds	r3, #1
 800585c:	d00c      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x230>
 800585e:	f7fa fcb9 	bl	80001d4 <HAL_GetTick>
 8005862:	0002      	movs	r2, r0
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	1ad2      	subs	r2, r2, r3
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	429a      	cmp	r2, r3
 800586c:	d304      	bcc.n	8005878 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 800586e:	2323      	movs	r3, #35	; 0x23
 8005870:	18fb      	adds	r3, r7, r3
 8005872:	2203      	movs	r2, #3
 8005874:	701a      	strb	r2, [r3, #0]
        goto error;
 8005876:	e0ea      	b.n	8005a4e <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1a9      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x18e>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2246      	movs	r2, #70	; 0x46
 8005886:	5a9b      	ldrh	r3, [r3, r2]
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1a3      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x18e>
 800588e:	e0cb      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x3e0>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x25c>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d000      	beq.n	80058a4 <HAL_SPI_TransmitReceive+0x25c>
 80058a2:	e0b4      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x3c6>
    {
      if (hspi->TxXferCount > 1U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d90f      	bls.n	80058ce <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	8812      	ldrh	r2, [r2, #0]
 80058b6:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	3302      	adds	r3, #2
 80058bc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b02      	subs	r3, #2
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058cc:	e09f      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x3c6>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	001a      	movs	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	1c59      	adds	r1, r3, #1
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ee:	e08e      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x3c6>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d032      	beq.n	800595c <HAL_SPI_TransmitReceive+0x314>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d02d      	beq.n	800595c <HAL_SPI_TransmitReceive+0x314>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2202      	movs	r2, #2
 8005908:	4013      	ands	r3, r2
 800590a:	2b02      	cmp	r3, #2
 800590c:	d126      	bne.n	800595c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	d90f      	bls.n	8005938 <HAL_SPI_TransmitReceive+0x2f0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	8812      	ldrh	r2, [r2, #0]
 8005920:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	3302      	adds	r3, #2
 8005926:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b02      	subs	r3, #2
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005936:	e00f      	b.n	8005958 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	001a      	movs	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	1c59      	adds	r1, r3, #1
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2246      	movs	r2, #70	; 0x46
 8005960:	5a9b      	ldrh	r3, [r3, r2]
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d042      	beq.n	80059ee <HAL_SPI_TransmitReceive+0x3a6>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2201      	movs	r2, #1
 8005970:	4013      	ands	r3, r2
 8005972:	2b01      	cmp	r3, #1
 8005974:	d13b      	bne.n	80059ee <HAL_SPI_TransmitReceive+0x3a6>
      {
        if (hspi->RxXferCount > 1U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2246      	movs	r2, #70	; 0x46
 800597a:	5a9b      	ldrh	r3, [r3, r2]
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	d921      	bls.n	80059c6 <HAL_SPI_TransmitReceive+0x37e>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	b29a      	uxth	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3302      	adds	r3, #2
 8005992:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2246      	movs	r2, #70	; 0x46
 8005998:	5a9b      	ldrh	r3, [r3, r2]
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b02      	subs	r3, #2
 800599e:	b299      	uxth	r1, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2246      	movs	r2, #70	; 0x46
 80059a4:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2246      	movs	r2, #70	; 0x46
 80059aa:	5a9b      	ldrh	r3, [r3, r2]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d81b      	bhi.n	80059ea <HAL_SPI_TransmitReceive+0x3a2>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	6852      	ldr	r2, [r2, #4]
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	0149      	lsls	r1, r1, #5
 80059c0:	430a      	orrs	r2, r1
 80059c2:	605a      	str	r2, [r3, #4]
 80059c4:	e011      	b.n	80059ea <HAL_SPI_TransmitReceive+0x3a2>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	6812      	ldr	r2, [r2, #0]
 80059d0:	320c      	adds	r2, #12
 80059d2:	7812      	ldrb	r2, [r2, #0]
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2246      	movs	r2, #70	; 0x46
 80059dc:	5a9b      	ldrh	r3, [r3, r2]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b299      	uxth	r1, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2246      	movs	r2, #70	; 0x46
 80059e8:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059ea:	2301      	movs	r3, #1
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	3301      	adds	r3, #1
 80059f2:	d00c      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x3c6>
 80059f4:	f7fa fbee 	bl	80001d4 <HAL_GetTick>
 80059f8:	0002      	movs	r2, r0
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	1ad2      	subs	r2, r2, r3
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d304      	bcc.n	8005a0e <HAL_SPI_TransmitReceive+0x3c6>
      {
        errorcode = HAL_TIMEOUT;
 8005a04:	2323      	movs	r3, #35	; 0x23
 8005a06:	18fb      	adds	r3, r7, r3
 8005a08:	2203      	movs	r2, #3
 8005a0a:	701a      	strb	r2, [r3, #0]
        goto error;
 8005a0c:	e01f      	b.n	8005a4e <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d000      	beq.n	8005a1a <HAL_SPI_TransmitReceive+0x3d2>
 8005a18:	e76a      	b.n	80058f0 <HAL_SPI_TransmitReceive+0x2a8>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2246      	movs	r2, #70	; 0x46
 8005a1e:	5a9b      	ldrh	r3, [r3, r2]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d000      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x3e0>
 8005a26:	e763      	b.n	80058f0 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f001 fec6 	bl	80077c0 <SPI_EndRxTxTransaction>
 8005a34:	1e03      	subs	r3, r0, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x3f6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 8005a46:	2323      	movs	r3, #35	; 0x23
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	225d      	movs	r2, #93	; 0x5d
 8005a52:	2101      	movs	r1, #1
 8005a54:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	225c      	movs	r2, #92	; 0x5c
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005a5e:	2323      	movs	r3, #35	; 0x23
 8005a60:	18fb      	adds	r3, r7, r3
 8005a62:	781b      	ldrb	r3, [r3, #0]
}
 8005a64:	0018      	movs	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b00a      	add	sp, #40	; 0x28
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	ffffefff 	.word	0xffffefff

08005a70 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	1dbb      	adds	r3, r7, #6
 8005a7c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a7e:	2317      	movs	r3, #23
 8005a80:	18fb      	adds	r3, r7, r3
 8005a82:	2200      	movs	r2, #0
 8005a84:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	225c      	movs	r2, #92	; 0x5c
 8005a8a:	5c9b      	ldrb	r3, [r3, r2]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_SPI_Transmit_IT+0x24>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e074      	b.n	8005b7e <HAL_SPI_Transmit_IT+0x10e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	225c      	movs	r2, #92	; 0x5c
 8005a98:	2101      	movs	r1, #1
 8005a9a:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_SPI_Transmit_IT+0x3a>
 8005aa2:	1dbb      	adds	r3, r7, #6
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8005aaa:	2317      	movs	r3, #23
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	2201      	movs	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ab2:	e05d      	b.n	8005b70 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	225d      	movs	r2, #93	; 0x5d
 8005ab8:	5c9b      	ldrb	r3, [r3, r2]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d004      	beq.n	8005aca <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8005ac0:	2317      	movs	r3, #23
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ac8:	e052      	b.n	8005b70 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	225d      	movs	r2, #93	; 0x5d
 8005ace:	2103      	movs	r1, #3
 8005ad0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1dba      	adds	r2, r7, #6
 8005ae2:	8812      	ldrh	r2, [r2, #0]
 8005ae4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1dba      	adds	r2, r7, #6
 8005aea:	8812      	ldrh	r2, [r2, #0]
 8005aec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2244      	movs	r2, #68	; 0x44
 8005af8:	2100      	movs	r1, #0
 8005afa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2246      	movs	r2, #70	; 0x46
 8005b00:	2100      	movs	r1, #0
 8005b02:	5299      	strh	r1, [r3, r2]
  hspi->RxISR       = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	23e0      	movs	r3, #224	; 0xe0
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d903      	bls.n	8005b1e <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a1b      	ldr	r2, [pc, #108]	; (8005b88 <HAL_SPI_Transmit_IT+0x118>)
 8005b1a:	651a      	str	r2, [r3, #80]	; 0x50
 8005b1c:	e002      	b.n	8005b24 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a1a      	ldr	r2, [pc, #104]	; (8005b8c <HAL_SPI_Transmit_IT+0x11c>)
 8005b22:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d108      	bne.n	8005b42 <HAL_SPI_Transmit_IT+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	6812      	ldr	r2, [r2, #0]
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	01c9      	lsls	r1, r1, #7
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	6852      	ldr	r2, [r2, #4]
 8005b4c:	21a0      	movs	r1, #160	; 0xa0
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2240      	movs	r2, #64	; 0x40
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	d007      	beq.n	8005b70 <HAL_SPI_Transmit_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	6812      	ldr	r2, [r2, #0]
 8005b6a:	2140      	movs	r1, #64	; 0x40
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
  }

error :
  __HAL_UNLOCK(hspi);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	225c      	movs	r2, #92	; 0x5c
 8005b74:	2100      	movs	r1, #0
 8005b76:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b78:	2317      	movs	r3, #23
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b006      	add	sp, #24
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	080074e9 	.word	0x080074e9
 8005b8c:	080074a3 	.word	0x080074a3

08005b90 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	1dbb      	adds	r3, r7, #6
 8005b9c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b9e:	2317      	movs	r3, #23
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d112      	bne.n	8005bd4 <HAL_SPI_Receive_IT+0x44>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	2382      	movs	r3, #130	; 0x82
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	225d      	movs	r2, #93	; 0x5d
 8005bbe:	2104      	movs	r1, #4
 8005bc0:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005bc2:	1dbb      	adds	r3, r7, #6
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f89a 	bl	8005d04 <HAL_SPI_TransmitReceive_IT>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	e08b      	b.n	8005cec <HAL_SPI_Receive_IT+0x15c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	225c      	movs	r2, #92	; 0x5c
 8005bd8:	5c9b      	ldrb	r3, [r3, r2]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_SPI_Receive_IT+0x52>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e084      	b.n	8005cec <HAL_SPI_Receive_IT+0x15c>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	225c      	movs	r2, #92	; 0x5c
 8005be6:	2101      	movs	r1, #1
 8005be8:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	225d      	movs	r2, #93	; 0x5d
 8005bee:	5c9b      	ldrb	r3, [r3, r2]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d004      	beq.n	8005c00 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8005bf6:	2317      	movs	r3, #23
 8005bf8:	18fb      	adds	r3, r7, r3
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	701a      	strb	r2, [r3, #0]
    goto error;
 8005bfe:	e06e      	b.n	8005cde <HAL_SPI_Receive_IT+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_SPI_Receive_IT+0x7e>
 8005c06:	1dbb      	adds	r3, r7, #6
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 8005c0e:	2317      	movs	r3, #23
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	2201      	movs	r2, #1
 8005c14:	701a      	strb	r2, [r3, #0]
    goto error;
 8005c16:	e062      	b.n	8005cde <HAL_SPI_Receive_IT+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	225d      	movs	r2, #93	; 0x5d
 8005c1c:	2104      	movs	r1, #4
 8005c1e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1dba      	adds	r2, r7, #6
 8005c30:	2144      	movs	r1, #68	; 0x44
 8005c32:	8812      	ldrh	r2, [r2, #0]
 8005c34:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1dba      	adds	r2, r7, #6
 8005c3a:	2146      	movs	r1, #70	; 0x46
 8005c3c:	8812      	ldrh	r2, [r2, #0]
 8005c3e:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	23e0      	movs	r3, #224	; 0xe0
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d90b      	bls.n	8005c7c <HAL_SPI_Receive_IT+0xec>
  {
    /* Set fiforxthresold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	6852      	ldr	r2, [r2, #4]
 8005c6e:	4921      	ldr	r1, [pc, #132]	; (8005cf4 <HAL_SPI_Receive_IT+0x164>)
 8005c70:	400a      	ands	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <HAL_SPI_Receive_IT+0x168>)
 8005c78:	64da      	str	r2, [r3, #76]	; 0x4c
 8005c7a:	e00b      	b.n	8005c94 <HAL_SPI_Receive_IT+0x104>
  }
  else
  {
    /* Set fiforxthresold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	6852      	ldr	r2, [r2, #4]
 8005c86:	2180      	movs	r1, #128	; 0x80
 8005c88:	0149      	lsls	r1, r1, #5
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <HAL_SPI_Receive_IT+0x16c>)
 8005c92:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d107      	bne.n	8005cb0 <HAL_SPI_Receive_IT+0x120>
  {
    SPI_1LINE_RX(hspi);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	4915      	ldr	r1, [pc, #84]	; (8005d00 <HAL_SPI_Receive_IT+0x170>)
 8005cac:	400a      	ands	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	6852      	ldr	r2, [r2, #4]
 8005cba:	2160      	movs	r1, #96	; 0x60
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2240      	movs	r2, #64	; 0x40
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d007      	beq.n	8005cde <HAL_SPI_Receive_IT+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	2140      	movs	r1, #64	; 0x40
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	601a      	str	r2, [r3, #0]
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	225c      	movs	r2, #92	; 0x5c
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005ce6:	2317      	movs	r3, #23
 8005ce8:	18fb      	adds	r3, r7, r3
 8005cea:	781b      	ldrb	r3, [r3, #0]
}
 8005cec:	0018      	movs	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b006      	add	sp, #24
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	ffffefff 	.word	0xffffefff
 8005cf8:	08007455 	.word	0x08007455
 8005cfc:	08007409 	.word	0x08007409
 8005d00:	ffffbfff 	.word	0xffffbfff

08005d04 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	001a      	movs	r2, r3
 8005d12:	1cbb      	adds	r3, r7, #2
 8005d14:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d1e:	231f      	movs	r3, #31
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	225c      	movs	r2, #92	; 0x5c
 8005d2a:	5c9b      	ldrb	r3, [r3, r2]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_SPI_TransmitReceive_IT+0x30>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e0a2      	b.n	8005e7a <HAL_SPI_TransmitReceive_IT+0x176>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	225c      	movs	r2, #92	; 0x5c
 8005d38:	2101      	movs	r1, #1
 8005d3a:	5499      	strb	r1, [r3, r2]

  tmp  = hspi->State;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	225d      	movs	r2, #93	; 0x5d
 8005d40:	5c9b      	ldrb	r3, [r3, r2]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	617b      	str	r3, [r7, #20]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d010      	beq.n	8005d74 <HAL_SPI_TransmitReceive_IT+0x70>
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	2382      	movs	r3, #130	; 0x82
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d106      	bne.n	8005d6a <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <HAL_SPI_TransmitReceive_IT+0x66>
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d004      	beq.n	8005d74 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8005d6a:	231f      	movs	r3, #31
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	2202      	movs	r2, #2
 8005d70:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d72:	e07b      	b.n	8005e6c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d006      	beq.n	8005d88 <HAL_SPI_TransmitReceive_IT+0x84>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_SPI_TransmitReceive_IT+0x84>
 8005d80:	1cbb      	adds	r3, r7, #2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8005d88:	231f      	movs	r3, #31
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005d90:	e06c      	b.n	8005e6c <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	225d      	movs	r2, #93	; 0x5d
 8005d96:	5c9b      	ldrb	r3, [r3, r2]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d003      	beq.n	8005da6 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	225d      	movs	r2, #93	; 0x5d
 8005da2:	2105      	movs	r1, #5
 8005da4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1cba      	adds	r2, r7, #2
 8005db6:	8812      	ldrh	r2, [r2, #0]
 8005db8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1cba      	adds	r2, r7, #2
 8005dbe:	8812      	ldrh	r2, [r2, #0]
 8005dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	1cba      	adds	r2, r7, #2
 8005dcc:	2144      	movs	r1, #68	; 0x44
 8005dce:	8812      	ldrh	r2, [r2, #0]
 8005dd0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1cba      	adds	r2, r7, #2
 8005dd6:	2146      	movs	r1, #70	; 0x46
 8005dd8:	8812      	ldrh	r2, [r2, #0]
 8005dda:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	23e0      	movs	r3, #224	; 0xe0
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d906      	bls.n	8005df6 <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <HAL_SPI_TransmitReceive_IT+0x180>)
 8005dec:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4a25      	ldr	r2, [pc, #148]	; (8005e88 <HAL_SPI_TransmitReceive_IT+0x184>)
 8005df2:	651a      	str	r2, [r3, #80]	; 0x50
 8005df4:	e005      	b.n	8005e02 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <HAL_SPI_TransmitReceive_IT+0x188>)
 8005dfa:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8005e00:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	23e0      	movs	r3, #224	; 0xe0
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d805      	bhi.n	8005e1a <HAL_SPI_TransmitReceive_IT+0x116>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2246      	movs	r2, #70	; 0x46
 8005e12:	5a9b      	ldrh	r3, [r3, r2]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d908      	bls.n	8005e2c <HAL_SPI_TransmitReceive_IT+0x128>
  {
    /* Set fiforxthresold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	6852      	ldr	r2, [r2, #4]
 8005e24:	491b      	ldr	r1, [pc, #108]	; (8005e94 <HAL_SPI_TransmitReceive_IT+0x190>)
 8005e26:	400a      	ands	r2, r1
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	e008      	b.n	8005e3e <HAL_SPI_TransmitReceive_IT+0x13a>
  }
  else
  {
    /* Set fiforxthresold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	6852      	ldr	r2, [r2, #4]
 8005e36:	2180      	movs	r1, #128	; 0x80
 8005e38:	0149      	lsls	r1, r1, #5
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	6852      	ldr	r2, [r2, #4]
 8005e48:	21e0      	movs	r1, #224	; 0xe0
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2240      	movs	r2, #64	; 0x40
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b40      	cmp	r3, #64	; 0x40
 8005e5a:	d007      	beq.n	8005e6c <HAL_SPI_TransmitReceive_IT+0x168>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	2140      	movs	r1, #64	; 0x40
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]
  }

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	225c      	movs	r2, #92	; 0x5c
 8005e70:	2100      	movs	r1, #0
 8005e72:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005e74:	231f      	movs	r3, #31
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	781b      	ldrb	r3, [r3, #0]
}
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	b008      	add	sp, #32
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	0800733f 	.word	0x0800733f
 8005e88:	080073a7 	.word	0x080073a7
 8005e8c:	080071f1 	.word	0x080071f1
 8005e90:	080072ad 	.word	0x080072ad
 8005e94:	ffffefff 	.word	0xffffefff

08005e98 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	1dbb      	adds	r3, r7, #6
 8005ea4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ea6:	2317      	movs	r3, #23
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	2200      	movs	r2, #0
 8005eac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	225c      	movs	r2, #92	; 0x5c
 8005eb2:	5c9b      	ldrb	r3, [r3, r2]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_SPI_Transmit_DMA+0x24>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0ce      	b.n	800605a <HAL_SPI_Transmit_DMA+0x1c2>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	225c      	movs	r2, #92	; 0x5c
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	225d      	movs	r2, #93	; 0x5d
 8005ec8:	5c9b      	ldrb	r3, [r3, r2]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d004      	beq.n	8005eda <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8005ed0:	2317      	movs	r3, #23
 8005ed2:	18fb      	adds	r3, r7, r3
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ed8:	e0b8      	b.n	800604c <HAL_SPI_Transmit_DMA+0x1b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_SPI_Transmit_DMA+0x50>
 8005ee0:	1dbb      	adds	r3, r7, #6
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d104      	bne.n	8005ef2 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8005ee8:	2317      	movs	r3, #23
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	2201      	movs	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ef0:	e0ac      	b.n	800604c <HAL_SPI_Transmit_DMA+0x1b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	225d      	movs	r2, #93	; 0x5d
 8005ef6:	2103      	movs	r1, #3
 8005ef8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1dba      	adds	r2, r7, #6
 8005f0a:	8812      	ldrh	r2, [r2, #0]
 8005f0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1dba      	adds	r2, r7, #6
 8005f12:	8812      	ldrh	r2, [r2, #0]
 8005f14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2244      	movs	r2, #68	; 0x44
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2246      	movs	r2, #70	; 0x46
 8005f34:	2100      	movs	r1, #0
 8005f36:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d108      	bne.n	8005f56 <HAL_SPI_Transmit_DMA+0xbe>
  {
    SPI_1LINE_TX(hspi);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	6812      	ldr	r2, [r2, #0]
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	2180      	movs	r1, #128	; 0x80
 8005f50:	01c9      	lsls	r1, r1, #7
 8005f52:	430a      	orrs	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	4a42      	ldr	r2, [pc, #264]	; (8006064 <HAL_SPI_Transmit_DMA+0x1cc>)
 8005f5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	4a41      	ldr	r2, [pc, #260]	; (8006068 <HAL_SPI_Transmit_DMA+0x1d0>)
 8005f64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	4a40      	ldr	r2, [pc, #256]	; (800606c <HAL_SPI_Transmit_DMA+0x1d4>)
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	2200      	movs	r2, #0
 8005f74:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	6852      	ldr	r2, [r2, #4]
 8005f80:	493b      	ldr	r1, [pc, #236]	; (8006070 <HAL_SPI_Transmit_DMA+0x1d8>)
 8005f82:	400a      	ands	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	23e0      	movs	r3, #224	; 0xe0
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d82f      	bhi.n	8005ff2 <HAL_SPI_Transmit_DMA+0x15a>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	695a      	ldr	r2, [r3, #20]
 8005f98:	2380      	movs	r3, #128	; 0x80
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d128      	bne.n	8005ff2 <HAL_SPI_Transmit_DMA+0x15a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	001a      	movs	r2, r3
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4013      	ands	r3, r2
 8005fac:	d10f      	bne.n	8005fce <HAL_SPI_Transmit_DMA+0x136>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	6852      	ldr	r2, [r2, #4]
 8005fb8:	492d      	ldr	r1, [pc, #180]	; (8006070 <HAL_SPI_Transmit_DMA+0x1d8>)
 8005fba:	400a      	ands	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fcc:	e011      	b.n	8005ff2 <HAL_SPI_Transmit_DMA+0x15a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	6812      	ldr	r2, [r2, #0]
 8005fd6:	6852      	ldr	r2, [r2, #4]
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	01c9      	lsls	r1, r1, #7
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3301      	adds	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	0019      	movs	r1, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	001a      	movs	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006008:	b29b      	uxth	r3, r3
 800600a:	f7fa fc7d 	bl	8000908 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2240      	movs	r2, #64	; 0x40
 8006016:	4013      	ands	r3, r2
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d007      	beq.n	800602c <HAL_SPI_Transmit_DMA+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	2140      	movs	r1, #64	; 0x40
 8006028:	430a      	orrs	r2, r1
 800602a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	6812      	ldr	r2, [r2, #0]
 8006034:	6852      	ldr	r2, [r2, #4]
 8006036:	2120      	movs	r1, #32
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	6812      	ldr	r2, [r2, #0]
 8006044:	6852      	ldr	r2, [r2, #4]
 8006046:	2102      	movs	r1, #2
 8006048:	430a      	orrs	r2, r1
 800604a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	225c      	movs	r2, #92	; 0x5c
 8006050:	2100      	movs	r1, #0
 8006052:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006054:	2317      	movs	r3, #23
 8006056:	18fb      	adds	r3, r7, r3
 8006058:	781b      	ldrb	r3, [r3, #0]
}
 800605a:	0018      	movs	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	b006      	add	sp, #24
 8006060:	bd80      	pop	{r7, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	08006f6d 	.word	0x08006f6d
 8006068:	08006d95 	.word	0x08006d95
 800606c:	08006fc7 	.word	0x08006fc7
 8006070:	ffffbfff 	.word	0xffffbfff

08006074 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	1dbb      	adds	r3, r7, #6
 8006080:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006082:	2317      	movs	r3, #23
 8006084:	18fb      	adds	r3, r7, r3
 8006086:	2200      	movs	r2, #0
 8006088:	701a      	strb	r2, [r3, #0]

  /* check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d112      	bne.n	80060b8 <HAL_SPI_Receive_DMA+0x44>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	2382      	movs	r3, #130	; 0x82
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	429a      	cmp	r2, r3
 800609c:	d10c      	bne.n	80060b8 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	225d      	movs	r2, #93	; 0x5d
 80060a2:	2104      	movs	r1, #4
 80060a4:	5499      	strb	r1, [r3, r2]

    /* check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80060a6:	1dbb      	adds	r3, r7, #6
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 f906 	bl	80062c0 <HAL_SPI_TransmitReceive_DMA>
 80060b4:	0003      	movs	r3, r0
 80060b6:	e0f2      	b.n	800629e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	225c      	movs	r2, #92	; 0x5c
 80060bc:	5c9b      	ldrb	r3, [r3, r2]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_SPI_Receive_DMA+0x52>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e0eb      	b.n	800629e <HAL_SPI_Receive_DMA+0x22a>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	225c      	movs	r2, #92	; 0x5c
 80060ca:	2101      	movs	r1, #1
 80060cc:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	225d      	movs	r2, #93	; 0x5d
 80060d2:	5c9b      	ldrb	r3, [r3, r2]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d004      	beq.n	80060e4 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80060da:	2317      	movs	r3, #23
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	2202      	movs	r2, #2
 80060e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80060e2:	e0d5      	b.n	8006290 <HAL_SPI_Receive_DMA+0x21c>
  }

  if ((pData == NULL) || (Size == 0U))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_SPI_Receive_DMA+0x7e>
 80060ea:	1dbb      	adds	r3, r7, #6
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d104      	bne.n	80060fc <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 80060f2:	2317      	movs	r3, #23
 80060f4:	18fb      	adds	r3, r7, r3
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80060fa:	e0c9      	b.n	8006290 <HAL_SPI_Receive_DMA+0x21c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	225d      	movs	r2, #93	; 0x5d
 8006100:	2104      	movs	r1, #4
 8006102:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	1dba      	adds	r2, r7, #6
 8006114:	2144      	movs	r1, #68	; 0x44
 8006116:	8812      	ldrh	r2, [r2, #0]
 8006118:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	1dba      	adds	r2, r7, #6
 800611e:	2146      	movs	r1, #70	; 0x46
 8006120:	8812      	ldrh	r2, [r2, #0]
 8006122:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	2380      	movs	r3, #128	; 0x80
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	429a      	cmp	r2, r3
 8006146:	d107      	bne.n	8006158 <HAL_SPI_Receive_DMA+0xe4>
  {
    SPI_1LINE_RX(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	4955      	ldr	r1, [pc, #340]	; (80062a8 <HAL_SPI_Receive_DMA+0x234>)
 8006154:	400a      	ands	r2, r1
 8006156:	601a      	str	r2, [r3, #0]
    errorcode = HAL_ERROR;
    goto error;
  }
#endif

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	6852      	ldr	r2, [r2, #4]
 8006162:	4952      	ldr	r1, [pc, #328]	; (80062ac <HAL_SPI_Receive_DMA+0x238>)
 8006164:	400a      	ands	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	23e0      	movs	r3, #224	; 0xe0
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	429a      	cmp	r2, r3
 8006172:	d908      	bls.n	8006186 <HAL_SPI_Receive_DMA+0x112>
  {
    /* Set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	6852      	ldr	r2, [r2, #4]
 800617e:	494c      	ldr	r1, [pc, #304]	; (80062b0 <HAL_SPI_Receive_DMA+0x23c>)
 8006180:	400a      	ands	r2, r1
 8006182:	605a      	str	r2, [r3, #4]
 8006184:	e045      	b.n	8006212 <HAL_SPI_Receive_DMA+0x19e>
  }
  else
  {
    /* Set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	6852      	ldr	r2, [r2, #4]
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	0149      	lsls	r1, r1, #5
 8006194:	430a      	orrs	r2, r1
 8006196:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d135      	bne.n	8006212 <HAL_SPI_Receive_DMA+0x19e>
    {
      /* set fiforxthresold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	6852      	ldr	r2, [r2, #4]
 80061b0:	493f      	ldr	r1, [pc, #252]	; (80062b0 <HAL_SPI_Receive_DMA+0x23c>)
 80061b2:	400a      	ands	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2246      	movs	r2, #70	; 0x46
 80061ba:	5a9b      	ldrh	r3, [r3, r2]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	001a      	movs	r2, r3
 80061c0:	2301      	movs	r3, #1
 80061c2:	4013      	ands	r3, r2
 80061c4:	d111      	bne.n	80061ea <HAL_SPI_Receive_DMA+0x176>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	6852      	ldr	r2, [r2, #4]
 80061d0:	4936      	ldr	r1, [pc, #216]	; (80062ac <HAL_SPI_Receive_DMA+0x238>)
 80061d2:	400a      	ands	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2246      	movs	r2, #70	; 0x46
 80061da:	5a9b      	ldrh	r3, [r3, r2]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	b299      	uxth	r1, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2246      	movs	r2, #70	; 0x46
 80061e6:	5299      	strh	r1, [r3, r2]
 80061e8:	e013      	b.n	8006212 <HAL_SPI_Receive_DMA+0x19e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	6852      	ldr	r2, [r2, #4]
 80061f4:	2180      	movs	r1, #128	; 0x80
 80061f6:	0189      	lsls	r1, r1, #6
 80061f8:	430a      	orrs	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2246      	movs	r2, #70	; 0x46
 8006200:	5a9b      	ldrh	r3, [r3, r2]
 8006202:	b29b      	uxth	r3, r3
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	b29b      	uxth	r3, r3
 8006208:	3301      	adds	r3, #1
 800620a:	b299      	uxth	r1, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2246      	movs	r2, #70	; 0x46
 8006210:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006216:	4a27      	ldr	r2, [pc, #156]	; (80062b4 <HAL_SPI_Receive_DMA+0x240>)
 8006218:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621e:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <HAL_SPI_Receive_DMA+0x244>)
 8006220:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006226:	4a25      	ldr	r2, [pc, #148]	; (80062bc <HAL_SPI_Receive_DMA+0x248>)
 8006228:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622e:	2200      	movs	r2, #0
 8006230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	0019      	movs	r1, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	001c      	movs	r4, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2246      	movs	r2, #70	; 0x46
 8006248:	5a9b      	ldrh	r3, [r3, r2]
 800624a:	b29b      	uxth	r3, r3
 800624c:	0022      	movs	r2, r4
 800624e:	f7fa fb5b 	bl	8000908 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2240      	movs	r2, #64	; 0x40
 800625a:	4013      	ands	r3, r2
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d007      	beq.n	8006270 <HAL_SPI_Receive_DMA+0x1fc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	2140      	movs	r1, #64	; 0x40
 800626c:	430a      	orrs	r2, r1
 800626e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	6812      	ldr	r2, [r2, #0]
 8006278:	6852      	ldr	r2, [r2, #4]
 800627a:	2120      	movs	r1, #32
 800627c:	430a      	orrs	r2, r1
 800627e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	6852      	ldr	r2, [r2, #4]
 800628a:	2101      	movs	r1, #1
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	225c      	movs	r2, #92	; 0x5c
 8006294:	2100      	movs	r1, #0
 8006296:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006298:	2317      	movs	r3, #23
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	781b      	ldrb	r3, [r3, #0]
}
 800629e:	0018      	movs	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b007      	add	sp, #28
 80062a4:	bd90      	pop	{r4, r7, pc}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	ffffbfff 	.word	0xffffbfff
 80062ac:	ffffdfff 	.word	0xffffdfff
 80062b0:	ffffefff 	.word	0xffffefff
 80062b4:	08006f8b 	.word	0x08006f8b
 80062b8:	08006e45 	.word	0x08006e45
 80062bc:	08006fc7 	.word	0x08006fc7

080062c0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b089      	sub	sp, #36	; 0x24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	001a      	movs	r2, r3
 80062ce:	1cbb      	adds	r3, r7, #2
 80062d0:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062da:	231f      	movs	r3, #31
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	225c      	movs	r2, #92	; 0x5c
 80062e6:	5c9b      	ldrb	r3, [r3, r2]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_SPI_TransmitReceive_DMA+0x30>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e160      	b.n	80065b2 <HAL_SPI_TransmitReceive_DMA+0x2f2>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	225c      	movs	r2, #92	; 0x5c
 80062f4:	2101      	movs	r1, #1
 80062f6:	5499      	strb	r1, [r3, r2]

  tmp  = hspi->State;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	225d      	movs	r2, #93	; 0x5d
 80062fc:	5c9b      	ldrb	r3, [r3, r2]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	61bb      	str	r3, [r7, #24]
  tmp1 = hspi->Init.Mode;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	617b      	str	r3, [r7, #20]
  if (!((tmp == HAL_SPI_STATE_READY) ||
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d010      	beq.n	8006330 <HAL_SPI_TransmitReceive_DMA+0x70>
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	2382      	movs	r3, #130	; 0x82
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	429a      	cmp	r2, r3
 8006316:	d106      	bne.n	8006326 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <HAL_SPI_TransmitReceive_DMA+0x66>
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b04      	cmp	r3, #4
 8006324:	d004      	beq.n	8006330 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8006326:	231f      	movs	r3, #31
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	2202      	movs	r2, #2
 800632c:	701a      	strb	r2, [r3, #0]
    goto error;
 800632e:	e139      	b.n	80065a4 <HAL_SPI_TransmitReceive_DMA+0x2e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d006      	beq.n	8006344 <HAL_SPI_TransmitReceive_DMA+0x84>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_SPI_TransmitReceive_DMA+0x84>
 800633c:	1cbb      	adds	r3, r7, #2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8006344:	231f      	movs	r3, #31
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	2201      	movs	r2, #1
 800634a:	701a      	strb	r2, [r3, #0]
    goto error;
 800634c:	e12a      	b.n	80065a4 <HAL_SPI_TransmitReceive_DMA+0x2e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	225d      	movs	r2, #93	; 0x5d
 8006352:	5c9b      	ldrb	r3, [r3, r2]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b04      	cmp	r3, #4
 8006358:	d003      	beq.n	8006362 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	225d      	movs	r2, #93	; 0x5d
 800635e:	2105      	movs	r1, #5
 8006360:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1cba      	adds	r2, r7, #2
 8006372:	8812      	ldrh	r2, [r2, #0]
 8006374:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	1cba      	adds	r2, r7, #2
 800637a:	8812      	ldrh	r2, [r2, #0]
 800637c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	1cba      	adds	r2, r7, #2
 8006388:	2144      	movs	r1, #68	; 0x44
 800638a:	8812      	ldrh	r2, [r2, #0]
 800638c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1cba      	adds	r2, r7, #2
 8006392:	2146      	movs	r1, #70	; 0x46
 8006394:	8812      	ldrh	r2, [r2, #0]
 8006396:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
#endif


  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	6852      	ldr	r2, [r2, #4]
 80063ae:	4983      	ldr	r1, [pc, #524]	; (80065bc <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80063b0:	400a      	ands	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	23e0      	movs	r3, #224	; 0xe0
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	429a      	cmp	r2, r3
 80063be:	d908      	bls.n	80063d2 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	6852      	ldr	r2, [r2, #4]
 80063ca:	497d      	ldr	r1, [pc, #500]	; (80065c0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 80063cc:	400a      	ands	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
 80063d0:	e074      	b.n	80064bc <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	6852      	ldr	r2, [r2, #4]
 80063dc:	2180      	movs	r1, #128	; 0x80
 80063de:	0149      	lsls	r1, r1, #5
 80063e0:	430a      	orrs	r2, r1
 80063e2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e8:	695a      	ldr	r2, [r3, #20]
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d127      	bne.n	8006442 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80063f6:	001a      	movs	r2, r3
 80063f8:	2301      	movs	r3, #1
 80063fa:	4013      	ands	r3, r2
 80063fc:	d10f      	bne.n	800641e <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	6852      	ldr	r2, [r2, #4]
 8006408:	496e      	ldr	r1, [pc, #440]	; (80065c4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800640a:	400a      	ands	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006412:	b29b      	uxth	r3, r3
 8006414:	085b      	lsrs	r3, r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800641c:	e011      	b.n	8006442 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	6852      	ldr	r2, [r2, #4]
 8006428:	2180      	movs	r1, #128	; 0x80
 800642a:	01c9      	lsls	r1, r1, #7
 800642c:	430a      	orrs	r2, r1
 800642e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006434:	b29b      	uxth	r3, r3
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	b29b      	uxth	r3, r3
 800643a:	3301      	adds	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	2380      	movs	r3, #128	; 0x80
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	429a      	cmp	r2, r3
 800644e:	d135      	bne.n	80064bc <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set fiforxthresold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	6852      	ldr	r2, [r2, #4]
 800645a:	4959      	ldr	r1, [pc, #356]	; (80065c0 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800645c:	400a      	ands	r2, r1
 800645e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2246      	movs	r2, #70	; 0x46
 8006464:	5a9b      	ldrh	r3, [r3, r2]
 8006466:	b29b      	uxth	r3, r3
 8006468:	001a      	movs	r2, r3
 800646a:	2301      	movs	r3, #1
 800646c:	4013      	ands	r3, r2
 800646e:	d111      	bne.n	8006494 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	6852      	ldr	r2, [r2, #4]
 800647a:	4953      	ldr	r1, [pc, #332]	; (80065c8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800647c:	400a      	ands	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2246      	movs	r2, #70	; 0x46
 8006484:	5a9b      	ldrh	r3, [r3, r2]
 8006486:	b29b      	uxth	r3, r3
 8006488:	085b      	lsrs	r3, r3, #1
 800648a:	b299      	uxth	r1, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2246      	movs	r2, #70	; 0x46
 8006490:	5299      	strh	r1, [r3, r2]
 8006492:	e013      	b.n	80064bc <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	6852      	ldr	r2, [r2, #4]
 800649e:	2180      	movs	r1, #128	; 0x80
 80064a0:	0189      	lsls	r1, r1, #6
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2246      	movs	r2, #70	; 0x46
 80064aa:	5a9b      	ldrh	r3, [r3, r2]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3301      	adds	r3, #1
 80064b4:	b299      	uxth	r1, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2246      	movs	r2, #70	; 0x46
 80064ba:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	225d      	movs	r2, #93	; 0x5d
 80064c0:	5c9b      	ldrb	r3, [r3, r2]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d108      	bne.n	80064da <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064cc:	4a3f      	ldr	r2, [pc, #252]	; (80065cc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80064ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d4:	4a3e      	ldr	r2, [pc, #248]	; (80065d0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28
 80064d8:	e007      	b.n	80064ea <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064de:	4a3d      	ldr	r2, [pc, #244]	; (80065d4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80064e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e6:	4a3c      	ldr	r2, [pc, #240]	; (80065d8 <HAL_SPI_TransmitReceive_DMA+0x318>)
 80064e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	4a3b      	ldr	r2, [pc, #236]	; (80065dc <HAL_SPI_TransmitReceive_DMA+0x31c>)
 80064f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	2200      	movs	r2, #0
 80064f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	0019      	movs	r1, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	001c      	movs	r4, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2246      	movs	r2, #70	; 0x46
 8006510:	5a9b      	ldrh	r3, [r3, r2]
 8006512:	b29b      	uxth	r3, r3
 8006514:	0022      	movs	r2, r4
 8006516:	f7fa f9f7 	bl	8000908 <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	6852      	ldr	r2, [r2, #4]
 8006524:	2101      	movs	r1, #1
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652e:	2200      	movs	r2, #0
 8006530:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	2200      	movs	r2, #0
 8006538:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	2200      	movs	r2, #0
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006546:	2200      	movs	r2, #0
 8006548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	0019      	movs	r1, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	001a      	movs	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006560:	b29b      	uxth	r3, r3
 8006562:	f7fa f9d1 	bl	8000908 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2240      	movs	r2, #64	; 0x40
 800656e:	4013      	ands	r3, r2
 8006570:	2b40      	cmp	r3, #64	; 0x40
 8006572:	d007      	beq.n	8006584 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	2140      	movs	r1, #64	; 0x40
 8006580:	430a      	orrs	r2, r1
 8006582:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	6852      	ldr	r2, [r2, #4]
 800658e:	2120      	movs	r1, #32
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	6852      	ldr	r2, [r2, #4]
 800659e:	2102      	movs	r1, #2
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	225c      	movs	r2, #92	; 0x5c
 80065a8:	2100      	movs	r1, #0
 80065aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80065ac:	231f      	movs	r3, #31
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	781b      	ldrb	r3, [r3, #0]
}
 80065b2:	0018      	movs	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b009      	add	sp, #36	; 0x24
 80065b8:	bd90      	pop	{r4, r7, pc}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	ffff9fff 	.word	0xffff9fff
 80065c0:	ffffefff 	.word	0xffffefff
 80065c4:	ffffbfff 	.word	0xffffbfff
 80065c8:	ffffdfff 	.word	0xffffdfff
 80065cc:	08006f8b 	.word	0x08006f8b
 80065d0:	08006e45 	.word	0x08006e45
 80065d4:	08006fa9 	.word	0x08006fa9
 80065d8:	08006ed3 	.word	0x08006ed3
 80065dc:	08006fc7 	.word	0x08006fc7

080065e0 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count, resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80065e8:	231f      	movs	r3, #31
 80065ea:	18fb      	adds	r3, r7, r3
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80065f0:	4b85      	ldr	r3, [pc, #532]	; (8006808 <HAL_SPI_Abort+0x228>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4985      	ldr	r1, [pc, #532]	; (800680c <HAL_SPI_Abort+0x22c>)
 80065f6:	0018      	movs	r0, r3
 80065f8:	f009 fdbc 	bl	8010174 <__udivsi3>
 80065fc:	0003      	movs	r3, r0
 80065fe:	001a      	movs	r2, r3
 8006600:	2364      	movs	r3, #100	; 0x64
 8006602:	4353      	muls	r3, r2
 8006604:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	61bb      	str	r3, [r7, #24]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2280      	movs	r2, #128	; 0x80
 8006612:	4013      	ands	r3, r2
 8006614:	d016      	beq.n	8006644 <HAL_SPI_Abort+0x64>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a7d      	ldr	r2, [pc, #500]	; (8006810 <HAL_SPI_Abort+0x230>)
 800661a:	651a      	str	r2, [r3, #80]	; 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count-- == 0U)
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	1e5a      	subs	r2, r3, #1
 8006620:	61ba      	str	r2, [r7, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_SPI_Abort+0x54>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	2240      	movs	r2, #64	; 0x40
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006632:	e005      	b.n	8006640 <HAL_SPI_Abort+0x60>
      }
    }
    while (hspi->State != HAL_SPI_STATE_ABORT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	225d      	movs	r2, #93	; 0x5d
 8006638:	5c9b      	ldrb	r3, [r3, r2]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b07      	cmp	r3, #7
 800663e:	d1ed      	bne.n	800661c <HAL_SPI_Abort+0x3c>
    /* Reset Timeout Counter */
    count = resetcount;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2240      	movs	r2, #64	; 0x40
 800664c:	4013      	ands	r3, r2
 800664e:	d016      	beq.n	800667e <HAL_SPI_Abort+0x9e>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a70      	ldr	r2, [pc, #448]	; (8006814 <HAL_SPI_Abort+0x234>)
 8006654:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count-- == 0U)
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	1e5a      	subs	r2, r3, #1
 800665a:	61ba      	str	r2, [r7, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d106      	bne.n	800666e <HAL_SPI_Abort+0x8e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006664:	2240      	movs	r2, #64	; 0x40
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800666c:	e005      	b.n	800667a <HAL_SPI_Abort+0x9a>
      }
    }
    while (hspi->State != HAL_SPI_STATE_ABORT);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	225d      	movs	r2, #93	; 0x5d
 8006672:	5c9b      	ldrb	r3, [r3, r2]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b07      	cmp	r3, #7
 8006678:	d1ed      	bne.n	8006656 <HAL_SPI_Abort+0x76>
    /* Reset Timeout Counter */
    count = resetcount;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear ERRIE interrupts in case of DMA Mode */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	6852      	ldr	r2, [r2, #4]
 8006688:	2120      	movs	r1, #32
 800668a:	438a      	bics	r2, r1
 800668c:	605a      	str	r2, [r3, #4]

  /* Disable the SPI DMA Tx or SPI DMA Rx request if enabled */
  if ((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN)))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	4013      	ands	r3, r2
 8006698:	d106      	bne.n	80066a8 <HAL_SPI_Abort+0xc8>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	4013      	ands	r3, r2
 80066a4:	d100      	bne.n	80066a8 <HAL_SPI_Abort+0xc8>
 80066a6:	e07f      	b.n	80067a8 <HAL_SPI_Abort+0x1c8>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d03a      	beq.n	8006726 <HAL_SPI_Abort+0x146>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b4:	2200      	movs	r2, #0
 80066b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066bc:	0018      	movs	r0, r3
 80066be:	f7fa f989 	bl	80009d4 <HAL_DMA_Abort>
 80066c2:	1e03      	subs	r3, r0, #0
 80066c4:	d002      	beq.n	80066cc <HAL_SPI_Abort+0xec>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2240      	movs	r2, #64	; 0x40
 80066ca:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	6852      	ldr	r2, [r2, #4]
 80066d6:	2102      	movs	r1, #2
 80066d8:	438a      	bics	r2, r1
 80066da:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80066dc:	f7f9 fd7a 	bl	80001d4 <HAL_GetTick>
 80066e0:	0002      	movs	r2, r0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2164      	movs	r1, #100	; 0x64
 80066e6:	0018      	movs	r0, r3
 80066e8:	f001 f86a 	bl	80077c0 <SPI_EndRxTxTransaction>
 80066ec:	1e03      	subs	r3, r0, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_SPI_Abort+0x116>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2240      	movs	r2, #64	; 0x40
 80066f4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	6812      	ldr	r2, [r2, #0]
 8006700:	2140      	movs	r1, #64	; 0x40
 8006702:	438a      	bics	r2, r1
 8006704:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006706:	f7f9 fd65 	bl	80001d4 <HAL_GetTick>
 800670a:	0002      	movs	r2, r0
 800670c:	23c0      	movs	r3, #192	; 0xc0
 800670e:	00d9      	lsls	r1, r3, #3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	9200      	str	r2, [sp, #0]
 8006714:	2364      	movs	r3, #100	; 0x64
 8006716:	2200      	movs	r2, #0
 8006718:	f000 ff78 	bl	800760c <SPI_WaitFifoStateUntilTimeout>
 800671c:	1e03      	subs	r3, r0, #0
 800671e:	d002      	beq.n	8006726 <HAL_SPI_Abort+0x146>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2240      	movs	r2, #64	; 0x40
 8006724:	661a      	str	r2, [r3, #96]	; 0x60
      }
    }
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672a:	2b00      	cmp	r3, #0
 800672c:	d03c      	beq.n	80067a8 <HAL_SPI_Abort+0x1c8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006732:	2200      	movs	r2, #0
 8006734:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673a:	0018      	movs	r0, r3
 800673c:	f7fa f94a 	bl	80009d4 <HAL_DMA_Abort>
 8006740:	1e03      	subs	r3, r0, #0
 8006742:	d002      	beq.n	800674a <HAL_SPI_Abort+0x16a>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2240      	movs	r2, #64	; 0x40
 8006748:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	2140      	movs	r1, #64	; 0x40
 8006756:	438a      	bics	r2, r1
 8006758:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800675a:	f7f9 fd3b 	bl	80001d4 <HAL_GetTick>
 800675e:	0003      	movs	r3, r0
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	2364      	movs	r3, #100	; 0x64
 8006766:	2200      	movs	r2, #0
 8006768:	2180      	movs	r1, #128	; 0x80
 800676a:	f000 fee0 	bl	800752e <SPI_WaitFlagStateUntilTimeout>
 800676e:	1e03      	subs	r3, r0, #0
 8006770:	d002      	beq.n	8006778 <HAL_SPI_Abort+0x198>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2240      	movs	r2, #64	; 0x40
 8006776:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006778:	f7f9 fd2c 	bl	80001d4 <HAL_GetTick>
 800677c:	0002      	movs	r2, r0
 800677e:	23c0      	movs	r3, #192	; 0xc0
 8006780:	00d9      	lsls	r1, r3, #3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	9200      	str	r2, [sp, #0]
 8006786:	2364      	movs	r3, #100	; 0x64
 8006788:	2200      	movs	r2, #0
 800678a:	f000 ff3f 	bl	800760c <SPI_WaitFifoStateUntilTimeout>
 800678e:	1e03      	subs	r3, r0, #0
 8006790:	d002      	beq.n	8006798 <HAL_SPI_Abort+0x1b8>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2240      	movs	r2, #64	; 0x40
 8006796:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6812      	ldr	r2, [r2, #0]
 80067a0:	6852      	ldr	r2, [r2, #4]
 80067a2:	2101      	movs	r1, #1
 80067a4:	438a      	bics	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2246      	movs	r2, #70	; 0x46
 80067ac:	2100      	movs	r1, #0
 80067ae:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	d104      	bne.n	80067c8 <HAL_SPI_Abort+0x1e8>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80067be:	231f      	movs	r3, #31
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	e002      	b.n	80067ce <HAL_SPI_Abort+0x1ee>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ce:	2300      	movs	r3, #0
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	225d      	movs	r2, #93	; 0x5d
 80067f6:	2101      	movs	r1, #1
 80067f8:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80067fa:	231f      	movs	r3, #31
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	781b      	ldrb	r3, [r3, #0]
}
 8006800:	0018      	movs	r0, r3
 8006802:	46bd      	mov	sp, r7
 8006804:	b008      	add	sp, #32
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000110 	.word	0x20000110
 800680c:	00005dc0 	.word	0x00005dc0
 8006810:	08007a81 	.word	0x08007a81
 8006814:	080079c7 	.word	0x080079c7

08006818 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  uint32_t abortcplt ;
  __IO uint32_t count, resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8006820:	231f      	movs	r3, #31
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
  abortcplt = 1U;
 8006828:	2301      	movs	r3, #1
 800682a:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800682c:	4b8c      	ldr	r3, [pc, #560]	; (8006a60 <HAL_SPI_Abort_IT+0x248>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	498c      	ldr	r1, [pc, #560]	; (8006a64 <HAL_SPI_Abort_IT+0x24c>)
 8006832:	0018      	movs	r0, r3
 8006834:	f009 fc9e 	bl	8010174 <__udivsi3>
 8006838:	0003      	movs	r3, r0
 800683a:	001a      	movs	r2, r3
 800683c:	2364      	movs	r3, #100	; 0x64
 800683e:	4353      	muls	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	617b      	str	r3, [r7, #20]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2280      	movs	r2, #128	; 0x80
 800684e:	4013      	ands	r3, r2
 8006850:	d016      	beq.n	8006880 <HAL_SPI_Abort_IT+0x68>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a84      	ldr	r2, [pc, #528]	; (8006a68 <HAL_SPI_Abort_IT+0x250>)
 8006856:	651a      	str	r2, [r3, #80]	; 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count-- == 0U)
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	1e5a      	subs	r2, r3, #1
 800685c:	617a      	str	r2, [r7, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_SPI_Abort_IT+0x58>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006866:	2240      	movs	r2, #64	; 0x40
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800686e:	e005      	b.n	800687c <HAL_SPI_Abort_IT+0x64>
      }
    }
    while (hspi->State != HAL_SPI_STATE_ABORT);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	225d      	movs	r2, #93	; 0x5d
 8006874:	5c9b      	ldrb	r3, [r3, r2]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b07      	cmp	r3, #7
 800687a:	d1ed      	bne.n	8006858 <HAL_SPI_Abort_IT+0x40>
    /* Reset Timeout Counter */
    count = resetcount;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2240      	movs	r2, #64	; 0x40
 8006888:	4013      	ands	r3, r2
 800688a:	d016      	beq.n	80068ba <HAL_SPI_Abort_IT+0xa2>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a77      	ldr	r2, [pc, #476]	; (8006a6c <HAL_SPI_Abort_IT+0x254>)
 8006890:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count-- == 0U)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	1e5a      	subs	r2, r3, #1
 8006896:	617a      	str	r2, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <HAL_SPI_Abort_IT+0x92>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a0:	2240      	movs	r2, #64	; 0x40
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80068a8:	e005      	b.n	80068b6 <HAL_SPI_Abort_IT+0x9e>
      }
    }
    while (hspi->State != HAL_SPI_STATE_ABORT);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	225d      	movs	r2, #93	; 0x5d
 80068ae:	5c9b      	ldrb	r3, [r3, r2]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b07      	cmp	r3, #7
 80068b4:	d1ed      	bne.n	8006892 <HAL_SPI_Abort_IT+0x7a>
    /* Reset Timeout Counter */
    count = resetcount;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	617b      	str	r3, [r7, #20]
  }

  /* Clear ERRIE interrupts in case of DMA Mode */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	6852      	ldr	r2, [r2, #4]
 80068c4:	2120      	movs	r1, #32
 80068c6:	438a      	bics	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <HAL_SPI_Abort_IT+0xd8>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	4013      	ands	r3, r2
 80068dc:	d004      	beq.n	80068e8 <HAL_SPI_Abort_IT+0xd0>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e2:	4a63      	ldr	r2, [pc, #396]	; (8006a70 <HAL_SPI_Abort_IT+0x258>)
 80068e4:	635a      	str	r2, [r3, #52]	; 0x34
 80068e6:	e003      	b.n	80068f0 <HAL_SPI_Abort_IT+0xd8>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ec:	2200      	movs	r2, #0
 80068ee:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00e      	beq.n	8006916 <HAL_SPI_Abort_IT+0xfe>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	4013      	ands	r3, r2
 8006902:	d004      	beq.n	800690e <HAL_SPI_Abort_IT+0xf6>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006908:	4a5a      	ldr	r2, [pc, #360]	; (8006a74 <HAL_SPI_Abort_IT+0x25c>)
 800690a:	635a      	str	r2, [r3, #52]	; 0x34
 800690c:	e003      	b.n	8006916 <HAL_SPI_Abort_IT+0xfe>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006912:	2200      	movs	r2, #0
 8006914:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
  if ((HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN)) && (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN)))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	4013      	ands	r3, r2
 8006920:	d031      	beq.n	8006986 <HAL_SPI_Abort_IT+0x16e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	4013      	ands	r3, r2
 800692c:	d02b      	beq.n	8006986 <HAL_SPI_Abort_IT+0x16e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006932:	2b00      	cmp	r3, #0
 8006934:	d010      	beq.n	8006958 <HAL_SPI_Abort_IT+0x140>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	0018      	movs	r0, r3
 800693c:	f7fa f873 	bl	8000a26 <HAL_DMA_Abort_IT>
 8006940:	1e03      	subs	r3, r0, #0
 8006942:	d007      	beq.n	8006954 <HAL_SPI_Abort_IT+0x13c>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	2200      	movs	r2, #0
 800694a:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2240      	movs	r2, #64	; 0x40
 8006950:	661a      	str	r2, [r3, #96]	; 0x60
 8006952:	e001      	b.n	8006958 <HAL_SPI_Abort_IT+0x140>
      }
      else
      {
        abortcplt = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	61bb      	str	r3, [r7, #24]
      }
    }
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695c:	2b00      	cmp	r3, #0
 800695e:	d012      	beq.n	8006986 <HAL_SPI_Abort_IT+0x16e>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006964:	0018      	movs	r0, r3
 8006966:	f7fa f85e 	bl	8000a26 <HAL_DMA_Abort_IT>
 800696a:	1e03      	subs	r3, r0, #0
 800696c:	d009      	beq.n	8006982 <HAL_SPI_Abort_IT+0x16a>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006972:	2200      	movs	r2, #0
 8006974:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2240      	movs	r2, #64	; 0x40
 800697a:	661a      	str	r2, [r3, #96]	; 0x60
        abortcplt = 1U;
 800697c:	2301      	movs	r3, #1
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	e001      	b.n	8006986 <HAL_SPI_Abort_IT+0x16e>
      }
      else
      {
        abortcplt = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	4013      	ands	r3, r2
 8006990:	d014      	beq.n	80069bc <HAL_SPI_Abort_IT+0x1a4>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006996:	2b00      	cmp	r3, #0
 8006998:	d010      	beq.n	80069bc <HAL_SPI_Abort_IT+0x1a4>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699e:	0018      	movs	r0, r3
 80069a0:	f7fa f841 	bl	8000a26 <HAL_DMA_Abort_IT>
 80069a4:	1e03      	subs	r3, r0, #0
 80069a6:	d007      	beq.n	80069b8 <HAL_SPI_Abort_IT+0x1a0>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ac:	2200      	movs	r2, #0
 80069ae:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2240      	movs	r2, #64	; 0x40
 80069b4:	661a      	str	r2, [r3, #96]	; 0x60
 80069b6:	e001      	b.n	80069bc <HAL_SPI_Abort_IT+0x1a4>
      }
      else
      {
        abortcplt = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Tx or the SPI Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	4013      	ands	r3, r2
 80069c6:	d014      	beq.n	80069f2 <HAL_SPI_Abort_IT+0x1da>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d010      	beq.n	80069f2 <HAL_SPI_Abort_IT+0x1da>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7fa f826 	bl	8000a26 <HAL_DMA_Abort_IT>
 80069da:	1e03      	subs	r3, r0, #0
 80069dc:	d007      	beq.n	80069ee <HAL_SPI_Abort_IT+0x1d6>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e2:	2200      	movs	r2, #0
 80069e4:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2240      	movs	r2, #64	; 0x40
 80069ea:	661a      	str	r2, [r3, #96]	; 0x60
 80069ec:	e001      	b.n	80069f2 <HAL_SPI_Abort_IT+0x1da>
      }
      else
      {
        abortcplt = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d12c      	bne.n	8006a52 <HAL_SPI_Abort_IT+0x23a>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2246      	movs	r2, #70	; 0x46
 80069fc:	2100      	movs	r1, #0
 80069fe:	5299      	strh	r1, [r3, r2]
    hspi->TxXferCount = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0a:	2b40      	cmp	r3, #64	; 0x40
 8006a0c:	d104      	bne.n	8006a18 <HAL_SPI_Abort_IT+0x200>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8006a0e:	231f      	movs	r3, #31
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	2201      	movs	r2, #1
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e002      	b.n	8006a1e <HAL_SPI_Abort_IT+0x206>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a34:	2300      	movs	r3, #0
 8006a36:	60bb      	str	r3, [r7, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	60bb      	str	r3, [r7, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	225d      	movs	r2, #93	; 0x5d
 8006a46:	2101      	movs	r1, #1
 8006a48:	5499      	strb	r1, [r3, r2]

    /* As no DMA to be aborted, call directly user Abort complete callback */
    HAL_SPI_AbortCpltCallback(hspi);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f000 f983 	bl	8006d58 <HAL_SPI_AbortCpltCallback>
  }

  return errorcode;
 8006a52:	231f      	movs	r3, #31
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	781b      	ldrb	r3, [r3, #0]
}
 8006a58:	0018      	movs	r0, r3
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b008      	add	sp, #32
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000110 	.word	0x20000110
 8006a64:	00005dc0 	.word	0x00005dc0
 8006a68:	08007a81 	.word	0x08007a81
 8006a6c:	080079c7 	.word	0x080079c7
 8006a70:	08007035 	.word	0x08007035
 8006a74:	08007111 	.word	0x08007111

08006a78 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	225c      	movs	r2, #92	; 0x5c
 8006a84:	5c9b      	ldrb	r3, [r3, r2]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_SPI_DMAPause+0x16>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e010      	b.n	8006ab0 <HAL_SPI_DMAPause+0x38>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	225c      	movs	r2, #92	; 0x5c
 8006a92:	2101      	movs	r1, #1
 8006a94:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6812      	ldr	r2, [r2, #0]
 8006a9e:	6852      	ldr	r2, [r2, #4]
 8006aa0:	2103      	movs	r1, #3
 8006aa2:	438a      	bics	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	225c      	movs	r2, #92	; 0x5c
 8006aaa:	2100      	movs	r1, #0
 8006aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b002      	add	sp, #8
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	225c      	movs	r2, #92	; 0x5c
 8006ac4:	5c9b      	ldrb	r3, [r3, r2]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_SPI_DMAResume+0x16>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e010      	b.n	8006af0 <HAL_SPI_DMAResume+0x38>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	225c      	movs	r2, #92	; 0x5c
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	5499      	strb	r1, [r3, r2]

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	6852      	ldr	r2, [r2, #4]
 8006ae0:	2103      	movs	r1, #3
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	225c      	movs	r2, #92	; 0x5c
 8006aea:	2100      	movs	r1, #0
 8006aec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	0018      	movs	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b002      	add	sp, #8
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d004      	beq.n	8006b12 <HAL_SPI_DMAStop+0x1a>
  {
    HAL_DMA_Abort(hspi->hdmatx);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7f9 ff61 	bl	80009d4 <HAL_DMA_Abort>
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d004      	beq.n	8006b24 <HAL_SPI_DMAStop+0x2c>
  {
    HAL_DMA_Abort(hspi->hdmarx);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7f9 ff58 	bl	80009d4 <HAL_DMA_Abort>
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6812      	ldr	r2, [r2, #0]
 8006b2c:	6852      	ldr	r2, [r2, #4]
 8006b2e:	2103      	movs	r1, #3
 8006b30:	438a      	bics	r2, r1
 8006b32:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	225d      	movs	r2, #93	; 0x5d
 8006b38:	2101      	movs	r1, #1
 8006b3a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	0018      	movs	r0, r3
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b002      	add	sp, #8
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b088      	sub	sp, #32
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2240      	movs	r2, #64	; 0x40
 8006b62:	4013      	ands	r3, r2
 8006b64:	d10d      	bne.n	8006b82 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	4013      	ands	r3, r2
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8006b6c:	d009      	beq.n	8006b82 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	2240      	movs	r2, #64	; 0x40
 8006b72:	4013      	ands	r3, r2
 8006b74:	d005      	beq.n	8006b82 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	0010      	movs	r0, r2
 8006b7e:	4798      	blx	r3
    return;
 8006b80:	e0ac      	b.n	8006cdc <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2202      	movs	r2, #2
 8006b86:	4013      	ands	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_SPI_IRQHandler+0x58>
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	2280      	movs	r2, #128	; 0x80
 8006b8e:	4013      	ands	r3, r2
 8006b90:	d005      	beq.n	8006b9e <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	0010      	movs	r0, r2
 8006b9a:	4798      	blx	r3
    return;
 8006b9c:	e09e      	b.n	8006cdc <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	23b0      	movs	r3, #176	; 0xb0
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d100      	bne.n	8006baa <HAL_SPI_IRQHandler+0x64>
 8006ba8:	e098      	b.n	8006cdc <HAL_SPI_IRQHandler+0x196>
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2220      	movs	r2, #32
 8006bae:	4013      	ands	r3, r2
 8006bb0:	d100      	bne.n	8006bb4 <HAL_SPI_IRQHandler+0x6e>
 8006bb2:	e093      	b.n	8006cdc <HAL_SPI_IRQHandler+0x196>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2240      	movs	r2, #64	; 0x40
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d023      	beq.n	8006c04 <HAL_SPI_IRQHandler+0xbe>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	225d      	movs	r2, #93	; 0x5d
 8006bc0:	5c9b      	ldrb	r3, [r3, r2]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d011      	beq.n	8006bec <HAL_SPI_IRQHandler+0xa6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bcc:	2204      	movs	r2, #4
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	e00b      	b.n	8006c04 <HAL_SPI_IRQHandler+0xbe>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	693b      	ldr	r3, [r7, #16]
        return;
 8006c02:	e06b      	b.n	8006cdc <HAL_SPI_IRQHandler+0x196>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2220      	movs	r2, #32
 8006c08:	4013      	ands	r3, r2
 8006c0a:	d014      	beq.n	8006c36 <HAL_SPI_IRQHandler+0xf0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c10:	2201      	movs	r2, #1
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	2140      	movs	r1, #64	; 0x40
 8006c30:	438a      	bics	r2, r1
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	d00c      	beq.n	8006c5a <HAL_SPI_IRQHandler+0x114>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c44:	2208      	movs	r2, #8
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d03b      	beq.n	8006cda <HAL_SPI_IRQHandler+0x194>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6812      	ldr	r2, [r2, #0]
 8006c6a:	6852      	ldr	r2, [r2, #4]
 8006c6c:	21e0      	movs	r1, #224	; 0xe0
 8006c6e:	438a      	bics	r2, r1
 8006c70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	225d      	movs	r2, #93	; 0x5d
 8006c76:	2101      	movs	r1, #1
 8006c78:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d103      	bne.n	8006c8a <HAL_SPI_IRQHandler+0x144>
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	2201      	movs	r2, #1
 8006c86:	4013      	ands	r3, r2
 8006c88:	d022      	beq.n	8006cd0 <HAL_SPI_IRQHandler+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6812      	ldr	r2, [r2, #0]
 8006c92:	6852      	ldr	r2, [r2, #4]
 8006c94:	2103      	movs	r1, #3
 8006c96:	438a      	bics	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <HAL_SPI_IRQHandler+0x16e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca6:	4a0f      	ldr	r2, [pc, #60]	; (8006ce4 <HAL_SPI_IRQHandler+0x19e>)
 8006ca8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f7f9 feb9 	bl	8000a26 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00d      	beq.n	8006cd8 <HAL_SPI_IRQHandler+0x192>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc0:	4a08      	ldr	r2, [pc, #32]	; (8006ce4 <HAL_SPI_IRQHandler+0x19e>)
 8006cc2:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f7f9 feac 	bl	8000a26 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8006cce:	e003      	b.n	8006cd8 <HAL_SPI_IRQHandler+0x192>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f000 f838 	bl	8006d48 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8006cd8:	46c0      	nop			; (mov r8, r8)
 8006cda:	46c0      	nop			; (mov r8, r8)
  }
}
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	b008      	add	sp, #32
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	08007009 	.word	0x08007009

08006ce8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006cf0:	46c0      	nop			; (mov r8, r8)
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006d00:	46c0      	nop			; (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b002      	add	sp, #8
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006d10:	46c0      	nop			; (mov r8, r8)
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b002      	add	sp, #8
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006d20:	46c0      	nop			; (mov r8, r8)
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b002      	add	sp, #8
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006d30:	46c0      	nop			; (mov r8, r8)
 8006d32:	46bd      	mov	sp, r7
 8006d34:	b002      	add	sp, #8
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006d40:	46c0      	nop			; (mov r8, r8)
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b002      	add	sp, #8
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d50:	46c0      	nop			; (mov r8, r8)
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b002      	add	sp, #8
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8006d60:	46c0      	nop			; (mov r8, r8)
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	225d      	movs	r2, #93	; 0x5d
 8006d74:	5c9b      	ldrb	r3, [r3, r2]
 8006d76:	b2db      	uxtb	r3, r3
}
 8006d78:	0018      	movs	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b002      	add	sp, #8
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b002      	add	sp, #8
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006da6:	f7f9 fa15 	bl	80001d4 <HAL_GetTick>
 8006daa:	0003      	movs	r3, r0
 8006dac:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2220      	movs	r2, #32
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b20      	cmp	r3, #32
 8006dba:	d03c      	beq.n	8006e36 <SPI_DMATransmitCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	6852      	ldr	r2, [r2, #4]
 8006dc6:	2120      	movs	r1, #32
 8006dc8:	438a      	bics	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	6812      	ldr	r2, [r2, #0]
 8006dd4:	6852      	ldr	r2, [r2, #4]
 8006dd6:	2102      	movs	r1, #2
 8006dd8:	438a      	bics	r2, r1
 8006dda:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2164      	movs	r1, #100	; 0x64
 8006de2:	0018      	movs	r0, r3
 8006de4:	f000 fcec 	bl	80077c0 <SPI_EndRxTxTransaction>
 8006de8:	1e03      	subs	r3, r0, #0
 8006dea:	d005      	beq.n	8006df8 <SPI_DMATransmitCplt+0x64>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df0:	2220      	movs	r2, #32
 8006df2:	431a      	orrs	r2, r3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <SPI_DMATransmitCplt+0x82>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	225d      	movs	r2, #93	; 0x5d
 8006e20:	2101      	movs	r1, #1
 8006e22:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <SPI_DMATransmitCplt+0xa2>
    {
      HAL_SPI_ErrorCallback(hspi);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f7ff ff8a 	bl	8006d48 <HAL_SPI_ErrorCallback>
      return;
 8006e34:	e003      	b.n	8006e3e <SPI_DMATransmitCplt+0xaa>
    }
  }
  HAL_SPI_TxCpltCallback(hspi);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f7ff ff55 	bl	8006ce8 <HAL_SPI_TxCpltCallback>
}
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b006      	add	sp, #24
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60bb      	str	r3, [r7, #8]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e56:	f7f9 f9bd 	bl	80001d4 <HAL_GetTick>
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2220      	movs	r2, #32
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d02b      	beq.n	8006ec4 <SPI_DMAReceiveCplt+0x80>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	6852      	ldr	r2, [r2, #4]
 8006e76:	2120      	movs	r1, #32
 8006e78:	438a      	bics	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	6852      	ldr	r2, [r2, #4]
 8006e86:	2103      	movs	r1, #3
 8006e88:	438a      	bics	r2, r1
 8006e8a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2164      	movs	r1, #100	; 0x64
 8006e92:	0018      	movs	r0, r3
 8006e94:	f000 fc36 	bl	8007704 <SPI_EndRxTransaction>
 8006e98:	1e03      	subs	r3, r0, #0
 8006e9a:	d002      	beq.n	8006ea2 <SPI_DMAReceiveCplt+0x5e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2246      	movs	r2, #70	; 0x46
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	225d      	movs	r2, #93	; 0x5d
 8006eae:	2101      	movs	r1, #1
 8006eb0:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <SPI_DMAReceiveCplt+0x80>
    {
      HAL_SPI_ErrorCallback(hspi);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f7ff ff43 	bl	8006d48 <HAL_SPI_ErrorCallback>
      return;
 8006ec2:	e003      	b.n	8006ecc <SPI_DMAReceiveCplt+0x88>
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f7ff ff16 	bl	8006cf8 <HAL_SPI_RxCpltCallback>
}
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b004      	add	sp, #16
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60bb      	str	r3, [r7, #8]
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ee4:	f7f9 f976 	bl	80001d4 <HAL_GetTick>
 8006ee8:	0003      	movs	r3, r0
 8006eea:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d031      	beq.n	8006f5e <SPI_DMATransmitReceiveCplt+0x8c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	6852      	ldr	r2, [r2, #4]
 8006f04:	2120      	movs	r1, #32
 8006f06:	438a      	bics	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2164      	movs	r1, #100	; 0x64
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 fc55 	bl	80077c0 <SPI_EndRxTxTransaction>
 8006f16:	1e03      	subs	r3, r0, #0
 8006f18:	d005      	beq.n	8006f26 <SPI_DMATransmitReceiveCplt+0x54>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1e:	2220      	movs	r2, #32
 8006f20:	431a      	orrs	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	6812      	ldr	r2, [r2, #0]
 8006f2e:	6852      	ldr	r2, [r2, #4]
 8006f30:	2103      	movs	r1, #3
 8006f32:	438a      	bics	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2246      	movs	r2, #70	; 0x46
 8006f40:	2100      	movs	r1, #0
 8006f42:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	225d      	movs	r2, #93	; 0x5d
 8006f48:	2101      	movs	r1, #1
 8006f4a:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <SPI_DMATransmitReceiveCplt+0x8c>
    {
      HAL_SPI_ErrorCallback(hspi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	0018      	movs	r0, r3
 8006f58:	f7ff fef6 	bl	8006d48 <HAL_SPI_ErrorCallback>
      return;
 8006f5c:	e003      	b.n	8006f66 <SPI_DMATransmitReceiveCplt+0x94>
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	0018      	movs	r0, r3
 8006f62:	f7ff fed1 	bl	8006d08 <HAL_SPI_TxRxCpltCallback>
}
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b004      	add	sp, #16
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxHalfCpltCallback(hspi);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f7ff fecb 	bl	8006d18 <HAL_SPI_TxHalfCpltCallback>
}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b004      	add	sp, #16
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	60fb      	str	r3, [r7, #12]

  HAL_SPI_RxHalfCpltCallback(hspi);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f7ff fec4 	bl	8006d28 <HAL_SPI_RxHalfCpltCallback>
}
 8006fa0:	46c0      	nop			; (mov r8, r8)
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b004      	add	sp, #16
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	60fb      	str	r3, [r7, #12]

  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7ff febd 	bl	8006d38 <HAL_SPI_TxRxHalfCpltCallback>
}
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b004      	add	sp, #16
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	6812      	ldr	r2, [r2, #0]
 8006fdc:	6852      	ldr	r2, [r2, #4]
 8006fde:	2103      	movs	r1, #3
 8006fe0:	438a      	bics	r2, r1
 8006fe2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe8:	2210      	movs	r2, #16
 8006fea:	431a      	orrs	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	225d      	movs	r2, #93	; 0x5d
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	5499      	strb	r1, [r3, r2]
  HAL_SPI_ErrorCallback(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f7ff fea4 	bl	8006d48 <HAL_SPI_ErrorCallback>
}
 8007000:	46c0      	nop			; (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b004      	add	sp, #16
 8007006:	bd80      	pop	{r7, pc}

08007008 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2246      	movs	r2, #70	; 0x46
 800701a:	2100      	movs	r1, #0
 800701c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	87da      	strh	r2, [r3, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	0018      	movs	r0, r3
 8007028:	f7ff fe8e 	bl	8006d48 <HAL_SPI_ErrorCallback>
}
 800702c:	46c0      	nop			; (mov r8, r8)
 800702e:	46bd      	mov	sp, r7
 8007030:	b004      	add	sp, #16
 8007032:	bd80      	pop	{r7, pc}

08007034 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af02      	add	r7, sp, #8
 800703a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007046:	2200      	movs	r2, #0
 8007048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	6852      	ldr	r2, [r2, #4]
 8007054:	2102      	movs	r1, #2
 8007056:	438a      	bics	r2, r1
 8007058:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800705a:	f7f9 f8bb 	bl	80001d4 <HAL_GetTick>
 800705e:	0002      	movs	r2, r0
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2164      	movs	r1, #100	; 0x64
 8007064:	0018      	movs	r0, r3
 8007066:	f000 fbab 	bl	80077c0 <SPI_EndRxTxTransaction>
 800706a:	1e03      	subs	r3, r0, #0
 800706c:	d002      	beq.n	8007074 <SPI_DMATxAbortCallback+0x40>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2240      	movs	r2, #64	; 0x40
 8007072:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	6812      	ldr	r2, [r2, #0]
 800707c:	6812      	ldr	r2, [r2, #0]
 800707e:	2140      	movs	r1, #64	; 0x40
 8007080:	438a      	bics	r2, r1
 8007082:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007084:	f7f9 f8a6 	bl	80001d4 <HAL_GetTick>
 8007088:	0002      	movs	r2, r0
 800708a:	23c0      	movs	r3, #192	; 0xc0
 800708c:	00d9      	lsls	r1, r3, #3
 800708e:	6978      	ldr	r0, [r7, #20]
 8007090:	9200      	str	r2, [sp, #0]
 8007092:	2364      	movs	r3, #100	; 0x64
 8007094:	2200      	movs	r2, #0
 8007096:	f000 fab9 	bl	800760c <SPI_WaitFifoStateUntilTimeout>
 800709a:	1e03      	subs	r3, r0, #0
 800709c:	d002      	beq.n	80070a4 <SPI_DMATxAbortCallback+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2240      	movs	r2, #64	; 0x40
 80070a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <SPI_DMATxAbortCallback+0x82>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d128      	bne.n	8007108 <SPI_DMATxAbortCallback+0xd4>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2246      	movs	r2, #70	; 0x46
 80070ba:	2100      	movs	r1, #0
 80070bc:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2200      	movs	r2, #0
 80070c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c8:	2b40      	cmp	r3, #64	; 0x40
 80070ca:	d002      	beq.n	80070d2 <SPI_DMATxAbortCallback+0x9e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2200      	movs	r2, #0
 80070d0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070d2:	2300      	movs	r3, #0
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	225d      	movs	r2, #93	; 0x5d
 80070fa:	2101      	movs	r1, #1
 80070fc:	5499      	strb	r1, [r3, r2]

  /* Call user Abort complete callback */
  HAL_SPI_AbortCpltCallback(hspi);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	0018      	movs	r0, r3
 8007102:	f7ff fe29 	bl	8006d58 <HAL_SPI_AbortCpltCallback>
 8007106:	e000      	b.n	800710a <SPI_DMATxAbortCallback+0xd6>
      return;
 8007108:	46c0      	nop			; (mov r8, r8)
}
 800710a:	46bd      	mov	sp, r7
 800710c:	b006      	add	sp, #24
 800710e:	bd80      	pop	{r7, pc}

08007110 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af02      	add	r7, sp, #8
 8007116:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	2140      	movs	r1, #64	; 0x40
 800712a:	438a      	bics	r2, r1
 800712c:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	2200      	movs	r2, #0
 8007134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	6812      	ldr	r2, [r2, #0]
 800713e:	6852      	ldr	r2, [r2, #4]
 8007140:	2101      	movs	r1, #1
 8007142:	438a      	bics	r2, r1
 8007144:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007146:	f7f9 f845 	bl	80001d4 <HAL_GetTick>
 800714a:	0003      	movs	r3, r0
 800714c:	6978      	ldr	r0, [r7, #20]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	2364      	movs	r3, #100	; 0x64
 8007152:	2200      	movs	r2, #0
 8007154:	2180      	movs	r1, #128	; 0x80
 8007156:	f000 f9ea 	bl	800752e <SPI_WaitFlagStateUntilTimeout>
 800715a:	1e03      	subs	r3, r0, #0
 800715c:	d002      	beq.n	8007164 <SPI_DMARxAbortCallback+0x54>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2240      	movs	r2, #64	; 0x40
 8007162:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007164:	f7f9 f836 	bl	80001d4 <HAL_GetTick>
 8007168:	0002      	movs	r2, r0
 800716a:	23c0      	movs	r3, #192	; 0xc0
 800716c:	00d9      	lsls	r1, r3, #3
 800716e:	6978      	ldr	r0, [r7, #20]
 8007170:	9200      	str	r2, [sp, #0]
 8007172:	2364      	movs	r3, #100	; 0x64
 8007174:	2200      	movs	r2, #0
 8007176:	f000 fa49 	bl	800760c <SPI_WaitFifoStateUntilTimeout>
 800717a:	1e03      	subs	r3, r0, #0
 800717c:	d002      	beq.n	8007184 <SPI_DMARxAbortCallback+0x74>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2240      	movs	r2, #64	; 0x40
 8007182:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <SPI_DMARxAbortCallback+0x86>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d128      	bne.n	80071e8 <SPI_DMARxAbortCallback+0xd8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2246      	movs	r2, #70	; 0x46
 800719a:	2100      	movs	r1, #0
 800719c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2200      	movs	r2, #0
 80071a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	d002      	beq.n	80071b2 <SPI_DMARxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2200      	movs	r2, #0
 80071b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	225d      	movs	r2, #93	; 0x5d
 80071da:	2101      	movs	r1, #1
 80071dc:	5499      	strb	r1, [r3, r2]

  /* Call user Abort complete callback */
  HAL_SPI_AbortCpltCallback(hspi);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	0018      	movs	r0, r3
 80071e2:	f7ff fdb9 	bl	8006d58 <HAL_SPI_AbortCpltCallback>
 80071e6:	e000      	b.n	80071ea <SPI_DMARxAbortCallback+0xda>
      return;
 80071e8:	46c0      	nop			; (mov r8, r8)
}
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b006      	add	sp, #24
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2246      	movs	r2, #70	; 0x46
 80071fc:	5a9b      	ldrh	r3, [r3, r2]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	d924      	bls.n	800724e <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	b29b      	uxth	r3, r3
 8007210:	8013      	strh	r3, [r2, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	1c9a      	adds	r2, r3, #2
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2246      	movs	r2, #70	; 0x46
 8007220:	5a9b      	ldrh	r3, [r3, r2]
 8007222:	b29b      	uxth	r3, r3
 8007224:	3b02      	subs	r3, #2
 8007226:	b299      	uxth	r1, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2246      	movs	r2, #70	; 0x46
 800722c:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2246      	movs	r2, #70	; 0x46
 8007232:	5a9b      	ldrh	r3, [r3, r2]
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b01      	cmp	r3, #1
 8007238:	d11d      	bne.n	8007276 <SPI_2linesRxISR_8BIT+0x86>
    {
      /* set fiforxthresold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	6852      	ldr	r2, [r2, #4]
 8007244:	2180      	movs	r1, #128	; 0x80
 8007246:	0149      	lsls	r1, r1, #5
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
 800724c:	e013      	b.n	8007276 <SPI_2linesRxISR_8BIT+0x86>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	1c59      	adds	r1, r3, #1
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6411      	str	r1, [r2, #64]	; 0x40
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6812      	ldr	r2, [r2, #0]
 800725c:	320c      	adds	r2, #12
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2246      	movs	r2, #70	; 0x46
 8007268:	5a9b      	ldrh	r3, [r3, r2]
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	b299      	uxth	r1, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2246      	movs	r2, #70	; 0x46
 8007274:	5299      	strh	r1, [r3, r2]
  }

  /* check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2246      	movs	r2, #70	; 0x46
 800727a:	5a9b      	ldrh	r3, [r3, r2]
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d110      	bne.n	80072a4 <SPI_2linesRxISR_8BIT+0xb4>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	6852      	ldr	r2, [r2, #4]
 800728c:	2160      	movs	r1, #96	; 0x60
 800728e:	438a      	bics	r2, r1
 8007290:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <SPI_2linesRxISR_8BIT+0xb4>
    {
      SPI_CloseRxTx_ISR(hspi);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	0018      	movs	r0, r3
 80072a0:	f000 fad4 	bl	800784c <SPI_CloseRxTx_ISR>
    }
  }
}
 80072a4:	46c0      	nop			; (mov r8, r8)
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b002      	add	sp, #8
 80072aa:	bd80      	pop	{r7, pc}

080072ac <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d912      	bls.n	80072e4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072c6:	8812      	ldrh	r2, [r2, #0]
 80072c8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	1c9a      	adds	r2, r3, #2
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b02      	subs	r3, #2
 80072dc:	b29a      	uxth	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072e2:	e011      	b.n	8007308 <SPI_2linesTxISR_8BIT+0x5c>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	0019      	movs	r1, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	1c58      	adds	r0, r3, #1
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6390      	str	r0, [r2, #56]	; 0x38
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	700b      	strb	r3, [r1, #0]
    hspi->TxXferCount--;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d111      	bne.n	8007336 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	6852      	ldr	r2, [r2, #4]
 800731c:	2180      	movs	r1, #128	; 0x80
 800731e:	438a      	bics	r2, r1
 8007320:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2246      	movs	r2, #70	; 0x46
 8007326:	5a9b      	ldrh	r3, [r3, r2]
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	0018      	movs	r0, r3
 8007332:	f000 fa8b 	bl	800784c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	46bd      	mov	sp, r7
 800733a:	b002      	add	sp, #8
 800733c:	bd80      	pop	{r7, pc}

0800733e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	b29b      	uxth	r3, r3
 8007352:	8013      	strh	r3, [r2, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	1c9a      	adds	r2, r3, #2
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2246      	movs	r2, #70	; 0x46
 8007362:	5a9b      	ldrh	r3, [r3, r2]
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	b299      	uxth	r1, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2246      	movs	r2, #70	; 0x46
 800736e:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2246      	movs	r2, #70	; 0x46
 8007374:	5a9b      	ldrh	r3, [r3, r2]
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d110      	bne.n	800739e <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6812      	ldr	r2, [r2, #0]
 8007384:	6852      	ldr	r2, [r2, #4]
 8007386:	2140      	movs	r1, #64	; 0x40
 8007388:	438a      	bics	r2, r1
 800738a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	0018      	movs	r0, r3
 800739a:	f000 fa57 	bl	800784c <SPI_CloseRxTx_ISR>
    }
  }
}
 800739e:	46c0      	nop			; (mov r8, r8)
 80073a0:	46bd      	mov	sp, r7
 80073a2:	b002      	add	sp, #8
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073b6:	8812      	ldrh	r2, [r2, #0]
 80073b8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	1c9a      	adds	r2, r3, #2
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d111      	bne.n	8007400 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	6852      	ldr	r2, [r2, #4]
 80073e6:	2180      	movs	r1, #128	; 0x80
 80073e8:	438a      	bics	r2, r1
 80073ea:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2246      	movs	r2, #70	; 0x46
 80073f0:	5a9b      	ldrh	r3, [r3, r2]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 fa26 	bl	800784c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007400:	46c0      	nop			; (mov r8, r8)
 8007402:	46bd      	mov	sp, r7
 8007404:	b002      	add	sp, #8
 8007406:	bd80      	pop	{r7, pc}

08007408 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	1c59      	adds	r1, r3, #1
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6411      	str	r1, [r2, #64]	; 0x40
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	320c      	adds	r2, #12
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2246      	movs	r2, #70	; 0x46
 800742a:	5a9b      	ldrh	r3, [r3, r2]
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	b299      	uxth	r1, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2246      	movs	r2, #70	; 0x46
 8007436:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2246      	movs	r2, #70	; 0x46
 800743c:	5a9b      	ldrh	r3, [r3, r2]
 800743e:	b29b      	uxth	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d103      	bne.n	800744c <SPI_RxISR_8BIT+0x44>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	0018      	movs	r0, r3
 8007448:	f000 fa48 	bl	80078dc <SPI_CloseRx_ISR>
  }
}
 800744c:	46c0      	nop			; (mov r8, r8)
 800744e:	46bd      	mov	sp, r7
 8007450:	b002      	add	sp, #8
 8007452:	bd80      	pop	{r7, pc}

08007454 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	b29b      	uxth	r3, r3
 8007468:	8013      	strh	r3, [r2, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	1c9a      	adds	r2, r3, #2
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2246      	movs	r2, #70	; 0x46
 8007478:	5a9b      	ldrh	r3, [r3, r2]
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b299      	uxth	r1, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2246      	movs	r2, #70	; 0x46
 8007484:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2246      	movs	r2, #70	; 0x46
 800748a:	5a9b      	ldrh	r3, [r3, r2]
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	0018      	movs	r0, r3
 8007496:	f000 fa21 	bl	80078dc <SPI_CloseRx_ISR>
  }
}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	46bd      	mov	sp, r7
 800749e:	b002      	add	sp, #8
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	330c      	adds	r3, #12
 80074b0:	0019      	movs	r1, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	1c58      	adds	r0, r3, #1
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6390      	str	r0, [r2, #56]	; 0x38
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	700b      	strb	r3, [r1, #0]
  hspi->TxXferCount--;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	0018      	movs	r0, r3
 80074dc:	f000 fa2f 	bl	800793e <SPI_CloseTx_ISR>
  }
}
 80074e0:	46c0      	nop			; (mov r8, r8)
 80074e2:	46bd      	mov	sp, r7
 80074e4:	b002      	add	sp, #8
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074f8:	8812      	ldrh	r2, [r2, #0]
 80074fa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	1c9a      	adds	r2, r3, #2
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	0018      	movs	r0, r3
 8007522:	f000 fa0c 	bl	800793e <SPI_CloseTx_ISR>
  }
}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	46bd      	mov	sp, r7
 800752a:	b002      	add	sp, #8
 800752c:	bd80      	pop	{r7, pc}

0800752e <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800753c:	e050      	b.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	d04d      	beq.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <SPI_WaitFlagStateUntilTimeout+0x2c>
 800754a:	f7f8 fe43 	bl	80001d4 <HAL_GetTick>
 800754e:	0002      	movs	r2, r0
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d342      	bcc.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	6852      	ldr	r2, [r2, #4]
 8007564:	21e0      	movs	r1, #224	; 0xe0
 8007566:	438a      	bics	r2, r1
 8007568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	2382      	movs	r3, #130	; 0x82
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	429a      	cmp	r2, r3
 8007574:	d113      	bne.n	800759e <SPI_WaitFlagStateUntilTimeout+0x70>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	2380      	movs	r3, #128	; 0x80
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	429a      	cmp	r2, r3
 8007580:	d005      	beq.n	800758e <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	2380      	movs	r3, #128	; 0x80
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	429a      	cmp	r2, r3
 800758c:	d107      	bne.n	800759e <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	2140      	movs	r1, #64	; 0x40
 800759a:	438a      	bics	r2, r1
 800759c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075a2:	2380      	movs	r3, #128	; 0x80
 80075a4:	019b      	lsls	r3, r3, #6
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d110      	bne.n	80075cc <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	4914      	ldr	r1, [pc, #80]	; (8007608 <SPI_WaitFlagStateUntilTimeout+0xda>)
 80075b6:	400a      	ands	r2, r1
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	6812      	ldr	r2, [r2, #0]
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	0189      	lsls	r1, r1, #6
 80075c8:	430a      	orrs	r2, r1
 80075ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	225d      	movs	r2, #93	; 0x5d
 80075d0:	2101      	movs	r1, #1
 80075d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	225c      	movs	r2, #92	; 0x5c
 80075d8:	2100      	movs	r1, #0
 80075da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e00e      	b.n	80075fe <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	401a      	ands	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d101      	bne.n	80075f4 <SPI_WaitFlagStateUntilTimeout+0xc6>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <SPI_WaitFlagStateUntilTimeout+0xc8>
 80075f4:	2300      	movs	r3, #0
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d1a0      	bne.n	800753e <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	0018      	movs	r0, r3
 8007600:	46bd      	mov	sp, r7
 8007602:	b004      	add	sp, #16
 8007604:	bd80      	pop	{r7, pc}
 8007606:	46c0      	nop			; (mov r8, r8)
 8007608:	ffffdfff 	.word	0xffffdfff

0800760c <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800761a:	e063      	b.n	80076e4 <SPI_WaitFifoStateUntilTimeout+0xd8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	23c0      	movs	r3, #192	; 0xc0
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	429a      	cmp	r2, r3
 8007624:	d10d      	bne.n	8007642 <SPI_WaitFifoStateUntilTimeout+0x36>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	2317      	movs	r3, #23
 8007638:	18fb      	adds	r3, r7, r3
 800763a:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800763c:	2317      	movs	r3, #23
 800763e:	18fb      	adds	r3, r7, r3
 8007640:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	d04d      	beq.n	80076e4 <SPI_WaitFifoStateUntilTimeout+0xd8>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <SPI_WaitFifoStateUntilTimeout+0x52>
 800764e:	f7f8 fdc1 	bl	80001d4 <HAL_GetTick>
 8007652:	0002      	movs	r2, r0
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	1ad2      	subs	r2, r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d342      	bcc.n	80076e4 <SPI_WaitFifoStateUntilTimeout+0xd8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	6852      	ldr	r2, [r2, #4]
 8007668:	21e0      	movs	r1, #224	; 0xe0
 800766a:	438a      	bics	r2, r1
 800766c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	2382      	movs	r3, #130	; 0x82
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	429a      	cmp	r2, r3
 8007678:	d113      	bne.n	80076a2 <SPI_WaitFifoStateUntilTimeout+0x96>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	2380      	movs	r3, #128	; 0x80
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	429a      	cmp	r2, r3
 8007684:	d005      	beq.n	8007692 <SPI_WaitFifoStateUntilTimeout+0x86>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	2380      	movs	r3, #128	; 0x80
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	429a      	cmp	r2, r3
 8007690:	d107      	bne.n	80076a2 <SPI_WaitFifoStateUntilTimeout+0x96>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	6812      	ldr	r2, [r2, #0]
 800769a:	6812      	ldr	r2, [r2, #0]
 800769c:	2140      	movs	r1, #64	; 0x40
 800769e:	438a      	bics	r2, r1
 80076a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076a6:	2380      	movs	r3, #128	; 0x80
 80076a8:	019b      	lsls	r3, r3, #6
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d110      	bne.n	80076d0 <SPI_WaitFifoStateUntilTimeout+0xc4>
        {
          SPI_RESET_CRC(hspi);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	6812      	ldr	r2, [r2, #0]
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	4911      	ldr	r1, [pc, #68]	; (8007700 <SPI_WaitFifoStateUntilTimeout+0xf4>)
 80076ba:	400a      	ands	r2, r1
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	6812      	ldr	r2, [r2, #0]
 80076c8:	2180      	movs	r1, #128	; 0x80
 80076ca:	0189      	lsls	r1, r1, #6
 80076cc:	430a      	orrs	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	225d      	movs	r2, #93	; 0x5d
 80076d4:	2101      	movs	r1, #1
 80076d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	225c      	movs	r2, #92	; 0x5c
 80076dc:	2100      	movs	r1, #0
 80076de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e008      	b.n	80076f6 <SPI_WaitFifoStateUntilTimeout+0xea>
  while ((hspi->Instance->SR & Fifo) != State)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	401a      	ands	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d193      	bne.n	800761c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	0018      	movs	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	b006      	add	sp, #24
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	46c0      	nop			; (mov r8, r8)
 8007700:	ffffdfff 	.word	0xffffdfff

08007704 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af02      	add	r7, sp, #8
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	2382      	movs	r3, #130	; 0x82
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	429a      	cmp	r2, r3
 800771a:	d113      	bne.n	8007744 <SPI_EndRxTransaction+0x40>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	2380      	movs	r3, #128	; 0x80
 8007722:	021b      	lsls	r3, r3, #8
 8007724:	429a      	cmp	r2, r3
 8007726:	d005      	beq.n	8007734 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	2380      	movs	r3, #128	; 0x80
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	429a      	cmp	r2, r3
 8007732:	d107      	bne.n	8007744 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	2140      	movs	r1, #64	; 0x40
 8007740:	438a      	bics	r2, r1
 8007742:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	0013      	movs	r3, r2
 800774e:	2200      	movs	r2, #0
 8007750:	2180      	movs	r1, #128	; 0x80
 8007752:	f7ff feec 	bl	800752e <SPI_WaitFlagStateUntilTimeout>
 8007756:	1e03      	subs	r3, r0, #0
 8007758:	d007      	beq.n	800776a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775e:	2220      	movs	r2, #32
 8007760:	431a      	orrs	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e026      	b.n	80077b8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	2382      	movs	r3, #130	; 0x82
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	429a      	cmp	r2, r3
 8007774:	d11f      	bne.n	80077b6 <SPI_EndRxTransaction+0xb2>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	2380      	movs	r3, #128	; 0x80
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	429a      	cmp	r2, r3
 8007780:	d005      	beq.n	800778e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	2380      	movs	r3, #128	; 0x80
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	429a      	cmp	r2, r3
 800778c:	d113      	bne.n	80077b6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	23c0      	movs	r3, #192	; 0xc0
 8007792:	00d9      	lsls	r1, r3, #3
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	0013      	movs	r3, r2
 800779c:	2200      	movs	r2, #0
 800779e:	f7ff ff35 	bl	800760c <SPI_WaitFifoStateUntilTimeout>
 80077a2:	1e03      	subs	r3, r0, #0
 80077a4:	d007      	beq.n	80077b6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077aa:	2220      	movs	r2, #32
 80077ac:	431a      	orrs	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e000      	b.n	80077b8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	0018      	movs	r0, r3
 80077ba:	46bd      	mov	sp, r7
 80077bc:	b004      	add	sp, #16
 80077be:	bd80      	pop	{r7, pc}

080077c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	23c0      	movs	r3, #192	; 0xc0
 80077d0:	0159      	lsls	r1, r3, #5
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	0013      	movs	r3, r2
 80077da:	2200      	movs	r2, #0
 80077dc:	f7ff ff16 	bl	800760c <SPI_WaitFifoStateUntilTimeout>
 80077e0:	1e03      	subs	r3, r0, #0
 80077e2:	d007      	beq.n	80077f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e8:	2220      	movs	r2, #32
 80077ea:	431a      	orrs	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e027      	b.n	8007844 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	0013      	movs	r3, r2
 80077fe:	2200      	movs	r2, #0
 8007800:	2180      	movs	r1, #128	; 0x80
 8007802:	f7ff fe94 	bl	800752e <SPI_WaitFlagStateUntilTimeout>
 8007806:	1e03      	subs	r3, r0, #0
 8007808:	d007      	beq.n	800781a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800780e:	2220      	movs	r2, #32
 8007810:	431a      	orrs	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e014      	b.n	8007844 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	23c0      	movs	r3, #192	; 0xc0
 800781e:	00d9      	lsls	r1, r3, #3
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	0013      	movs	r3, r2
 8007828:	2200      	movs	r2, #0
 800782a:	f7ff feef 	bl	800760c <SPI_WaitFifoStateUntilTimeout>
 800782e:	1e03      	subs	r3, r0, #0
 8007830:	d007      	beq.n	8007842 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007836:	2220      	movs	r2, #32
 8007838:	431a      	orrs	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e000      	b.n	8007844 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	0018      	movs	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	b004      	add	sp, #16
 800784a:	bd80      	pop	{r7, pc}

0800784c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007858:	f7f8 fcbc 	bl	80001d4 <HAL_GetTick>
 800785c:	0003      	movs	r3, r0
 800785e:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	6852      	ldr	r2, [r2, #4]
 800786a:	2120      	movs	r1, #32
 800786c:	438a      	bics	r2, r1
 800786e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2164      	movs	r1, #100	; 0x64
 8007876:	0018      	movs	r0, r3
 8007878:	f7ff ffa2 	bl	80077c0 <SPI_EndRxTxTransaction>
 800787c:	1e03      	subs	r3, r0, #0
 800787e:	d005      	beq.n	800788c <SPI_CloseRxTx_ISR+0x40>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007884:	2220      	movs	r2, #32
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	661a      	str	r2, [r3, #96]	; 0x60
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007890:	2b00      	cmp	r3, #0
 8007892:	d117      	bne.n	80078c4 <SPI_CloseRxTx_ISR+0x78>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	225d      	movs	r2, #93	; 0x5d
 8007898:	5c9b      	ldrb	r3, [r3, r2]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b04      	cmp	r3, #4
 800789e:	d108      	bne.n	80078b2 <SPI_CloseRxTx_ISR+0x66>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	225d      	movs	r2, #93	; 0x5d
 80078a4:	2101      	movs	r1, #1
 80078a6:	5499      	strb	r1, [r3, r2]
        HAL_SPI_RxCpltCallback(hspi);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	0018      	movs	r0, r3
 80078ac:	f7ff fa24 	bl	8006cf8 <HAL_SPI_RxCpltCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80078b0:	e010      	b.n	80078d4 <SPI_CloseRxTx_ISR+0x88>
        hspi->State = HAL_SPI_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	225d      	movs	r2, #93	; 0x5d
 80078b6:	2101      	movs	r1, #1
 80078b8:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	0018      	movs	r0, r3
 80078be:	f7ff fa23 	bl	8006d08 <HAL_SPI_TxRxCpltCallback>
}
 80078c2:	e007      	b.n	80078d4 <SPI_CloseRxTx_ISR+0x88>
      hspi->State = HAL_SPI_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	225d      	movs	r2, #93	; 0x5d
 80078c8:	2101      	movs	r1, #1
 80078ca:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7ff fa3a 	bl	8006d48 <HAL_SPI_ErrorCallback>
}
 80078d4:	46c0      	nop			; (mov r8, r8)
 80078d6:	46bd      	mov	sp, r7
 80078d8:	b004      	add	sp, #16
 80078da:	bd80      	pop	{r7, pc}

080078dc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6812      	ldr	r2, [r2, #0]
 80078ec:	6852      	ldr	r2, [r2, #4]
 80078ee:	2160      	movs	r1, #96	; 0x60
 80078f0:	438a      	bics	r2, r1
 80078f2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80078f4:	f7f8 fc6e 	bl	80001d4 <HAL_GetTick>
 80078f8:	0002      	movs	r2, r0
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2164      	movs	r1, #100	; 0x64
 80078fe:	0018      	movs	r0, r3
 8007900:	f7ff ff00 	bl	8007704 <SPI_EndRxTransaction>
 8007904:	1e03      	subs	r3, r0, #0
 8007906:	d005      	beq.n	8007914 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800790c:	2220      	movs	r2, #32
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	225d      	movs	r2, #93	; 0x5d
 8007918:	2101      	movs	r1, #1
 800791a:	5499      	strb	r1, [r3, r2]
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <SPI_CloseRx_ISR+0x52>
    {
      HAL_SPI_RxCpltCallback(hspi);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	0018      	movs	r0, r3
 8007928:	f7ff f9e6 	bl	8006cf8 <HAL_SPI_RxCpltCallback>
      HAL_SPI_ErrorCallback(hspi);
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800792c:	e003      	b.n	8007936 <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	0018      	movs	r0, r3
 8007932:	f7ff fa09 	bl	8006d48 <HAL_SPI_ErrorCallback>
}
 8007936:	46c0      	nop			; (mov r8, r8)
 8007938:	46bd      	mov	sp, r7
 800793a:	b002      	add	sp, #8
 800793c:	bd80      	pop	{r7, pc}

0800793e <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800794a:	f7f8 fc43 	bl	80001d4 <HAL_GetTick>
 800794e:	0003      	movs	r3, r0
 8007950:	60fb      	str	r3, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	6812      	ldr	r2, [r2, #0]
 800795a:	6852      	ldr	r2, [r2, #4]
 800795c:	21a0      	movs	r1, #160	; 0xa0
 800795e:	438a      	bics	r2, r1
 8007960:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2164      	movs	r1, #100	; 0x64
 8007968:	0018      	movs	r0, r3
 800796a:	f7ff ff29 	bl	80077c0 <SPI_EndRxTxTransaction>
 800796e:	1e03      	subs	r3, r0, #0
 8007970:	d005      	beq.n	800797e <SPI_CloseTx_ISR+0x40>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007976:	2220      	movs	r2, #32
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <SPI_CloseTx_ISR+0x5e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007986:	2300      	movs	r3, #0
 8007988:	60bb      	str	r3, [r7, #8]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	60bb      	str	r3, [r7, #8]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	225d      	movs	r2, #93	; 0x5d
 80079a0:	2101      	movs	r1, #1
 80079a2:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <SPI_CloseTx_ISR+0x78>
  {
    HAL_SPI_ErrorCallback(hspi);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	0018      	movs	r0, r3
 80079b0:	f7ff f9ca 	bl	8006d48 <HAL_SPI_ErrorCallback>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
  }
}
 80079b4:	e003      	b.n	80079be <SPI_CloseTx_ISR+0x80>
    HAL_SPI_TxCpltCallback(hspi);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	0018      	movs	r0, r3
 80079ba:	f7ff f995 	bl	8006ce8 <HAL_SPI_TxCpltCallback>
}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b004      	add	sp, #16
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af02      	add	r7, sp, #8
 80079cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	2140      	movs	r1, #64	; 0x40
 80079da:	438a      	bics	r2, r1
 80079dc:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80079de:	4b26      	ldr	r3, [pc, #152]	; (8007a78 <SPI_AbortRx_ISR+0xb2>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4926      	ldr	r1, [pc, #152]	; (8007a7c <SPI_AbortRx_ISR+0xb6>)
 80079e4:	0018      	movs	r0, r3
 80079e6:	f008 fbc5 	bl	8010174 <__udivsi3>
 80079ea:	0003      	movs	r3, r0
 80079ec:	001a      	movs	r2, r3
 80079ee:	2364      	movs	r3, #100	; 0x64
 80079f0:	4353      	muls	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	6852      	ldr	r2, [r2, #4]
 80079fe:	21e0      	movs	r1, #224	; 0xe0
 8007a00:	438a      	bics	r2, r1
 8007a02:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count-- == 0U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	1e5a      	subs	r2, r3, #1
 8007a08:	60fa      	str	r2, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <SPI_AbortRx_ISR+0x56>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a12:	2240      	movs	r2, #64	; 0x40
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8007a1a:	e005      	b.n	8007a28 <SPI_AbortRx_ISR+0x62>
    }
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2240      	movs	r2, #64	; 0x40
 8007a24:	4013      	ands	r3, r2
 8007a26:	d1ed      	bne.n	8007a04 <SPI_AbortRx_ISR+0x3e>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007a28:	f7f8 fbd4 	bl	80001d4 <HAL_GetTick>
 8007a2c:	0003      	movs	r3, r0
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	2364      	movs	r3, #100	; 0x64
 8007a34:	2200      	movs	r2, #0
 8007a36:	2180      	movs	r1, #128	; 0x80
 8007a38:	f7ff fd79 	bl	800752e <SPI_WaitFlagStateUntilTimeout>
 8007a3c:	1e03      	subs	r3, r0, #0
 8007a3e:	d002      	beq.n	8007a46 <SPI_AbortRx_ISR+0x80>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2240      	movs	r2, #64	; 0x40
 8007a44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007a46:	f7f8 fbc5 	bl	80001d4 <HAL_GetTick>
 8007a4a:	0002      	movs	r2, r0
 8007a4c:	23c0      	movs	r3, #192	; 0xc0
 8007a4e:	00d9      	lsls	r1, r3, #3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	9200      	str	r2, [sp, #0]
 8007a54:	2364      	movs	r3, #100	; 0x64
 8007a56:	2200      	movs	r2, #0
 8007a58:	f7ff fdd8 	bl	800760c <SPI_WaitFifoStateUntilTimeout>
 8007a5c:	1e03      	subs	r3, r0, #0
 8007a5e:	d002      	beq.n	8007a66 <SPI_AbortRx_ISR+0xa0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2240      	movs	r2, #64	; 0x40
 8007a64:	661a      	str	r2, [r3, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	225d      	movs	r2, #93	; 0x5d
 8007a6a:	2107      	movs	r1, #7
 8007a6c:	5499      	strb	r1, [r3, r2]
}
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	46bd      	mov	sp, r7
 8007a72:	b004      	add	sp, #16
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	20000110 	.word	0x20000110
 8007a7c:	00005dc0 	.word	0x00005dc0

08007a80 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007a88:	4b28      	ldr	r3, [pc, #160]	; (8007b2c <SPI_AbortTx_ISR+0xac>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4928      	ldr	r1, [pc, #160]	; (8007b30 <SPI_AbortTx_ISR+0xb0>)
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f008 fb70 	bl	8010174 <__udivsi3>
 8007a94:	0003      	movs	r3, r0
 8007a96:	001a      	movs	r2, r3
 8007a98:	2364      	movs	r3, #100	; 0x64
 8007a9a:	4353      	muls	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	6852      	ldr	r2, [r2, #4]
 8007aa8:	21e0      	movs	r1, #224	; 0xe0
 8007aaa:	438a      	bics	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count-- == 0U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1e5a      	subs	r2, r3, #1
 8007ab2:	60fa      	str	r2, [r7, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d106      	bne.n	8007ac6 <SPI_AbortTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007abc:	2240      	movs	r2, #64	; 0x40
 8007abe:	431a      	orrs	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8007ac4:	e005      	b.n	8007ad2 <SPI_AbortTx_ISR+0x52>
    }
  }
  while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2280      	movs	r2, #128	; 0x80
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d1ed      	bne.n	8007aae <SPI_AbortTx_ISR+0x2e>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007ad2:	f7f8 fb7f 	bl	80001d4 <HAL_GetTick>
 8007ad6:	0002      	movs	r2, r0
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2164      	movs	r1, #100	; 0x64
 8007adc:	0018      	movs	r0, r3
 8007ade:	f7ff fe6f 	bl	80077c0 <SPI_EndRxTxTransaction>
 8007ae2:	1e03      	subs	r3, r0, #0
 8007ae4:	d002      	beq.n	8007aec <SPI_AbortTx_ISR+0x6c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2240      	movs	r2, #64	; 0x40
 8007aea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	2140      	movs	r1, #64	; 0x40
 8007af8:	438a      	bics	r2, r1
 8007afa:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007afc:	f7f8 fb6a 	bl	80001d4 <HAL_GetTick>
 8007b00:	0002      	movs	r2, r0
 8007b02:	23c0      	movs	r3, #192	; 0xc0
 8007b04:	00d9      	lsls	r1, r3, #3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	9200      	str	r2, [sp, #0]
 8007b0a:	2364      	movs	r3, #100	; 0x64
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f7ff fd7d 	bl	800760c <SPI_WaitFifoStateUntilTimeout>
 8007b12:	1e03      	subs	r3, r0, #0
 8007b14:	d002      	beq.n	8007b1c <SPI_AbortTx_ISR+0x9c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2240      	movs	r2, #64	; 0x40
 8007b1a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	225d      	movs	r2, #93	; 0x5d
 8007b20:	2107      	movs	r1, #7
 8007b22:	5499      	strb	r1, [r3, r2]
}
 8007b24:	46c0      	nop			; (mov r8, r8)
 8007b26:	46bd      	mov	sp, r7
 8007b28:	b004      	add	sp, #16
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000110 	.word	0x20000110
 8007b30:	00005dc0 	.word	0x00005dc0

08007b34 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e01e      	b.n	8007b84 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	223d      	movs	r2, #61	; 0x3d
 8007b4a:	5c9b      	ldrb	r3, [r3, r2]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d107      	bne.n	8007b62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	223c      	movs	r2, #60	; 0x3c
 8007b56:	2100      	movs	r1, #0
 8007b58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f007 f851 	bl	800ec04 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	223d      	movs	r2, #61	; 0x3d
 8007b66:	2102      	movs	r1, #2
 8007b68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3304      	adds	r3, #4
 8007b72:	0019      	movs	r1, r3
 8007b74:	0010      	movs	r0, r2
 8007b76:	f003 fa4f 	bl	800b018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	223d      	movs	r2, #61	; 0x3d
 8007b7e:	2101      	movs	r1, #1
 8007b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	0018      	movs	r0, r3
 8007b86:	46bd      	mov	sp, r7
 8007b88:	b002      	add	sp, #8
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral 
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	223d      	movs	r2, #61	; 0x3d
 8007b98:	2102      	movs	r1, #2
 8007b9a:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	4a11      	ldr	r2, [pc, #68]	; (8007be8 <HAL_TIM_Base_DeInit+0x5c>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	d10d      	bne.n	8007bc4 <HAL_TIM_Base_DeInit+0x38>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	4a0f      	ldr	r2, [pc, #60]	; (8007bec <HAL_TIM_Base_DeInit+0x60>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	d107      	bne.n	8007bc4 <HAL_TIM_Base_DeInit+0x38>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6812      	ldr	r2, [r2, #0]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	438a      	bics	r2, r1
 8007bc2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f007 f868 	bl	800ec9c <HAL_TIM_Base_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	223d      	movs	r2, #61	; 0x3d
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	223c      	movs	r2, #60	; 0x3c
 8007bd8:	2100      	movs	r1, #0
 8007bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	0018      	movs	r0, r3
 8007be0:	46bd      	mov	sp, r7
 8007be2:	b002      	add	sp, #8
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	46c0      	nop			; (mov r8, r8)
 8007be8:	00001111 	.word	0x00001111
 8007bec:	00000444 	.word	0x00000444
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007bf8:	46c0      	nop			; (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b002      	add	sp, #8
 8007bfe:	bd80      	pop	{r7, pc}
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8007c08:	46c0      	nop			; (mov r8, r8)
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b002      	add	sp, #8
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	223d      	movs	r2, #61	; 0x3d
 8007c1c:	2102      	movs	r1, #2
 8007c1e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	223d      	movs	r2, #61	; 0x3d
 8007c34:	2101      	movs	r1, #1
 8007c36:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	b002      	add	sp, #8
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	223d      	movs	r2, #61	; 0x3d
 8007c4e:	2102      	movs	r1, #2
 8007c50:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	4a0c      	ldr	r2, [pc, #48]	; (8007c8c <HAL_TIM_Base_Stop+0x4a>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	d10d      	bne.n	8007c7a <HAL_TIM_Base_Stop+0x38>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	4a0a      	ldr	r2, [pc, #40]	; (8007c90 <HAL_TIM_Base_Stop+0x4e>)
 8007c66:	4013      	ands	r3, r2
 8007c68:	d107      	bne.n	8007c7a <HAL_TIM_Base_Stop+0x38>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6812      	ldr	r2, [r2, #0]
 8007c72:	6812      	ldr	r2, [r2, #0]
 8007c74:	2101      	movs	r1, #1
 8007c76:	438a      	bics	r2, r1
 8007c78:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	223d      	movs	r2, #61	; 0x3d
 8007c7e:	2101      	movs	r1, #1
 8007c80:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	0018      	movs	r0, r3
 8007c86:	46bd      	mov	sp, r7
 8007c88:	b002      	add	sp, #8
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	00001111 	.word	0x00001111
 8007c90:	00000444 	.word	0x00000444

08007c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6812      	ldr	r2, [r2, #0]
 8007ca4:	68d2      	ldr	r2, [r2, #12]
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	6812      	ldr	r2, [r2, #0]
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b002      	add	sp, #8
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	68d2      	ldr	r2, [r2, #12]
 8007cd8:	2101      	movs	r1, #1
 8007cda:	438a      	bics	r2, r1
 8007cdc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	4a0a      	ldr	r2, [pc, #40]	; (8007d10 <HAL_TIM_Base_Stop_IT+0x4a>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	d10d      	bne.n	8007d06 <HAL_TIM_Base_Stop_IT+0x40>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	4a08      	ldr	r2, [pc, #32]	; (8007d14 <HAL_TIM_Base_Stop_IT+0x4e>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	d107      	bne.n	8007d06 <HAL_TIM_Base_Stop_IT+0x40>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	6812      	ldr	r2, [r2, #0]
 8007d00:	2101      	movs	r1, #1
 8007d02:	438a      	bics	r2, r1
 8007d04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	0018      	movs	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	b002      	add	sp, #8
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	00001111 	.word	0x00001111
 8007d14:	00000444 	.word	0x00000444

08007d18 <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	1dbb      	adds	r3, r7, #6
 8007d24:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	223d      	movs	r2, #61	; 0x3d
 8007d2a:	5c9b      	ldrb	r3, [r3, r2]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d101      	bne.n	8007d36 <HAL_TIM_Base_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 8007d32:	2302      	movs	r3, #2
 8007d34:	e037      	b.n	8007da6 <HAL_TIM_Base_Start_DMA+0x8e>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	223d      	movs	r2, #61	; 0x3d
 8007d3a:	5c9b      	ldrb	r3, [r3, r2]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d10c      	bne.n	8007d5c <HAL_TIM_Base_Start_DMA+0x44>
  {
    if((pData == 0 ) && (Length > 0))
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d105      	bne.n	8007d54 <HAL_TIM_Base_Start_DMA+0x3c>
 8007d48:	1dbb      	adds	r3, r7, #6
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <HAL_TIM_Base_Start_DMA+0x3c>
    {
      return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e028      	b.n	8007da6 <HAL_TIM_Base_Start_DMA+0x8e>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	223d      	movs	r2, #61	; 0x3d
 8007d58:	2102      	movs	r1, #2
 8007d5a:	5499      	strb	r1, [r3, r2]
    }
  }
  /* Set the DMA Period elapsed callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	4a13      	ldr	r2, [pc, #76]	; (8007db0 <HAL_TIM_Base_Start_DMA+0x98>)
 8007d62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	4a12      	ldr	r2, [pc, #72]	; (8007db4 <HAL_TIM_Base_Start_DMA+0x9c>)
 8007d6a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel */
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a18      	ldr	r0, [r3, #32]
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	332c      	adds	r3, #44	; 0x2c
 8007d78:	001a      	movs	r2, r3
 8007d7a:	1dbb      	adds	r3, r7, #6
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	f7f8 fdc3 	bl	8000908 <HAL_DMA_Start_IT>

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	68d2      	ldr	r2, [r2, #12]
 8007d8c:	2180      	movs	r1, #128	; 0x80
 8007d8e:	0049      	lsls	r1, r1, #1
 8007d90:	430a      	orrs	r2, r1
 8007d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	2101      	movs	r1, #1
 8007da0:	430a      	orrs	r2, r1
 8007da2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	0018      	movs	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	b004      	add	sp, #16
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	0800afcd 	.word	0x0800afcd
 8007db4:	0800aec3 	.word	0x0800aec3

08007db8 <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6812      	ldr	r2, [r2, #0]
 8007dc8:	68d2      	ldr	r2, [r2, #12]
 8007dca:	4910      	ldr	r1, [pc, #64]	; (8007e0c <HAL_TIM_Base_Stop_DMA+0x54>)
 8007dcc:	400a      	ands	r2, r1
 8007dce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	4a0e      	ldr	r2, [pc, #56]	; (8007e10 <HAL_TIM_Base_Stop_DMA+0x58>)
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d10d      	bne.n	8007df8 <HAL_TIM_Base_Stop_DMA+0x40>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	4a0c      	ldr	r2, [pc, #48]	; (8007e14 <HAL_TIM_Base_Stop_DMA+0x5c>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	d107      	bne.n	8007df8 <HAL_TIM_Base_Stop_DMA+0x40>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	6812      	ldr	r2, [r2, #0]
 8007df2:	2101      	movs	r1, #1
 8007df4:	438a      	bics	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	223d      	movs	r2, #61	; 0x3d
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b002      	add	sp, #8
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	fffffeff 	.word	0xfffffeff
 8007e10:	00001111 	.word	0x00001111
 8007e14:	00000444 	.word	0x00000444

08007e18 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e01e      	b.n	8007e68 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	223d      	movs	r2, #61	; 0x3d
 8007e2e:	5c9b      	ldrb	r3, [r3, r2]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d107      	bne.n	8007e46 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	223c      	movs	r2, #60	; 0x3c
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	0018      	movs	r0, r3
 8007e42:	f000 f847 	bl	8007ed4 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	223d      	movs	r2, #61	; 0x3d
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3304      	adds	r3, #4
 8007e56:	0019      	movs	r1, r3
 8007e58:	0010      	movs	r0, r2
 8007e5a:	f003 f8dd 	bl	800b018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	223d      	movs	r2, #61	; 0x3d
 8007e62:	2101      	movs	r1, #1
 8007e64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	0018      	movs	r0, r3
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b002      	add	sp, #8
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral 
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   htim->State = HAL_TIM_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	223d      	movs	r2, #61	; 0x3d
 8007e7c:	2102      	movs	r1, #2
 8007e7e:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	4a11      	ldr	r2, [pc, #68]	; (8007ecc <HAL_TIM_OC_DeInit+0x5c>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	d10d      	bne.n	8007ea8 <HAL_TIM_OC_DeInit+0x38>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	4a0f      	ldr	r2, [pc, #60]	; (8007ed0 <HAL_TIM_OC_DeInit+0x60>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	d107      	bne.n	8007ea8 <HAL_TIM_OC_DeInit+0x38>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	438a      	bics	r2, r1
 8007ea6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f000 f81a 	bl	8007ee4 <HAL_TIM_OC_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	223d      	movs	r2, #61	; 0x3d
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	223c      	movs	r2, #60	; 0x3c
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	b002      	add	sp, #8
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	00001111 	.word	0x00001111
 8007ed0:	00000444 	.word	0x00000444

08007ed4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007edc:	46c0      	nop			; (mov r8, r8)
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b002      	add	sp, #8
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8007eec:	46c0      	nop			; (mov r8, r8)
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b002      	add	sp, #8
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	2201      	movs	r2, #1
 8007f06:	0018      	movs	r0, r3
 8007f08:	f003 fd84 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a16      	ldr	r2, [pc, #88]	; (8007f6c <HAL_TIM_OC_Start+0x78>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00e      	beq.n	8007f34 <HAL_TIM_OC_Start+0x40>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a15      	ldr	r2, [pc, #84]	; (8007f70 <HAL_TIM_OC_Start+0x7c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d009      	beq.n	8007f34 <HAL_TIM_OC_Start+0x40>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <HAL_TIM_OC_Start+0x80>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d004      	beq.n	8007f34 <HAL_TIM_OC_Start+0x40>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a12      	ldr	r2, [pc, #72]	; (8007f78 <HAL_TIM_OC_Start+0x84>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d101      	bne.n	8007f38 <HAL_TIM_OC_Start+0x44>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <HAL_TIM_OC_Start+0x46>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <HAL_TIM_OC_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007f48:	2180      	movs	r1, #128	; 0x80
 8007f4a:	0209      	lsls	r1, r1, #8
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	0018      	movs	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	b002      	add	sp, #8
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	40012c00 	.word	0x40012c00
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	0018      	movs	r0, r3
 8007f90:	f003 fd40 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a21      	ldr	r2, [pc, #132]	; (8008020 <HAL_TIM_OC_Stop+0xa4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00e      	beq.n	8007fbc <HAL_TIM_OC_Stop+0x40>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a20      	ldr	r2, [pc, #128]	; (8008024 <HAL_TIM_OC_Stop+0xa8>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d009      	beq.n	8007fbc <HAL_TIM_OC_Stop+0x40>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1e      	ldr	r2, [pc, #120]	; (8008028 <HAL_TIM_OC_Stop+0xac>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d004      	beq.n	8007fbc <HAL_TIM_OC_Stop+0x40>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1d      	ldr	r2, [pc, #116]	; (800802c <HAL_TIM_OC_Stop+0xb0>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d101      	bne.n	8007fc0 <HAL_TIM_OC_Stop+0x44>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e000      	b.n	8007fc2 <HAL_TIM_OC_Stop+0x46>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d013      	beq.n	8007fee <HAL_TIM_OC_Stop+0x72>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	4a18      	ldr	r2, [pc, #96]	; (8008030 <HAL_TIM_OC_Stop+0xb4>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	d10d      	bne.n	8007fee <HAL_TIM_OC_Stop+0x72>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	4a16      	ldr	r2, [pc, #88]	; (8008034 <HAL_TIM_OC_Stop+0xb8>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	d107      	bne.n	8007fee <HAL_TIM_OC_Stop+0x72>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6812      	ldr	r2, [r2, #0]
 8007fe6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007fe8:	4913      	ldr	r1, [pc, #76]	; (8008038 <HAL_TIM_OC_Stop+0xbc>)
 8007fea:	400a      	ands	r2, r1
 8007fec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	4a0e      	ldr	r2, [pc, #56]	; (8008030 <HAL_TIM_OC_Stop+0xb4>)
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	d10d      	bne.n	8008016 <HAL_TIM_OC_Stop+0x9a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	4a0c      	ldr	r2, [pc, #48]	; (8008034 <HAL_TIM_OC_Stop+0xb8>)
 8008002:	4013      	ands	r3, r2
 8008004:	d107      	bne.n	8008016 <HAL_TIM_OC_Stop+0x9a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6812      	ldr	r2, [r2, #0]
 800800e:	6812      	ldr	r2, [r2, #0]
 8008010:	2101      	movs	r1, #1
 8008012:	438a      	bics	r2, r1
 8008014:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	0018      	movs	r0, r3
 800801a:	46bd      	mov	sp, r7
 800801c:	b002      	add	sp, #8
 800801e:	bd80      	pop	{r7, pc}
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40014000 	.word	0x40014000
 8008028:	40014400 	.word	0x40014400
 800802c:	40014800 	.word	0x40014800
 8008030:	00001111 	.word	0x00001111
 8008034:	00000444 	.word	0x00000444
 8008038:	ffff7fff 	.word	0xffff7fff

0800803c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b04      	cmp	r3, #4
 800804a:	d011      	beq.n	8008070 <HAL_TIM_OC_Start_IT+0x34>
 800804c:	d802      	bhi.n	8008054 <HAL_TIM_OC_Start_IT+0x18>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 8008052:	e028      	b.n	80080a6 <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 8008054:	2b08      	cmp	r3, #8
 8008056:	d014      	beq.n	8008082 <HAL_TIM_OC_Start_IT+0x46>
 8008058:	2b0c      	cmp	r3, #12
 800805a:	d01b      	beq.n	8008094 <HAL_TIM_OC_Start_IT+0x58>
    break;
 800805c:	e023      	b.n	80080a6 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6812      	ldr	r2, [r2, #0]
 8008066:	68d2      	ldr	r2, [r2, #12]
 8008068:	2102      	movs	r1, #2
 800806a:	430a      	orrs	r2, r1
 800806c:	60da      	str	r2, [r3, #12]
    break;
 800806e:	e01a      	b.n	80080a6 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	68d2      	ldr	r2, [r2, #12]
 800807a:	2104      	movs	r1, #4
 800807c:	430a      	orrs	r2, r1
 800807e:	60da      	str	r2, [r3, #12]
    break;
 8008080:	e011      	b.n	80080a6 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	68d2      	ldr	r2, [r2, #12]
 800808c:	2108      	movs	r1, #8
 800808e:	430a      	orrs	r2, r1
 8008090:	60da      	str	r2, [r3, #12]
    break;
 8008092:	e008      	b.n	80080a6 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6812      	ldr	r2, [r2, #0]
 800809c:	68d2      	ldr	r2, [r2, #12]
 800809e:	2110      	movs	r1, #16
 80080a0:	430a      	orrs	r2, r1
 80080a2:	60da      	str	r2, [r3, #12]
    break;
 80080a4:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	2201      	movs	r2, #1
 80080ae:	0018      	movs	r0, r3
 80080b0:	f003 fcb0 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a16      	ldr	r2, [pc, #88]	; (8008114 <HAL_TIM_OC_Start_IT+0xd8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00e      	beq.n	80080dc <HAL_TIM_OC_Start_IT+0xa0>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a15      	ldr	r2, [pc, #84]	; (8008118 <HAL_TIM_OC_Start_IT+0xdc>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d009      	beq.n	80080dc <HAL_TIM_OC_Start_IT+0xa0>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a13      	ldr	r2, [pc, #76]	; (800811c <HAL_TIM_OC_Start_IT+0xe0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d004      	beq.n	80080dc <HAL_TIM_OC_Start_IT+0xa0>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a12      	ldr	r2, [pc, #72]	; (8008120 <HAL_TIM_OC_Start_IT+0xe4>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d101      	bne.n	80080e0 <HAL_TIM_OC_Start_IT+0xa4>
 80080dc:	2301      	movs	r3, #1
 80080de:	e000      	b.n	80080e2 <HAL_TIM_OC_Start_IT+0xa6>
 80080e0:	2300      	movs	r3, #0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d008      	beq.n	80080f8 <HAL_TIM_OC_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	6812      	ldr	r2, [r2, #0]
 80080ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80080f0:	2180      	movs	r1, #128	; 0x80
 80080f2:	0209      	lsls	r1, r1, #8
 80080f4:	430a      	orrs	r2, r1
 80080f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	6812      	ldr	r2, [r2, #0]
 8008102:	2101      	movs	r1, #1
 8008104:	430a      	orrs	r2, r1
 8008106:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	0018      	movs	r0, r3
 800810c:	46bd      	mov	sp, r7
 800810e:	b002      	add	sp, #8
 8008110:	bd80      	pop	{r7, pc}
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	40012c00 	.word	0x40012c00
 8008118:	40014000 	.word	0x40014000
 800811c:	40014400 	.word	0x40014400
 8008120:	40014800 	.word	0x40014800

08008124 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b04      	cmp	r3, #4
 8008132:	d011      	beq.n	8008158 <HAL_TIM_OC_Stop_IT+0x34>
 8008134:	d802      	bhi.n	800813c <HAL_TIM_OC_Stop_IT+0x18>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 800813a:	e028      	b.n	800818e <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 800813c:	2b08      	cmp	r3, #8
 800813e:	d014      	beq.n	800816a <HAL_TIM_OC_Stop_IT+0x46>
 8008140:	2b0c      	cmp	r3, #12
 8008142:	d01b      	beq.n	800817c <HAL_TIM_OC_Stop_IT+0x58>
    break;
 8008144:	e023      	b.n	800818e <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6812      	ldr	r2, [r2, #0]
 800814e:	68d2      	ldr	r2, [r2, #12]
 8008150:	2102      	movs	r1, #2
 8008152:	438a      	bics	r2, r1
 8008154:	60da      	str	r2, [r3, #12]
    break;
 8008156:	e01a      	b.n	800818e <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	68d2      	ldr	r2, [r2, #12]
 8008162:	2104      	movs	r1, #4
 8008164:	438a      	bics	r2, r1
 8008166:	60da      	str	r2, [r3, #12]
    break;
 8008168:	e011      	b.n	800818e <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	68d2      	ldr	r2, [r2, #12]
 8008174:	2108      	movs	r1, #8
 8008176:	438a      	bics	r2, r1
 8008178:	60da      	str	r2, [r3, #12]
    break;
 800817a:	e008      	b.n	800818e <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	68d2      	ldr	r2, [r2, #12]
 8008186:	2110      	movs	r1, #16
 8008188:	438a      	bics	r2, r1
 800818a:	60da      	str	r2, [r3, #12]
    break;
 800818c:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	2200      	movs	r2, #0
 8008196:	0018      	movs	r0, r3
 8008198:	f003 fc3c 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a21      	ldr	r2, [pc, #132]	; (8008228 <HAL_TIM_OC_Stop_IT+0x104>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00e      	beq.n	80081c4 <HAL_TIM_OC_Stop_IT+0xa0>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a20      	ldr	r2, [pc, #128]	; (800822c <HAL_TIM_OC_Stop_IT+0x108>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d009      	beq.n	80081c4 <HAL_TIM_OC_Stop_IT+0xa0>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <HAL_TIM_OC_Stop_IT+0x10c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <HAL_TIM_OC_Stop_IT+0xa0>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1d      	ldr	r2, [pc, #116]	; (8008234 <HAL_TIM_OC_Stop_IT+0x110>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d101      	bne.n	80081c8 <HAL_TIM_OC_Stop_IT+0xa4>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <HAL_TIM_OC_Stop_IT+0xa6>
 80081c8:	2300      	movs	r3, #0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d013      	beq.n	80081f6 <HAL_TIM_OC_Stop_IT+0xd2>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	4a18      	ldr	r2, [pc, #96]	; (8008238 <HAL_TIM_OC_Stop_IT+0x114>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	d10d      	bne.n	80081f6 <HAL_TIM_OC_Stop_IT+0xd2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	4a16      	ldr	r2, [pc, #88]	; (800823c <HAL_TIM_OC_Stop_IT+0x118>)
 80081e2:	4013      	ands	r3, r2
 80081e4:	d107      	bne.n	80081f6 <HAL_TIM_OC_Stop_IT+0xd2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80081f0:	4913      	ldr	r1, [pc, #76]	; (8008240 <HAL_TIM_OC_Stop_IT+0x11c>)
 80081f2:	400a      	ands	r2, r1
 80081f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6a1b      	ldr	r3, [r3, #32]
 80081fc:	4a0e      	ldr	r2, [pc, #56]	; (8008238 <HAL_TIM_OC_Stop_IT+0x114>)
 80081fe:	4013      	ands	r3, r2
 8008200:	d10d      	bne.n	800821e <HAL_TIM_OC_Stop_IT+0xfa>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	4a0c      	ldr	r2, [pc, #48]	; (800823c <HAL_TIM_OC_Stop_IT+0x118>)
 800820a:	4013      	ands	r3, r2
 800820c:	d107      	bne.n	800821e <HAL_TIM_OC_Stop_IT+0xfa>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	2101      	movs	r1, #1
 800821a:	438a      	bics	r2, r1
 800821c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	0018      	movs	r0, r3
 8008222:	46bd      	mov	sp, r7
 8008224:	b002      	add	sp, #8
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40012c00 	.word	0x40012c00
 800822c:	40014000 	.word	0x40014000
 8008230:	40014400 	.word	0x40014400
 8008234:	40014800 	.word	0x40014800
 8008238:	00001111 	.word	0x00001111
 800823c:	00000444 	.word	0x00000444
 8008240:	ffff7fff 	.word	0xffff7fff

08008244 <HAL_TIM_OC_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	001a      	movs	r2, r3
 8008252:	1cbb      	adds	r3, r7, #2
 8008254:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	223d      	movs	r2, #61	; 0x3d
 800825a:	5c9b      	ldrb	r3, [r3, r2]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b02      	cmp	r3, #2
 8008260:	d101      	bne.n	8008266 <HAL_TIM_OC_Start_DMA+0x22>
  {
     return HAL_BUSY;
 8008262:	2302      	movs	r3, #2
 8008264:	e0c4      	b.n	80083f0 <HAL_TIM_OC_Start_DMA+0x1ac>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	223d      	movs	r2, #61	; 0x3d
 800826a:	5c9b      	ldrb	r3, [r3, r2]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b01      	cmp	r3, #1
 8008270:	d10c      	bne.n	800828c <HAL_TIM_OC_Start_DMA+0x48>
  {
    if(((uint32_t)pData == 0U ) && (Length > 0U))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d105      	bne.n	8008284 <HAL_TIM_OC_Start_DMA+0x40>
 8008278:	1cbb      	adds	r3, r7, #2
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <HAL_TIM_OC_Start_DMA+0x40>
    {
      return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0b5      	b.n	80083f0 <HAL_TIM_OC_Start_DMA+0x1ac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	223d      	movs	r2, #61	; 0x3d
 8008288:	2102      	movs	r1, #2
 800828a:	5499      	strb	r1, [r3, r2]
    }
  }
  switch (Channel)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b04      	cmp	r3, #4
 8008290:	d025      	beq.n	80082de <HAL_TIM_OC_Start_DMA+0x9a>
 8008292:	d802      	bhi.n	800829a <HAL_TIM_OC_Start_DMA+0x56>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_TIM_OC_Start_DMA+0x60>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 8008298:	e078      	b.n	800838c <HAL_TIM_OC_Start_DMA+0x148>
  switch (Channel)
 800829a:	2b08      	cmp	r3, #8
 800829c:	d03c      	beq.n	8008318 <HAL_TIM_OC_Start_DMA+0xd4>
 800829e:	2b0c      	cmp	r3, #12
 80082a0:	d057      	beq.n	8008352 <HAL_TIM_OC_Start_DMA+0x10e>
    break;
 80082a2:	e073      	b.n	800838c <HAL_TIM_OC_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	4a53      	ldr	r2, [pc, #332]	; (80083f8 <HAL_TIM_OC_Start_DMA+0x1b4>)
 80082aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	4a52      	ldr	r2, [pc, #328]	; (80083fc <HAL_TIM_OC_Start_DMA+0x1b8>)
 80082b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3334      	adds	r3, #52	; 0x34
 80082c0:	001a      	movs	r2, r3
 80082c2:	1cbb      	adds	r3, r7, #2
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	f7f8 fb1f 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	68d2      	ldr	r2, [r2, #12]
 80082d4:	2180      	movs	r1, #128	; 0x80
 80082d6:	0089      	lsls	r1, r1, #2
 80082d8:	430a      	orrs	r2, r1
 80082da:	60da      	str	r2, [r3, #12]
    break;
 80082dc:	e056      	b.n	800838c <HAL_TIM_OC_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	4a45      	ldr	r2, [pc, #276]	; (80083f8 <HAL_TIM_OC_Start_DMA+0x1b4>)
 80082e4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	4a44      	ldr	r2, [pc, #272]	; (80083fc <HAL_TIM_OC_Start_DMA+0x1b8>)
 80082ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3338      	adds	r3, #56	; 0x38
 80082fa:	001a      	movs	r2, r3
 80082fc:	1cbb      	adds	r3, r7, #2
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	f7f8 fb02 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	6812      	ldr	r2, [r2, #0]
 800830c:	68d2      	ldr	r2, [r2, #12]
 800830e:	2180      	movs	r1, #128	; 0x80
 8008310:	00c9      	lsls	r1, r1, #3
 8008312:	430a      	orrs	r2, r1
 8008314:	60da      	str	r2, [r3, #12]
    break;
 8008316:	e039      	b.n	800838c <HAL_TIM_OC_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	4a36      	ldr	r2, [pc, #216]	; (80083f8 <HAL_TIM_OC_Start_DMA+0x1b4>)
 800831e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	4a35      	ldr	r2, [pc, #212]	; (80083fc <HAL_TIM_OC_Start_DMA+0x1b8>)
 8008326:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	333c      	adds	r3, #60	; 0x3c
 8008334:	001a      	movs	r2, r3
 8008336:	1cbb      	adds	r3, r7, #2
 8008338:	881b      	ldrh	r3, [r3, #0]
 800833a:	f7f8 fae5 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	6812      	ldr	r2, [r2, #0]
 8008346:	68d2      	ldr	r2, [r2, #12]
 8008348:	2180      	movs	r1, #128	; 0x80
 800834a:	0109      	lsls	r1, r1, #4
 800834c:	430a      	orrs	r2, r1
 800834e:	60da      	str	r2, [r3, #12]
    break;
 8008350:	e01c      	b.n	800838c <HAL_TIM_OC_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008356:	4a28      	ldr	r2, [pc, #160]	; (80083f8 <HAL_TIM_OC_Start_DMA+0x1b4>)
 8008358:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	4a27      	ldr	r2, [pc, #156]	; (80083fc <HAL_TIM_OC_Start_DMA+0x1b8>)
 8008360:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3340      	adds	r3, #64	; 0x40
 800836e:	001a      	movs	r2, r3
 8008370:	1cbb      	adds	r3, r7, #2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	f7f8 fac8 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	6812      	ldr	r2, [r2, #0]
 8008380:	68d2      	ldr	r2, [r2, #12]
 8008382:	2180      	movs	r1, #128	; 0x80
 8008384:	0149      	lsls	r1, r1, #5
 8008386:	430a      	orrs	r2, r1
 8008388:	60da      	str	r2, [r3, #12]
    break;
 800838a:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68b9      	ldr	r1, [r7, #8]
 8008392:	2201      	movs	r2, #1
 8008394:	0018      	movs	r0, r3
 8008396:	f003 fb3d 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a18      	ldr	r2, [pc, #96]	; (8008400 <HAL_TIM_OC_Start_DMA+0x1bc>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00e      	beq.n	80083c2 <HAL_TIM_OC_Start_DMA+0x17e>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a16      	ldr	r2, [pc, #88]	; (8008404 <HAL_TIM_OC_Start_DMA+0x1c0>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d009      	beq.n	80083c2 <HAL_TIM_OC_Start_DMA+0x17e>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a15      	ldr	r2, [pc, #84]	; (8008408 <HAL_TIM_OC_Start_DMA+0x1c4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d004      	beq.n	80083c2 <HAL_TIM_OC_Start_DMA+0x17e>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a13      	ldr	r2, [pc, #76]	; (800840c <HAL_TIM_OC_Start_DMA+0x1c8>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d101      	bne.n	80083c6 <HAL_TIM_OC_Start_DMA+0x182>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <HAL_TIM_OC_Start_DMA+0x184>
 80083c6:	2300      	movs	r3, #0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d008      	beq.n	80083de <HAL_TIM_OC_Start_DMA+0x19a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	6812      	ldr	r2, [r2, #0]
 80083d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80083d6:	2180      	movs	r1, #128	; 0x80
 80083d8:	0209      	lsls	r1, r1, #8
 80083da:	430a      	orrs	r2, r1
 80083dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	6812      	ldr	r2, [r2, #0]
 80083e6:	6812      	ldr	r2, [r2, #0]
 80083e8:	2101      	movs	r1, #1
 80083ea:	430a      	orrs	r2, r1
 80083ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	0018      	movs	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	b004      	add	sp, #16
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	0800aee9 	.word	0x0800aee9
 80083fc:	0800aec3 	.word	0x0800aec3
 8008400:	40012c00 	.word	0x40012c00
 8008404:	40014000 	.word	0x40014000
 8008408:	40014400 	.word	0x40014400
 800840c:	40014800 	.word	0x40014800

08008410 <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b04      	cmp	r3, #4
 800841e:	d011      	beq.n	8008444 <HAL_TIM_OC_Stop_DMA+0x34>
 8008420:	d802      	bhi.n	8008428 <HAL_TIM_OC_Stop_DMA+0x18>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d005      	beq.n	8008432 <HAL_TIM_OC_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 8008426:	e028      	b.n	800847a <HAL_TIM_OC_Stop_DMA+0x6a>
  switch (Channel)
 8008428:	2b08      	cmp	r3, #8
 800842a:	d014      	beq.n	8008456 <HAL_TIM_OC_Stop_DMA+0x46>
 800842c:	2b0c      	cmp	r3, #12
 800842e:	d01b      	beq.n	8008468 <HAL_TIM_OC_Stop_DMA+0x58>
    break;
 8008430:	e023      	b.n	800847a <HAL_TIM_OC_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6812      	ldr	r2, [r2, #0]
 800843a:	68d2      	ldr	r2, [r2, #12]
 800843c:	4937      	ldr	r1, [pc, #220]	; (800851c <HAL_TIM_OC_Stop_DMA+0x10c>)
 800843e:	400a      	ands	r2, r1
 8008440:	60da      	str	r2, [r3, #12]
    break;
 8008442:	e01a      	b.n	800847a <HAL_TIM_OC_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	68d2      	ldr	r2, [r2, #12]
 800844e:	4934      	ldr	r1, [pc, #208]	; (8008520 <HAL_TIM_OC_Stop_DMA+0x110>)
 8008450:	400a      	ands	r2, r1
 8008452:	60da      	str	r2, [r3, #12]
    break;
 8008454:	e011      	b.n	800847a <HAL_TIM_OC_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	6812      	ldr	r2, [r2, #0]
 800845e:	68d2      	ldr	r2, [r2, #12]
 8008460:	4930      	ldr	r1, [pc, #192]	; (8008524 <HAL_TIM_OC_Stop_DMA+0x114>)
 8008462:	400a      	ands	r2, r1
 8008464:	60da      	str	r2, [r3, #12]
    break;
 8008466:	e008      	b.n	800847a <HAL_TIM_OC_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	68d2      	ldr	r2, [r2, #12]
 8008472:	492d      	ldr	r1, [pc, #180]	; (8008528 <HAL_TIM_OC_Stop_DMA+0x118>)
 8008474:	400a      	ands	r2, r1
 8008476:	60da      	str	r2, [r3, #12]
    break;
 8008478:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	2200      	movs	r2, #0
 8008482:	0018      	movs	r0, r3
 8008484:	f003 fac6 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a27      	ldr	r2, [pc, #156]	; (800852c <HAL_TIM_OC_Stop_DMA+0x11c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00e      	beq.n	80084b0 <HAL_TIM_OC_Stop_DMA+0xa0>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a26      	ldr	r2, [pc, #152]	; (8008530 <HAL_TIM_OC_Stop_DMA+0x120>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d009      	beq.n	80084b0 <HAL_TIM_OC_Stop_DMA+0xa0>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a24      	ldr	r2, [pc, #144]	; (8008534 <HAL_TIM_OC_Stop_DMA+0x124>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d004      	beq.n	80084b0 <HAL_TIM_OC_Stop_DMA+0xa0>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a23      	ldr	r2, [pc, #140]	; (8008538 <HAL_TIM_OC_Stop_DMA+0x128>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d101      	bne.n	80084b4 <HAL_TIM_OC_Stop_DMA+0xa4>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e000      	b.n	80084b6 <HAL_TIM_OC_Stop_DMA+0xa6>
 80084b4:	2300      	movs	r3, #0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d013      	beq.n	80084e2 <HAL_TIM_OC_Stop_DMA+0xd2>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6a1b      	ldr	r3, [r3, #32]
 80084c0:	4a1e      	ldr	r2, [pc, #120]	; (800853c <HAL_TIM_OC_Stop_DMA+0x12c>)
 80084c2:	4013      	ands	r3, r2
 80084c4:	d10d      	bne.n	80084e2 <HAL_TIM_OC_Stop_DMA+0xd2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	4a1c      	ldr	r2, [pc, #112]	; (8008540 <HAL_TIM_OC_Stop_DMA+0x130>)
 80084ce:	4013      	ands	r3, r2
 80084d0:	d107      	bne.n	80084e2 <HAL_TIM_OC_Stop_DMA+0xd2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	6812      	ldr	r2, [r2, #0]
 80084da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80084dc:	4919      	ldr	r1, [pc, #100]	; (8008544 <HAL_TIM_OC_Stop_DMA+0x134>)
 80084de:	400a      	ands	r2, r1
 80084e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	4a14      	ldr	r2, [pc, #80]	; (800853c <HAL_TIM_OC_Stop_DMA+0x12c>)
 80084ea:	4013      	ands	r3, r2
 80084ec:	d10d      	bne.n	800850a <HAL_TIM_OC_Stop_DMA+0xfa>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	4a12      	ldr	r2, [pc, #72]	; (8008540 <HAL_TIM_OC_Stop_DMA+0x130>)
 80084f6:	4013      	ands	r3, r2
 80084f8:	d107      	bne.n	800850a <HAL_TIM_OC_Stop_DMA+0xfa>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	6812      	ldr	r2, [r2, #0]
 8008502:	6812      	ldr	r2, [r2, #0]
 8008504:	2101      	movs	r1, #1
 8008506:	438a      	bics	r2, r1
 8008508:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	223d      	movs	r2, #61	; 0x3d
 800850e:	2101      	movs	r1, #1
 8008510:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	0018      	movs	r0, r3
 8008516:	46bd      	mov	sp, r7
 8008518:	b002      	add	sp, #8
 800851a:	bd80      	pop	{r7, pc}
 800851c:	fffffdff 	.word	0xfffffdff
 8008520:	fffffbff 	.word	0xfffffbff
 8008524:	fffff7ff 	.word	0xfffff7ff
 8008528:	ffffefff 	.word	0xffffefff
 800852c:	40012c00 	.word	0x40012c00
 8008530:	40014000 	.word	0x40014000
 8008534:	40014400 	.word	0x40014400
 8008538:	40014800 	.word	0x40014800
 800853c:	00001111 	.word	0x00001111
 8008540:	00000444 	.word	0x00000444
 8008544:	ffff7fff 	.word	0xffff7fff

08008548 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e01e      	b.n	8008598 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	223d      	movs	r2, #61	; 0x3d
 800855e:	5c9b      	ldrb	r3, [r3, r2]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d107      	bne.n	8008576 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	223c      	movs	r2, #60	; 0x3c
 800856a:	2100      	movs	r1, #0
 800856c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	0018      	movs	r0, r3
 8008572:	f000 f847 	bl	8008604 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	223d      	movs	r2, #61	; 0x3d
 800857a:	2102      	movs	r1, #2
 800857c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3304      	adds	r3, #4
 8008586:	0019      	movs	r1, r3
 8008588:	0010      	movs	r0, r2
 800858a:	f002 fd45 	bl	800b018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	223d      	movs	r2, #61	; 0x3d
 8008592:	2101      	movs	r1, #1
 8008594:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	0018      	movs	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	b002      	add	sp, #8
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral 
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	223d      	movs	r2, #61	; 0x3d
 80085ac:	2102      	movs	r1, #2
 80085ae:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	4a11      	ldr	r2, [pc, #68]	; (80085fc <HAL_TIM_PWM_DeInit+0x5c>)
 80085b8:	4013      	ands	r3, r2
 80085ba:	d10d      	bne.n	80085d8 <HAL_TIM_PWM_DeInit+0x38>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	4a0f      	ldr	r2, [pc, #60]	; (8008600 <HAL_TIM_PWM_DeInit+0x60>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	d107      	bne.n	80085d8 <HAL_TIM_PWM_DeInit+0x38>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6812      	ldr	r2, [r2, #0]
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	2101      	movs	r1, #1
 80085d4:	438a      	bics	r2, r1
 80085d6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	0018      	movs	r0, r3
 80085dc:	f000 f81a 	bl	8008614 <HAL_TIM_PWM_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	223d      	movs	r2, #61	; 0x3d
 80085e4:	2100      	movs	r1, #0
 80085e6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	223c      	movs	r2, #60	; 0x3c
 80085ec:	2100      	movs	r1, #0
 80085ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	0018      	movs	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	b002      	add	sp, #8
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	00001111 	.word	0x00001111
 8008600:	00000444 	.word	0x00000444

08008604 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800860c:	46c0      	nop			; (mov r8, r8)
 800860e:	46bd      	mov	sp, r7
 8008610:	b002      	add	sp, #8
 8008612:	bd80      	pop	{r7, pc}

08008614 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800861c:	46c0      	nop			; (mov r8, r8)
 800861e:	46bd      	mov	sp, r7
 8008620:	b002      	add	sp, #8
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	2201      	movs	r2, #1
 8008636:	0018      	movs	r0, r3
 8008638:	f003 f9ec 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a16      	ldr	r2, [pc, #88]	; (800869c <HAL_TIM_PWM_Start+0x78>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00e      	beq.n	8008664 <HAL_TIM_PWM_Start+0x40>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <HAL_TIM_PWM_Start+0x7c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d009      	beq.n	8008664 <HAL_TIM_PWM_Start+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a13      	ldr	r2, [pc, #76]	; (80086a4 <HAL_TIM_PWM_Start+0x80>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d004      	beq.n	8008664 <HAL_TIM_PWM_Start+0x40>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a12      	ldr	r2, [pc, #72]	; (80086a8 <HAL_TIM_PWM_Start+0x84>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d101      	bne.n	8008668 <HAL_TIM_PWM_Start+0x44>
 8008664:	2301      	movs	r3, #1
 8008666:	e000      	b.n	800866a <HAL_TIM_PWM_Start+0x46>
 8008668:	2300      	movs	r3, #0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d008      	beq.n	8008680 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6812      	ldr	r2, [r2, #0]
 8008676:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008678:	2180      	movs	r1, #128	; 0x80
 800867a:	0209      	lsls	r1, r1, #8
 800867c:	430a      	orrs	r2, r1
 800867e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	6812      	ldr	r2, [r2, #0]
 800868a:	2101      	movs	r1, #1
 800868c:	430a      	orrs	r2, r1
 800868e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	0018      	movs	r0, r3
 8008694:	46bd      	mov	sp, r7
 8008696:	b002      	add	sp, #8
 8008698:	bd80      	pop	{r7, pc}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	40012c00 	.word	0x40012c00
 80086a0:	40014000 	.word	0x40014000
 80086a4:	40014400 	.word	0x40014400
 80086a8:	40014800 	.word	0x40014800

080086ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	2200      	movs	r2, #0
 80086be:	0018      	movs	r0, r3
 80086c0:	f003 f9a8 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a23      	ldr	r2, [pc, #140]	; (8008758 <HAL_TIM_PWM_Stop+0xac>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00e      	beq.n	80086ec <HAL_TIM_PWM_Stop+0x40>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a22      	ldr	r2, [pc, #136]	; (800875c <HAL_TIM_PWM_Stop+0xb0>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d009      	beq.n	80086ec <HAL_TIM_PWM_Stop+0x40>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a20      	ldr	r2, [pc, #128]	; (8008760 <HAL_TIM_PWM_Stop+0xb4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d004      	beq.n	80086ec <HAL_TIM_PWM_Stop+0x40>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a1f      	ldr	r2, [pc, #124]	; (8008764 <HAL_TIM_PWM_Stop+0xb8>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d101      	bne.n	80086f0 <HAL_TIM_PWM_Stop+0x44>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <HAL_TIM_PWM_Stop+0x46>
 80086f0:	2300      	movs	r3, #0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d013      	beq.n	800871e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	4a1a      	ldr	r2, [pc, #104]	; (8008768 <HAL_TIM_PWM_Stop+0xbc>)
 80086fe:	4013      	ands	r3, r2
 8008700:	d10d      	bne.n	800871e <HAL_TIM_PWM_Stop+0x72>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	4a18      	ldr	r2, [pc, #96]	; (800876c <HAL_TIM_PWM_Stop+0xc0>)
 800870a:	4013      	ands	r3, r2
 800870c:	d107      	bne.n	800871e <HAL_TIM_PWM_Stop+0x72>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6812      	ldr	r2, [r2, #0]
 8008716:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008718:	4915      	ldr	r1, [pc, #84]	; (8008770 <HAL_TIM_PWM_Stop+0xc4>)
 800871a:	400a      	ands	r2, r1
 800871c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	4a10      	ldr	r2, [pc, #64]	; (8008768 <HAL_TIM_PWM_Stop+0xbc>)
 8008726:	4013      	ands	r3, r2
 8008728:	d10d      	bne.n	8008746 <HAL_TIM_PWM_Stop+0x9a>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	4a0e      	ldr	r2, [pc, #56]	; (800876c <HAL_TIM_PWM_Stop+0xc0>)
 8008732:	4013      	ands	r3, r2
 8008734:	d107      	bne.n	8008746 <HAL_TIM_PWM_Stop+0x9a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	2101      	movs	r1, #1
 8008742:	438a      	bics	r2, r1
 8008744:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	223d      	movs	r2, #61	; 0x3d
 800874a:	2101      	movs	r1, #1
 800874c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	0018      	movs	r0, r3
 8008752:	46bd      	mov	sp, r7
 8008754:	b002      	add	sp, #8
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40012c00 	.word	0x40012c00
 800875c:	40014000 	.word	0x40014000
 8008760:	40014400 	.word	0x40014400
 8008764:	40014800 	.word	0x40014800
 8008768:	00001111 	.word	0x00001111
 800876c:	00000444 	.word	0x00000444
 8008770:	ffff7fff 	.word	0xffff7fff

08008774 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b04      	cmp	r3, #4
 8008782:	d011      	beq.n	80087a8 <HAL_TIM_PWM_Start_IT+0x34>
 8008784:	d802      	bhi.n	800878c <HAL_TIM_PWM_Start_IT+0x18>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d005      	beq.n	8008796 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 800878a:	e028      	b.n	80087de <HAL_TIM_PWM_Start_IT+0x6a>
  switch (Channel)
 800878c:	2b08      	cmp	r3, #8
 800878e:	d014      	beq.n	80087ba <HAL_TIM_PWM_Start_IT+0x46>
 8008790:	2b0c      	cmp	r3, #12
 8008792:	d01b      	beq.n	80087cc <HAL_TIM_PWM_Start_IT+0x58>
    break;
 8008794:	e023      	b.n	80087de <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	68d2      	ldr	r2, [r2, #12]
 80087a0:	2102      	movs	r1, #2
 80087a2:	430a      	orrs	r2, r1
 80087a4:	60da      	str	r2, [r3, #12]
    break;
 80087a6:	e01a      	b.n	80087de <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	68d2      	ldr	r2, [r2, #12]
 80087b2:	2104      	movs	r1, #4
 80087b4:	430a      	orrs	r2, r1
 80087b6:	60da      	str	r2, [r3, #12]
    break;
 80087b8:	e011      	b.n	80087de <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	68d2      	ldr	r2, [r2, #12]
 80087c4:	2108      	movs	r1, #8
 80087c6:	430a      	orrs	r2, r1
 80087c8:	60da      	str	r2, [r3, #12]
    break;
 80087ca:	e008      	b.n	80087de <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	6812      	ldr	r2, [r2, #0]
 80087d4:	68d2      	ldr	r2, [r2, #12]
 80087d6:	2110      	movs	r1, #16
 80087d8:	430a      	orrs	r2, r1
 80087da:	60da      	str	r2, [r3, #12]
    break;
 80087dc:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	2201      	movs	r2, #1
 80087e6:	0018      	movs	r0, r3
 80087e8:	f003 f914 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a16      	ldr	r2, [pc, #88]	; (800884c <HAL_TIM_PWM_Start_IT+0xd8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00e      	beq.n	8008814 <HAL_TIM_PWM_Start_IT+0xa0>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a15      	ldr	r2, [pc, #84]	; (8008850 <HAL_TIM_PWM_Start_IT+0xdc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d009      	beq.n	8008814 <HAL_TIM_PWM_Start_IT+0xa0>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a13      	ldr	r2, [pc, #76]	; (8008854 <HAL_TIM_PWM_Start_IT+0xe0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d004      	beq.n	8008814 <HAL_TIM_PWM_Start_IT+0xa0>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a12      	ldr	r2, [pc, #72]	; (8008858 <HAL_TIM_PWM_Start_IT+0xe4>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d101      	bne.n	8008818 <HAL_TIM_PWM_Start_IT+0xa4>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <HAL_TIM_PWM_Start_IT+0xa6>
 8008818:	2300      	movs	r3, #0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d008      	beq.n	8008830 <HAL_TIM_PWM_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6812      	ldr	r2, [r2, #0]
 8008826:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008828:	2180      	movs	r1, #128	; 0x80
 800882a:	0209      	lsls	r1, r1, #8
 800882c:	430a      	orrs	r2, r1
 800882e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6812      	ldr	r2, [r2, #0]
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	2101      	movs	r1, #1
 800883c:	430a      	orrs	r2, r1
 800883e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	0018      	movs	r0, r3
 8008844:	46bd      	mov	sp, r7
 8008846:	b002      	add	sp, #8
 8008848:	bd80      	pop	{r7, pc}
 800884a:	46c0      	nop			; (mov r8, r8)
 800884c:	40012c00 	.word	0x40012c00
 8008850:	40014000 	.word	0x40014000
 8008854:	40014400 	.word	0x40014400
 8008858:	40014800 	.word	0x40014800

0800885c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b04      	cmp	r3, #4
 800886a:	d011      	beq.n	8008890 <HAL_TIM_PWM_Stop_IT+0x34>
 800886c:	d802      	bhi.n	8008874 <HAL_TIM_PWM_Stop_IT+0x18>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d005      	beq.n	800887e <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 8008872:	e028      	b.n	80088c6 <HAL_TIM_PWM_Stop_IT+0x6a>
  switch (Channel)
 8008874:	2b08      	cmp	r3, #8
 8008876:	d014      	beq.n	80088a2 <HAL_TIM_PWM_Stop_IT+0x46>
 8008878:	2b0c      	cmp	r3, #12
 800887a:	d01b      	beq.n	80088b4 <HAL_TIM_PWM_Stop_IT+0x58>
    break;
 800887c:	e023      	b.n	80088c6 <HAL_TIM_PWM_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	68d2      	ldr	r2, [r2, #12]
 8008888:	2102      	movs	r1, #2
 800888a:	438a      	bics	r2, r1
 800888c:	60da      	str	r2, [r3, #12]
    break;
 800888e:	e01a      	b.n	80088c6 <HAL_TIM_PWM_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6812      	ldr	r2, [r2, #0]
 8008898:	68d2      	ldr	r2, [r2, #12]
 800889a:	2104      	movs	r1, #4
 800889c:	438a      	bics	r2, r1
 800889e:	60da      	str	r2, [r3, #12]
    break;
 80088a0:	e011      	b.n	80088c6 <HAL_TIM_PWM_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	68d2      	ldr	r2, [r2, #12]
 80088ac:	2108      	movs	r1, #8
 80088ae:	438a      	bics	r2, r1
 80088b0:	60da      	str	r2, [r3, #12]
    break;
 80088b2:	e008      	b.n	80088c6 <HAL_TIM_PWM_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	68d2      	ldr	r2, [r2, #12]
 80088be:	2110      	movs	r1, #16
 80088c0:	438a      	bics	r2, r1
 80088c2:	60da      	str	r2, [r3, #12]
    break;
 80088c4:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	2200      	movs	r2, #0
 80088ce:	0018      	movs	r0, r3
 80088d0:	f003 f8a0 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a21      	ldr	r2, [pc, #132]	; (8008960 <HAL_TIM_PWM_Stop_IT+0x104>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d00e      	beq.n	80088fc <HAL_TIM_PWM_Stop_IT+0xa0>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a20      	ldr	r2, [pc, #128]	; (8008964 <HAL_TIM_PWM_Stop_IT+0x108>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d009      	beq.n	80088fc <HAL_TIM_PWM_Stop_IT+0xa0>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1e      	ldr	r2, [pc, #120]	; (8008968 <HAL_TIM_PWM_Stop_IT+0x10c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d004      	beq.n	80088fc <HAL_TIM_PWM_Stop_IT+0xa0>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1d      	ldr	r2, [pc, #116]	; (800896c <HAL_TIM_PWM_Stop_IT+0x110>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d101      	bne.n	8008900 <HAL_TIM_PWM_Stop_IT+0xa4>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e000      	b.n	8008902 <HAL_TIM_PWM_Stop_IT+0xa6>
 8008900:	2300      	movs	r3, #0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d013      	beq.n	800892e <HAL_TIM_PWM_Stop_IT+0xd2>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	4a18      	ldr	r2, [pc, #96]	; (8008970 <HAL_TIM_PWM_Stop_IT+0x114>)
 800890e:	4013      	ands	r3, r2
 8008910:	d10d      	bne.n	800892e <HAL_TIM_PWM_Stop_IT+0xd2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	4a16      	ldr	r2, [pc, #88]	; (8008974 <HAL_TIM_PWM_Stop_IT+0x118>)
 800891a:	4013      	ands	r3, r2
 800891c:	d107      	bne.n	800892e <HAL_TIM_PWM_Stop_IT+0xd2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6812      	ldr	r2, [r2, #0]
 8008926:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008928:	4913      	ldr	r1, [pc, #76]	; (8008978 <HAL_TIM_PWM_Stop_IT+0x11c>)
 800892a:	400a      	ands	r2, r1
 800892c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	4a0e      	ldr	r2, [pc, #56]	; (8008970 <HAL_TIM_PWM_Stop_IT+0x114>)
 8008936:	4013      	ands	r3, r2
 8008938:	d10d      	bne.n	8008956 <HAL_TIM_PWM_Stop_IT+0xfa>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6a1b      	ldr	r3, [r3, #32]
 8008940:	4a0c      	ldr	r2, [pc, #48]	; (8008974 <HAL_TIM_PWM_Stop_IT+0x118>)
 8008942:	4013      	ands	r3, r2
 8008944:	d107      	bne.n	8008956 <HAL_TIM_PWM_Stop_IT+0xfa>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	6812      	ldr	r2, [r2, #0]
 8008950:	2101      	movs	r1, #1
 8008952:	438a      	bics	r2, r1
 8008954:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	0018      	movs	r0, r3
 800895a:	46bd      	mov	sp, r7
 800895c:	b002      	add	sp, #8
 800895e:	bd80      	pop	{r7, pc}
 8008960:	40012c00 	.word	0x40012c00
 8008964:	40014000 	.word	0x40014000
 8008968:	40014400 	.word	0x40014400
 800896c:	40014800 	.word	0x40014800
 8008970:	00001111 	.word	0x00001111
 8008974:	00000444 	.word	0x00000444
 8008978:	ffff7fff 	.word	0xffff7fff

0800897c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	001a      	movs	r2, r3
 800898a:	1cbb      	adds	r3, r7, #2
 800898c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	223d      	movs	r2, #61	; 0x3d
 8008992:	5c9b      	ldrb	r3, [r3, r2]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b02      	cmp	r3, #2
 8008998:	d101      	bne.n	800899e <HAL_TIM_PWM_Start_DMA+0x22>
  {
     return HAL_BUSY;
 800899a:	2302      	movs	r3, #2
 800899c:	e0c4      	b.n	8008b28 <HAL_TIM_PWM_Start_DMA+0x1ac>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	223d      	movs	r2, #61	; 0x3d
 80089a2:	5c9b      	ldrb	r3, [r3, r2]
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d10c      	bne.n	80089c4 <HAL_TIM_PWM_Start_DMA+0x48>
  {
    if(((uint32_t)pData == 0U ) && (Length > 0U))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d105      	bne.n	80089bc <HAL_TIM_PWM_Start_DMA+0x40>
 80089b0:	1cbb      	adds	r3, r7, #2
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <HAL_TIM_PWM_Start_DMA+0x40>
    {
      return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e0b5      	b.n	8008b28 <HAL_TIM_PWM_Start_DMA+0x1ac>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	223d      	movs	r2, #61	; 0x3d
 80089c0:	2102      	movs	r1, #2
 80089c2:	5499      	strb	r1, [r3, r2]
    }
  }
  switch (Channel)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d025      	beq.n	8008a16 <HAL_TIM_PWM_Start_DMA+0x9a>
 80089ca:	d802      	bhi.n	80089d2 <HAL_TIM_PWM_Start_DMA+0x56>
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <HAL_TIM_PWM_Start_DMA+0x60>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 80089d0:	e078      	b.n	8008ac4 <HAL_TIM_PWM_Start_DMA+0x148>
  switch (Channel)
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d03c      	beq.n	8008a50 <HAL_TIM_PWM_Start_DMA+0xd4>
 80089d6:	2b0c      	cmp	r3, #12
 80089d8:	d057      	beq.n	8008a8a <HAL_TIM_PWM_Start_DMA+0x10e>
    break;
 80089da:	e073      	b.n	8008ac4 <HAL_TIM_PWM_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	4a53      	ldr	r2, [pc, #332]	; (8008b30 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 80089e2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	4a52      	ldr	r2, [pc, #328]	; (8008b34 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 80089ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3334      	adds	r3, #52	; 0x34
 80089f8:	001a      	movs	r2, r3
 80089fa:	1cbb      	adds	r3, r7, #2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	f7f7 ff83 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	6812      	ldr	r2, [r2, #0]
 8008a0a:	68d2      	ldr	r2, [r2, #12]
 8008a0c:	2180      	movs	r1, #128	; 0x80
 8008a0e:	0089      	lsls	r1, r1, #2
 8008a10:	430a      	orrs	r2, r1
 8008a12:	60da      	str	r2, [r3, #12]
    break;
 8008a14:	e056      	b.n	8008ac4 <HAL_TIM_PWM_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	4a45      	ldr	r2, [pc, #276]	; (8008b30 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8008a1c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	4a44      	ldr	r2, [pc, #272]	; (8008b34 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8008a24:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3338      	adds	r3, #56	; 0x38
 8008a32:	001a      	movs	r2, r3
 8008a34:	1cbb      	adds	r3, r7, #2
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	f7f7 ff66 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	6812      	ldr	r2, [r2, #0]
 8008a44:	68d2      	ldr	r2, [r2, #12]
 8008a46:	2180      	movs	r1, #128	; 0x80
 8008a48:	00c9      	lsls	r1, r1, #3
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	60da      	str	r2, [r3, #12]
    break;
 8008a4e:	e039      	b.n	8008ac4 <HAL_TIM_PWM_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	4a36      	ldr	r2, [pc, #216]	; (8008b30 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8008a56:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	4a35      	ldr	r2, [pc, #212]	; (8008b34 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8008a5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	333c      	adds	r3, #60	; 0x3c
 8008a6c:	001a      	movs	r2, r3
 8008a6e:	1cbb      	adds	r3, r7, #2
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	f7f7 ff49 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	6812      	ldr	r2, [r2, #0]
 8008a7e:	68d2      	ldr	r2, [r2, #12]
 8008a80:	2180      	movs	r1, #128	; 0x80
 8008a82:	0109      	lsls	r1, r1, #4
 8008a84:	430a      	orrs	r2, r1
 8008a86:	60da      	str	r2, [r3, #12]
    break;
 8008a88:	e01c      	b.n	8008ac4 <HAL_TIM_PWM_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8e:	4a28      	ldr	r2, [pc, #160]	; (8008b30 <HAL_TIM_PWM_Start_DMA+0x1b4>)
 8008a90:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	4a27      	ldr	r2, [pc, #156]	; (8008b34 <HAL_TIM_PWM_Start_DMA+0x1b8>)
 8008a98:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3340      	adds	r3, #64	; 0x40
 8008aa6:	001a      	movs	r2, r3
 8008aa8:	1cbb      	adds	r3, r7, #2
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	f7f7 ff2c 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	68d2      	ldr	r2, [r2, #12]
 8008aba:	2180      	movs	r1, #128	; 0x80
 8008abc:	0149      	lsls	r1, r1, #5
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	60da      	str	r2, [r3, #12]
    break;
 8008ac2:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	2201      	movs	r2, #1
 8008acc:	0018      	movs	r0, r3
 8008ace:	f002 ffa1 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <HAL_TIM_PWM_Start_DMA+0x1bc>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00e      	beq.n	8008afa <HAL_TIM_PWM_Start_DMA+0x17e>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a16      	ldr	r2, [pc, #88]	; (8008b3c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d009      	beq.n	8008afa <HAL_TIM_PWM_Start_DMA+0x17e>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d004      	beq.n	8008afa <HAL_TIM_PWM_Start_DMA+0x17e>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <HAL_TIM_PWM_Start_DMA+0x1c8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d101      	bne.n	8008afe <HAL_TIM_PWM_Start_DMA+0x182>
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <HAL_TIM_PWM_Start_DMA+0x184>
 8008afe:	2300      	movs	r3, #0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d008      	beq.n	8008b16 <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b0e:	2180      	movs	r1, #128	; 0x80
 8008b10:	0209      	lsls	r1, r1, #8
 8008b12:	430a      	orrs	r2, r1
 8008b14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	6812      	ldr	r2, [r2, #0]
 8008b1e:	6812      	ldr	r2, [r2, #0]
 8008b20:	2101      	movs	r1, #1
 8008b22:	430a      	orrs	r2, r1
 8008b24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	0018      	movs	r0, r3
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	b004      	add	sp, #16
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	0800aee9 	.word	0x0800aee9
 8008b34:	0800aec3 	.word	0x0800aec3
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	40014400 	.word	0x40014400
 8008b44:	40014800 	.word	0x40014800

08008b48 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d011      	beq.n	8008b7c <HAL_TIM_PWM_Stop_DMA+0x34>
 8008b58:	d802      	bhi.n	8008b60 <HAL_TIM_PWM_Stop_DMA+0x18>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d005      	beq.n	8008b6a <HAL_TIM_PWM_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 8008b5e:	e028      	b.n	8008bb2 <HAL_TIM_PWM_Stop_DMA+0x6a>
  switch (Channel)
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d014      	beq.n	8008b8e <HAL_TIM_PWM_Stop_DMA+0x46>
 8008b64:	2b0c      	cmp	r3, #12
 8008b66:	d01b      	beq.n	8008ba0 <HAL_TIM_PWM_Stop_DMA+0x58>
    break;
 8008b68:	e023      	b.n	8008bb2 <HAL_TIM_PWM_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	68d2      	ldr	r2, [r2, #12]
 8008b74:	4937      	ldr	r1, [pc, #220]	; (8008c54 <HAL_TIM_PWM_Stop_DMA+0x10c>)
 8008b76:	400a      	ands	r2, r1
 8008b78:	60da      	str	r2, [r3, #12]
    break;
 8008b7a:	e01a      	b.n	8008bb2 <HAL_TIM_PWM_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6812      	ldr	r2, [r2, #0]
 8008b84:	68d2      	ldr	r2, [r2, #12]
 8008b86:	4934      	ldr	r1, [pc, #208]	; (8008c58 <HAL_TIM_PWM_Stop_DMA+0x110>)
 8008b88:	400a      	ands	r2, r1
 8008b8a:	60da      	str	r2, [r3, #12]
    break;
 8008b8c:	e011      	b.n	8008bb2 <HAL_TIM_PWM_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6812      	ldr	r2, [r2, #0]
 8008b96:	68d2      	ldr	r2, [r2, #12]
 8008b98:	4930      	ldr	r1, [pc, #192]	; (8008c5c <HAL_TIM_PWM_Stop_DMA+0x114>)
 8008b9a:	400a      	ands	r2, r1
 8008b9c:	60da      	str	r2, [r3, #12]
    break;
 8008b9e:	e008      	b.n	8008bb2 <HAL_TIM_PWM_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	68d2      	ldr	r2, [r2, #12]
 8008baa:	492d      	ldr	r1, [pc, #180]	; (8008c60 <HAL_TIM_PWM_Stop_DMA+0x118>)
 8008bac:	400a      	ands	r2, r1
 8008bae:	60da      	str	r2, [r3, #12]
    break;
 8008bb0:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	0018      	movs	r0, r3
 8008bbc:	f002 ff2a 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a27      	ldr	r2, [pc, #156]	; (8008c64 <HAL_TIM_PWM_Stop_DMA+0x11c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d00e      	beq.n	8008be8 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a26      	ldr	r2, [pc, #152]	; (8008c68 <HAL_TIM_PWM_Stop_DMA+0x120>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d009      	beq.n	8008be8 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a24      	ldr	r2, [pc, #144]	; (8008c6c <HAL_TIM_PWM_Stop_DMA+0x124>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d004      	beq.n	8008be8 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a23      	ldr	r2, [pc, #140]	; (8008c70 <HAL_TIM_PWM_Stop_DMA+0x128>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d101      	bne.n	8008bec <HAL_TIM_PWM_Stop_DMA+0xa4>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e000      	b.n	8008bee <HAL_TIM_PWM_Stop_DMA+0xa6>
 8008bec:	2300      	movs	r3, #0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d013      	beq.n	8008c1a <HAL_TIM_PWM_Stop_DMA+0xd2>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	4a1e      	ldr	r2, [pc, #120]	; (8008c74 <HAL_TIM_PWM_Stop_DMA+0x12c>)
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	d10d      	bne.n	8008c1a <HAL_TIM_PWM_Stop_DMA+0xd2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	4a1c      	ldr	r2, [pc, #112]	; (8008c78 <HAL_TIM_PWM_Stop_DMA+0x130>)
 8008c06:	4013      	ands	r3, r2
 8008c08:	d107      	bne.n	8008c1a <HAL_TIM_PWM_Stop_DMA+0xd2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	6812      	ldr	r2, [r2, #0]
 8008c12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008c14:	4919      	ldr	r1, [pc, #100]	; (8008c7c <HAL_TIM_PWM_Stop_DMA+0x134>)
 8008c16:	400a      	ands	r2, r1
 8008c18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	4a14      	ldr	r2, [pc, #80]	; (8008c74 <HAL_TIM_PWM_Stop_DMA+0x12c>)
 8008c22:	4013      	ands	r3, r2
 8008c24:	d10d      	bne.n	8008c42 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	4a12      	ldr	r2, [pc, #72]	; (8008c78 <HAL_TIM_PWM_Stop_DMA+0x130>)
 8008c2e:	4013      	ands	r3, r2
 8008c30:	d107      	bne.n	8008c42 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6812      	ldr	r2, [r2, #0]
 8008c3a:	6812      	ldr	r2, [r2, #0]
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	438a      	bics	r2, r1
 8008c40:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	223d      	movs	r2, #61	; 0x3d
 8008c46:	2101      	movs	r1, #1
 8008c48:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b002      	add	sp, #8
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	fffffdff 	.word	0xfffffdff
 8008c58:	fffffbff 	.word	0xfffffbff
 8008c5c:	fffff7ff 	.word	0xfffff7ff
 8008c60:	ffffefff 	.word	0xffffefff
 8008c64:	40012c00 	.word	0x40012c00
 8008c68:	40014000 	.word	0x40014000
 8008c6c:	40014400 	.word	0x40014400
 8008c70:	40014800 	.word	0x40014800
 8008c74:	00001111 	.word	0x00001111
 8008c78:	00000444 	.word	0x00000444
 8008c7c:	ffff7fff 	.word	0xffff7fff

08008c80 <HAL_TIM_IC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e01e      	b.n	8008cd0 <HAL_TIM_IC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	223d      	movs	r2, #61	; 0x3d
 8008c96:	5c9b      	ldrb	r3, [r3, r2]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d107      	bne.n	8008cae <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	223c      	movs	r2, #60	; 0x3c
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	0018      	movs	r0, r3
 8008caa:	f000 f847 	bl	8008d3c <HAL_TIM_IC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	223d      	movs	r2, #61	; 0x3d
 8008cb2:	2102      	movs	r1, #2
 8008cb4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	0019      	movs	r1, r3
 8008cc0:	0010      	movs	r0, r2
 8008cc2:	f002 f9a9 	bl	800b018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	223d      	movs	r2, #61	; 0x3d
 8008cca:	2101      	movs	r1, #1
 8008ccc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	b002      	add	sp, #8
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral 
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	223d      	movs	r2, #61	; 0x3d
 8008ce4:	2102      	movs	r1, #2
 8008ce6:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	4a11      	ldr	r2, [pc, #68]	; (8008d34 <HAL_TIM_IC_DeInit+0x5c>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	d10d      	bne.n	8008d10 <HAL_TIM_IC_DeInit+0x38>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	4a0f      	ldr	r2, [pc, #60]	; (8008d38 <HAL_TIM_IC_DeInit+0x60>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	d107      	bne.n	8008d10 <HAL_TIM_IC_DeInit+0x38>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	6812      	ldr	r2, [r2, #0]
 8008d08:	6812      	ldr	r2, [r2, #0]
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	438a      	bics	r2, r1
 8008d0e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	0018      	movs	r0, r3
 8008d14:	f000 f81a 	bl	8008d4c <HAL_TIM_IC_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	223d      	movs	r2, #61	; 0x3d
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	223c      	movs	r2, #60	; 0x3c
 8008d24:	2100      	movs	r1, #0
 8008d26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	b002      	add	sp, #8
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	00001111 	.word	0x00001111
 8008d38:	00000444 	.word	0x00000444

08008d3c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008d44:	46c0      	nop			; (mov r8, r8)
 8008d46:	46bd      	mov	sp, r7
 8008d48:	b002      	add	sp, #8
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 8008d54:	46c0      	nop			; (mov r8, r8)
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b002      	add	sp, #8
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f002 fe50 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6812      	ldr	r2, [r2, #0]
 8008d7c:	6812      	ldr	r2, [r2, #0]
 8008d7e:	2101      	movs	r1, #1
 8008d80:	430a      	orrs	r2, r1
 8008d82:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	0018      	movs	r0, r3
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	b002      	add	sp, #8
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	0018      	movs	r0, r3
 8008da2:	f002 fe37 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	4a0a      	ldr	r2, [pc, #40]	; (8008dd8 <HAL_TIM_IC_Stop+0x4a>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	d10d      	bne.n	8008dce <HAL_TIM_IC_Stop+0x40>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	4a08      	ldr	r2, [pc, #32]	; (8008ddc <HAL_TIM_IC_Stop+0x4e>)
 8008dba:	4013      	ands	r3, r2
 8008dbc:	d107      	bne.n	8008dce <HAL_TIM_IC_Stop+0x40>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6812      	ldr	r2, [r2, #0]
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	2101      	movs	r1, #1
 8008dca:	438a      	bics	r2, r1
 8008dcc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	b002      	add	sp, #8
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	00001111 	.word	0x00001111
 8008ddc:	00000444 	.word	0x00000444

08008de0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	d011      	beq.n	8008e14 <HAL_TIM_IC_Start_IT+0x34>
 8008df0:	d802      	bhi.n	8008df8 <HAL_TIM_IC_Start_IT+0x18>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 8008df6:	e028      	b.n	8008e4a <HAL_TIM_IC_Start_IT+0x6a>
  switch (Channel)
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d014      	beq.n	8008e26 <HAL_TIM_IC_Start_IT+0x46>
 8008dfc:	2b0c      	cmp	r3, #12
 8008dfe:	d01b      	beq.n	8008e38 <HAL_TIM_IC_Start_IT+0x58>
    break;
 8008e00:	e023      	b.n	8008e4a <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	6812      	ldr	r2, [r2, #0]
 8008e0a:	68d2      	ldr	r2, [r2, #12]
 8008e0c:	2102      	movs	r1, #2
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	60da      	str	r2, [r3, #12]
    break;
 8008e12:	e01a      	b.n	8008e4a <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	6812      	ldr	r2, [r2, #0]
 8008e1c:	68d2      	ldr	r2, [r2, #12]
 8008e1e:	2104      	movs	r1, #4
 8008e20:	430a      	orrs	r2, r1
 8008e22:	60da      	str	r2, [r3, #12]
    break;
 8008e24:	e011      	b.n	8008e4a <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6812      	ldr	r2, [r2, #0]
 8008e2e:	68d2      	ldr	r2, [r2, #12]
 8008e30:	2108      	movs	r1, #8
 8008e32:	430a      	orrs	r2, r1
 8008e34:	60da      	str	r2, [r3, #12]
    break;
 8008e36:	e008      	b.n	8008e4a <HAL_TIM_IC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	6812      	ldr	r2, [r2, #0]
 8008e40:	68d2      	ldr	r2, [r2, #12]
 8008e42:	2110      	movs	r1, #16
 8008e44:	430a      	orrs	r2, r1
 8008e46:	60da      	str	r2, [r3, #12]
    break;
 8008e48:	46c0      	nop			; (mov r8, r8)
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6839      	ldr	r1, [r7, #0]
 8008e50:	2201      	movs	r2, #1
 8008e52:	0018      	movs	r0, r3
 8008e54:	f002 fdde 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	6812      	ldr	r2, [r2, #0]
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	2101      	movs	r1, #1
 8008e64:	430a      	orrs	r2, r1
 8008e66:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	b002      	add	sp, #8
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d011      	beq.n	8008ea6 <HAL_TIM_IC_Stop_IT+0x34>
 8008e82:	d802      	bhi.n	8008e8a <HAL_TIM_IC_Stop_IT+0x18>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d005      	beq.n	8008e94 <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 8008e88:	e028      	b.n	8008edc <HAL_TIM_IC_Stop_IT+0x6a>
  switch (Channel)
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	d014      	beq.n	8008eb8 <HAL_TIM_IC_Stop_IT+0x46>
 8008e8e:	2b0c      	cmp	r3, #12
 8008e90:	d01b      	beq.n	8008eca <HAL_TIM_IC_Stop_IT+0x58>
    break;
 8008e92:	e023      	b.n	8008edc <HAL_TIM_IC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	68d2      	ldr	r2, [r2, #12]
 8008e9e:	2102      	movs	r1, #2
 8008ea0:	438a      	bics	r2, r1
 8008ea2:	60da      	str	r2, [r3, #12]
    break;
 8008ea4:	e01a      	b.n	8008edc <HAL_TIM_IC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	6812      	ldr	r2, [r2, #0]
 8008eae:	68d2      	ldr	r2, [r2, #12]
 8008eb0:	2104      	movs	r1, #4
 8008eb2:	438a      	bics	r2, r1
 8008eb4:	60da      	str	r2, [r3, #12]
    break;
 8008eb6:	e011      	b.n	8008edc <HAL_TIM_IC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	68d2      	ldr	r2, [r2, #12]
 8008ec2:	2108      	movs	r1, #8
 8008ec4:	438a      	bics	r2, r1
 8008ec6:	60da      	str	r2, [r3, #12]
    break;
 8008ec8:	e008      	b.n	8008edc <HAL_TIM_IC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	6812      	ldr	r2, [r2, #0]
 8008ed2:	68d2      	ldr	r2, [r2, #12]
 8008ed4:	2110      	movs	r1, #16
 8008ed6:	438a      	bics	r2, r1
 8008ed8:	60da      	str	r2, [r3, #12]
    break;
 8008eda:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f002 fd95 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6a1b      	ldr	r3, [r3, #32]
 8008ef0:	4a0a      	ldr	r2, [pc, #40]	; (8008f1c <HAL_TIM_IC_Stop_IT+0xaa>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	d10d      	bne.n	8008f12 <HAL_TIM_IC_Stop_IT+0xa0>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	4a08      	ldr	r2, [pc, #32]	; (8008f20 <HAL_TIM_IC_Stop_IT+0xae>)
 8008efe:	4013      	ands	r3, r2
 8008f00:	d107      	bne.n	8008f12 <HAL_TIM_IC_Stop_IT+0xa0>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6812      	ldr	r2, [r2, #0]
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	438a      	bics	r2, r1
 8008f10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	0018      	movs	r0, r3
 8008f16:	46bd      	mov	sp, r7
 8008f18:	b002      	add	sp, #8
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	00001111 	.word	0x00001111
 8008f20:	00000444 	.word	0x00000444

08008f24 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	001a      	movs	r2, r3
 8008f32:	1cbb      	adds	r3, r7, #2
 8008f34:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if((htim->State == HAL_TIM_STATE_BUSY))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	223d      	movs	r2, #61	; 0x3d
 8008f3a:	5c9b      	ldrb	r3, [r3, r2]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d101      	bne.n	8008f46 <HAL_TIM_IC_Start_DMA+0x22>
  {
     return HAL_BUSY;
 8008f42:	2302      	movs	r3, #2
 8008f44:	e0a2      	b.n	800908c <HAL_TIM_IC_Start_DMA+0x168>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	223d      	movs	r2, #61	; 0x3d
 8008f4a:	5c9b      	ldrb	r3, [r3, r2]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d10c      	bne.n	8008f6c <HAL_TIM_IC_Start_DMA+0x48>
  {
    if((pData == 0U ) && (Length > 0U))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d105      	bne.n	8008f64 <HAL_TIM_IC_Start_DMA+0x40>
 8008f58:	1cbb      	adds	r3, r7, #2
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <HAL_TIM_IC_Start_DMA+0x40>
    {
      return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e093      	b.n	800908c <HAL_TIM_IC_Start_DMA+0x168>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	223d      	movs	r2, #61	; 0x3d
 8008f68:	2102      	movs	r1, #2
 8008f6a:	5499      	strb	r1, [r3, r2]
    }
  }

  switch (Channel)
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d025      	beq.n	8008fbe <HAL_TIM_IC_Start_DMA+0x9a>
 8008f72:	d802      	bhi.n	8008f7a <HAL_TIM_IC_Start_DMA+0x56>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d005      	beq.n	8008f84 <HAL_TIM_IC_Start_DMA+0x60>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 8008f78:	e078      	b.n	800906c <HAL_TIM_IC_Start_DMA+0x148>
  switch (Channel)
 8008f7a:	2b08      	cmp	r3, #8
 8008f7c:	d03c      	beq.n	8008ff8 <HAL_TIM_IC_Start_DMA+0xd4>
 8008f7e:	2b0c      	cmp	r3, #12
 8008f80:	d057      	beq.n	8009032 <HAL_TIM_IC_Start_DMA+0x10e>
    break;
 8008f82:	e073      	b.n	800906c <HAL_TIM_IC_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	4a42      	ldr	r2, [pc, #264]	; (8009094 <HAL_TIM_IC_Start_DMA+0x170>)
 8008f8a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	4a41      	ldr	r2, [pc, #260]	; (8009098 <HAL_TIM_IC_Start_DMA+0x174>)
 8008f92:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3334      	adds	r3, #52	; 0x34
 8008f9e:	0019      	movs	r1, r3
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	1cbb      	adds	r3, r7, #2
 8008fa4:	881b      	ldrh	r3, [r3, #0]
 8008fa6:	f7f7 fcaf 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	6812      	ldr	r2, [r2, #0]
 8008fb2:	68d2      	ldr	r2, [r2, #12]
 8008fb4:	2180      	movs	r1, #128	; 0x80
 8008fb6:	0089      	lsls	r1, r1, #2
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	60da      	str	r2, [r3, #12]
    break;
 8008fbc:	e056      	b.n	800906c <HAL_TIM_IC_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc2:	4a34      	ldr	r2, [pc, #208]	; (8009094 <HAL_TIM_IC_Start_DMA+0x170>)
 8008fc4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	4a33      	ldr	r2, [pc, #204]	; (8009098 <HAL_TIM_IC_Start_DMA+0x174>)
 8008fcc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3338      	adds	r3, #56	; 0x38
 8008fd8:	0019      	movs	r1, r3
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	1cbb      	adds	r3, r7, #2
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	f7f7 fc92 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	6812      	ldr	r2, [r2, #0]
 8008fec:	68d2      	ldr	r2, [r2, #12]
 8008fee:	2180      	movs	r1, #128	; 0x80
 8008ff0:	00c9      	lsls	r1, r1, #3
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	60da      	str	r2, [r3, #12]
    break;
 8008ff6:	e039      	b.n	800906c <HAL_TIM_IC_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	4a25      	ldr	r2, [pc, #148]	; (8009094 <HAL_TIM_IC_Start_DMA+0x170>)
 8008ffe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	4a24      	ldr	r2, [pc, #144]	; (8009098 <HAL_TIM_IC_Start_DMA+0x174>)
 8009006:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	333c      	adds	r3, #60	; 0x3c
 8009012:	0019      	movs	r1, r3
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	1cbb      	adds	r3, r7, #2
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	f7f7 fc75 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	68d2      	ldr	r2, [r2, #12]
 8009028:	2180      	movs	r1, #128	; 0x80
 800902a:	0109      	lsls	r1, r1, #4
 800902c:	430a      	orrs	r2, r1
 800902e:	60da      	str	r2, [r3, #12]
    break;
 8009030:	e01c      	b.n	800906c <HAL_TIM_IC_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	4a17      	ldr	r2, [pc, #92]	; (8009094 <HAL_TIM_IC_Start_DMA+0x170>)
 8009038:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903e:	4a16      	ldr	r2, [pc, #88]	; (8009098 <HAL_TIM_IC_Start_DMA+0x174>)
 8009040:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3340      	adds	r3, #64	; 0x40
 800904c:	0019      	movs	r1, r3
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	1cbb      	adds	r3, r7, #2
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	f7f7 fc58 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	6812      	ldr	r2, [r2, #0]
 8009060:	68d2      	ldr	r2, [r2, #12]
 8009062:	2180      	movs	r1, #128	; 0x80
 8009064:	0149      	lsls	r1, r1, #5
 8009066:	430a      	orrs	r2, r1
 8009068:	60da      	str	r2, [r3, #12]
    break;
 800906a:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68b9      	ldr	r1, [r7, #8]
 8009072:	2201      	movs	r2, #1
 8009074:	0018      	movs	r0, r3
 8009076:	f002 fccd 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	6812      	ldr	r2, [r2, #0]
 8009082:	6812      	ldr	r2, [r2, #0]
 8009084:	2101      	movs	r1, #1
 8009086:	430a      	orrs	r2, r1
 8009088:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	0018      	movs	r0, r3
 800908e:	46bd      	mov	sp, r7
 8009090:	b004      	add	sp, #16
 8009092:	bd80      	pop	{r7, pc}
 8009094:	0800af5b 	.word	0x0800af5b
 8009098:	0800aec3 	.word	0x0800aec3

0800909c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d011      	beq.n	80090d0 <HAL_TIM_IC_Stop_DMA+0x34>
 80090ac:	d802      	bhi.n	80090b4 <HAL_TIM_IC_Stop_DMA+0x18>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <HAL_TIM_IC_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 80090b2:	e028      	b.n	8009106 <HAL_TIM_IC_Stop_DMA+0x6a>
  switch (Channel)
 80090b4:	2b08      	cmp	r3, #8
 80090b6:	d014      	beq.n	80090e2 <HAL_TIM_IC_Stop_DMA+0x46>
 80090b8:	2b0c      	cmp	r3, #12
 80090ba:	d01b      	beq.n	80090f4 <HAL_TIM_IC_Stop_DMA+0x58>
    break;
 80090bc:	e023      	b.n	8009106 <HAL_TIM_IC_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6812      	ldr	r2, [r2, #0]
 80090c6:	68d2      	ldr	r2, [r2, #12]
 80090c8:	4921      	ldr	r1, [pc, #132]	; (8009150 <HAL_TIM_IC_Stop_DMA+0xb4>)
 80090ca:	400a      	ands	r2, r1
 80090cc:	60da      	str	r2, [r3, #12]
    break;
 80090ce:	e01a      	b.n	8009106 <HAL_TIM_IC_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6812      	ldr	r2, [r2, #0]
 80090d8:	68d2      	ldr	r2, [r2, #12]
 80090da:	491e      	ldr	r1, [pc, #120]	; (8009154 <HAL_TIM_IC_Stop_DMA+0xb8>)
 80090dc:	400a      	ands	r2, r1
 80090de:	60da      	str	r2, [r3, #12]
    break;
 80090e0:	e011      	b.n	8009106 <HAL_TIM_IC_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	6812      	ldr	r2, [r2, #0]
 80090ea:	68d2      	ldr	r2, [r2, #12]
 80090ec:	491a      	ldr	r1, [pc, #104]	; (8009158 <HAL_TIM_IC_Stop_DMA+0xbc>)
 80090ee:	400a      	ands	r2, r1
 80090f0:	60da      	str	r2, [r3, #12]
    break;
 80090f2:	e008      	b.n	8009106 <HAL_TIM_IC_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6812      	ldr	r2, [r2, #0]
 80090fc:	68d2      	ldr	r2, [r2, #12]
 80090fe:	4917      	ldr	r1, [pc, #92]	; (800915c <HAL_TIM_IC_Stop_DMA+0xc0>)
 8009100:	400a      	ands	r2, r1
 8009102:	60da      	str	r2, [r3, #12]
    break;
 8009104:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	2200      	movs	r2, #0
 800910e:	0018      	movs	r0, r3
 8009110:	f002 fc80 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	4a11      	ldr	r2, [pc, #68]	; (8009160 <HAL_TIM_IC_Stop_DMA+0xc4>)
 800911c:	4013      	ands	r3, r2
 800911e:	d10d      	bne.n	800913c <HAL_TIM_IC_Stop_DMA+0xa0>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	4a0f      	ldr	r2, [pc, #60]	; (8009164 <HAL_TIM_IC_Stop_DMA+0xc8>)
 8009128:	4013      	ands	r3, r2
 800912a:	d107      	bne.n	800913c <HAL_TIM_IC_Stop_DMA+0xa0>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	6812      	ldr	r2, [r2, #0]
 8009136:	2101      	movs	r1, #1
 8009138:	438a      	bics	r2, r1
 800913a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	223d      	movs	r2, #61	; 0x3d
 8009140:	2101      	movs	r1, #1
 8009142:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	0018      	movs	r0, r3
 8009148:	46bd      	mov	sp, r7
 800914a:	b002      	add	sp, #8
 800914c:	bd80      	pop	{r7, pc}
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	fffffdff 	.word	0xfffffdff
 8009154:	fffffbff 	.word	0xfffffbff
 8009158:	fffff7ff 	.word	0xfffff7ff
 800915c:	ffffefff 	.word	0xffffefff
 8009160:	00001111 	.word	0x00001111
 8009164:	00000444 	.word	0x00000444

08009168 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses wil be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e02e      	b.n	80091da <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	223d      	movs	r2, #61	; 0x3d
 8009180:	5c9b      	ldrb	r3, [r3, r2]
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d107      	bne.n	8009198 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	223c      	movs	r2, #60	; 0x3c
 800918c:	2100      	movs	r1, #0
 800918e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	0018      	movs	r0, r3
 8009194:	f000 f856 	bl	8009244 <HAL_TIM_OnePulse_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	223d      	movs	r2, #61	; 0x3d
 800919c:	2102      	movs	r1, #2
 800919e:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	0019      	movs	r1, r3
 80091aa:	0010      	movs	r0, r2
 80091ac:	f001 ff34 	bl	800b018 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	6812      	ldr	r2, [r2, #0]
 80091ba:	2108      	movs	r1, #8
 80091bc:	438a      	bics	r2, r1
 80091be:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	6811      	ldr	r1, [r2, #0]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	223d      	movs	r2, #61	; 0x3d
 80091d4:	2101      	movs	r1, #1
 80091d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	0018      	movs	r0, r3
 80091dc:	46bd      	mov	sp, r7
 80091de:	b002      	add	sp, #8
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse 
  * @param  htim TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	223d      	movs	r2, #61	; 0x3d
 80091ee:	2102      	movs	r1, #2
 80091f0:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	4a10      	ldr	r2, [pc, #64]	; (800923c <HAL_TIM_OnePulse_DeInit+0x5a>)
 80091fa:	4013      	ands	r3, r2
 80091fc:	d10d      	bne.n	800921a <HAL_TIM_OnePulse_DeInit+0x38>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	4a0e      	ldr	r2, [pc, #56]	; (8009240 <HAL_TIM_OnePulse_DeInit+0x5e>)
 8009206:	4013      	ands	r3, r2
 8009208:	d107      	bne.n	800921a <HAL_TIM_OnePulse_DeInit+0x38>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6812      	ldr	r2, [r2, #0]
 8009212:	6812      	ldr	r2, [r2, #0]
 8009214:	2101      	movs	r1, #1
 8009216:	438a      	bics	r2, r1
 8009218:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	0018      	movs	r0, r3
 800921e:	f000 f819 	bl	8009254 <HAL_TIM_OnePulse_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	223d      	movs	r2, #61	; 0x3d
 8009226:	2100      	movs	r1, #0
 8009228:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	223c      	movs	r2, #60	; 0x3c
 800922e:	2100      	movs	r1, #0
 8009230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	0018      	movs	r0, r3
 8009236:	46bd      	mov	sp, r7
 8009238:	b002      	add	sp, #8
 800923a:	bd80      	pop	{r7, pc}
 800923c:	00001111 	.word	0x00001111
 8009240:	00000444 	.word	0x00000444

08009244 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800924c:	46c0      	nop			; (mov r8, r8)
 800924e:	46bd      	mov	sp, r7
 8009250:	b002      	add	sp, #8
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 800925c:	46c0      	nop			; (mov r8, r8)
 800925e:	46bd      	mov	sp, r7
 8009260:	b002      	add	sp, #8
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together 

    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2201      	movs	r2, #1
 8009274:	2100      	movs	r1, #0
 8009276:	0018      	movs	r0, r3
 8009278:	f002 fbcc 	bl	800ba14 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2201      	movs	r2, #1
 8009282:	2104      	movs	r1, #4
 8009284:	0018      	movs	r0, r3
 8009286:	f002 fbc5 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a12      	ldr	r2, [pc, #72]	; (80092d8 <HAL_TIM_OnePulse_Start+0x74>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00e      	beq.n	80092b2 <HAL_TIM_OnePulse_Start+0x4e>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a10      	ldr	r2, [pc, #64]	; (80092dc <HAL_TIM_OnePulse_Start+0x78>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d009      	beq.n	80092b2 <HAL_TIM_OnePulse_Start+0x4e>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a0f      	ldr	r2, [pc, #60]	; (80092e0 <HAL_TIM_OnePulse_Start+0x7c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d004      	beq.n	80092b2 <HAL_TIM_OnePulse_Start+0x4e>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a0d      	ldr	r2, [pc, #52]	; (80092e4 <HAL_TIM_OnePulse_Start+0x80>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d101      	bne.n	80092b6 <HAL_TIM_OnePulse_Start+0x52>
 80092b2:	2301      	movs	r3, #1
 80092b4:	e000      	b.n	80092b8 <HAL_TIM_OnePulse_Start+0x54>
 80092b6:	2300      	movs	r3, #0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d008      	beq.n	80092ce <HAL_TIM_OnePulse_Start+0x6a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80092c6:	2180      	movs	r1, #128	; 0x80
 80092c8:	0209      	lsls	r1, r1, #8
 80092ca:	430a      	orrs	r2, r1
 80092cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	0018      	movs	r0, r3
 80092d2:	46bd      	mov	sp, r7
 80092d4:	b002      	add	sp, #8
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	40012c00 	.word	0x40012c00
 80092dc:	40014000 	.word	0x40014000
 80092e0:	40014400 	.word	0x40014400
 80092e4:	40014800 	.word	0x40014800

080092e8 <HAL_TIM_OnePulse_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2200      	movs	r2, #0
 80092f8:	2100      	movs	r1, #0
 80092fa:	0018      	movs	r0, r3
 80092fc:	f002 fb8a 	bl	800ba14 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2200      	movs	r2, #0
 8009306:	2104      	movs	r1, #4
 8009308:	0018      	movs	r0, r3
 800930a:	f002 fb83 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a22      	ldr	r2, [pc, #136]	; (800939c <HAL_TIM_OnePulse_Stop+0xb4>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d00e      	beq.n	8009336 <HAL_TIM_OnePulse_Stop+0x4e>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a20      	ldr	r2, [pc, #128]	; (80093a0 <HAL_TIM_OnePulse_Stop+0xb8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d009      	beq.n	8009336 <HAL_TIM_OnePulse_Stop+0x4e>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a1f      	ldr	r2, [pc, #124]	; (80093a4 <HAL_TIM_OnePulse_Stop+0xbc>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d004      	beq.n	8009336 <HAL_TIM_OnePulse_Stop+0x4e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a1d      	ldr	r2, [pc, #116]	; (80093a8 <HAL_TIM_OnePulse_Stop+0xc0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d101      	bne.n	800933a <HAL_TIM_OnePulse_Stop+0x52>
 8009336:	2301      	movs	r3, #1
 8009338:	e000      	b.n	800933c <HAL_TIM_OnePulse_Stop+0x54>
 800933a:	2300      	movs	r3, #0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d013      	beq.n	8009368 <HAL_TIM_OnePulse_Stop+0x80>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	4a19      	ldr	r2, [pc, #100]	; (80093ac <HAL_TIM_OnePulse_Stop+0xc4>)
 8009348:	4013      	ands	r3, r2
 800934a:	d10d      	bne.n	8009368 <HAL_TIM_OnePulse_Stop+0x80>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	4a17      	ldr	r2, [pc, #92]	; (80093b0 <HAL_TIM_OnePulse_Stop+0xc8>)
 8009354:	4013      	ands	r3, r2
 8009356:	d107      	bne.n	8009368 <HAL_TIM_OnePulse_Stop+0x80>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6812      	ldr	r2, [r2, #0]
 8009360:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009362:	4914      	ldr	r1, [pc, #80]	; (80093b4 <HAL_TIM_OnePulse_Stop+0xcc>)
 8009364:	400a      	ands	r2, r1
 8009366:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	4a0f      	ldr	r2, [pc, #60]	; (80093ac <HAL_TIM_OnePulse_Stop+0xc4>)
 8009370:	4013      	ands	r3, r2
 8009372:	d10d      	bne.n	8009390 <HAL_TIM_OnePulse_Stop+0xa8>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	4a0d      	ldr	r2, [pc, #52]	; (80093b0 <HAL_TIM_OnePulse_Stop+0xc8>)
 800937c:	4013      	ands	r3, r2
 800937e:	d107      	bne.n	8009390 <HAL_TIM_OnePulse_Stop+0xa8>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6812      	ldr	r2, [r2, #0]
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	2101      	movs	r1, #1
 800938c:	438a      	bics	r2, r1
 800938e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	0018      	movs	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	b002      	add	sp, #8
 8009398:	bd80      	pop	{r7, pc}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	40012c00 	.word	0x40012c00
 80093a0:	40014000 	.word	0x40014000
 80093a4:	40014400 	.word	0x40014400
 80093a8:	40014800 	.word	0x40014800
 80093ac:	00001111 	.word	0x00001111
 80093b0:	00000444 	.word	0x00000444
 80093b4:	ffff7fff 	.word	0xffff7fff

080093b8 <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]

    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	6812      	ldr	r2, [r2, #0]
 80093ca:	68d2      	ldr	r2, [r2, #12]
 80093cc:	2102      	movs	r1, #2
 80093ce:	430a      	orrs	r2, r1
 80093d0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	6812      	ldr	r2, [r2, #0]
 80093da:	68d2      	ldr	r2, [r2, #12]
 80093dc:	2104      	movs	r1, #4
 80093de:	430a      	orrs	r2, r1
 80093e0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2201      	movs	r2, #1
 80093e8:	2100      	movs	r1, #0
 80093ea:	0018      	movs	r0, r3
 80093ec:	f002 fb12 	bl	800ba14 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2201      	movs	r2, #1
 80093f6:	2104      	movs	r1, #4
 80093f8:	0018      	movs	r0, r3
 80093fa:	f002 fb0b 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a12      	ldr	r2, [pc, #72]	; (800944c <HAL_TIM_OnePulse_Start_IT+0x94>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00e      	beq.n	8009426 <HAL_TIM_OnePulse_Start_IT+0x6e>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a10      	ldr	r2, [pc, #64]	; (8009450 <HAL_TIM_OnePulse_Start_IT+0x98>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d009      	beq.n	8009426 <HAL_TIM_OnePulse_Start_IT+0x6e>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a0f      	ldr	r2, [pc, #60]	; (8009454 <HAL_TIM_OnePulse_Start_IT+0x9c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d004      	beq.n	8009426 <HAL_TIM_OnePulse_Start_IT+0x6e>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0d      	ldr	r2, [pc, #52]	; (8009458 <HAL_TIM_OnePulse_Start_IT+0xa0>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d101      	bne.n	800942a <HAL_TIM_OnePulse_Start_IT+0x72>
 8009426:	2301      	movs	r3, #1
 8009428:	e000      	b.n	800942c <HAL_TIM_OnePulse_Start_IT+0x74>
 800942a:	2300      	movs	r3, #0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d008      	beq.n	8009442 <HAL_TIM_OnePulse_Start_IT+0x8a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	6812      	ldr	r2, [r2, #0]
 8009438:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800943a:	2180      	movs	r1, #128	; 0x80
 800943c:	0209      	lsls	r1, r1, #8
 800943e:	430a      	orrs	r2, r1
 8009440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	0018      	movs	r0, r3
 8009446:	46bd      	mov	sp, r7
 8009448:	b002      	add	sp, #8
 800944a:	bd80      	pop	{r7, pc}
 800944c:	40012c00 	.word	0x40012c00
 8009450:	40014000 	.word	0x40014000
 8009454:	40014400 	.word	0x40014400
 8009458:	40014800 	.word	0x40014800

0800945c <HAL_TIM_OnePulse_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	6812      	ldr	r2, [r2, #0]
 800946e:	68d2      	ldr	r2, [r2, #12]
 8009470:	2102      	movs	r1, #2
 8009472:	438a      	bics	r2, r1
 8009474:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	68d2      	ldr	r2, [r2, #12]
 8009480:	2104      	movs	r1, #4
 8009482:	438a      	bics	r2, r1
 8009484:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels 
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output 
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2200      	movs	r2, #0
 800948c:	2100      	movs	r1, #0
 800948e:	0018      	movs	r0, r3
 8009490:	f002 fac0 	bl	800ba14 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2200      	movs	r2, #0
 800949a:	2104      	movs	r1, #4
 800949c:	0018      	movs	r0, r3
 800949e:	f002 fab9 	bl	800ba14 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a22      	ldr	r2, [pc, #136]	; (8009530 <HAL_TIM_OnePulse_Stop_IT+0xd4>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00e      	beq.n	80094ca <HAL_TIM_OnePulse_Stop_IT+0x6e>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a20      	ldr	r2, [pc, #128]	; (8009534 <HAL_TIM_OnePulse_Stop_IT+0xd8>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d009      	beq.n	80094ca <HAL_TIM_OnePulse_Stop_IT+0x6e>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a1f      	ldr	r2, [pc, #124]	; (8009538 <HAL_TIM_OnePulse_Stop_IT+0xdc>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d004      	beq.n	80094ca <HAL_TIM_OnePulse_Stop_IT+0x6e>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a1d      	ldr	r2, [pc, #116]	; (800953c <HAL_TIM_OnePulse_Stop_IT+0xe0>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d101      	bne.n	80094ce <HAL_TIM_OnePulse_Stop_IT+0x72>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <HAL_TIM_OnePulse_Stop_IT+0x74>
 80094ce:	2300      	movs	r3, #0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d013      	beq.n	80094fc <HAL_TIM_OnePulse_Stop_IT+0xa0>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	4a19      	ldr	r2, [pc, #100]	; (8009540 <HAL_TIM_OnePulse_Stop_IT+0xe4>)
 80094dc:	4013      	ands	r3, r2
 80094de:	d10d      	bne.n	80094fc <HAL_TIM_OnePulse_Stop_IT+0xa0>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	4a17      	ldr	r2, [pc, #92]	; (8009544 <HAL_TIM_OnePulse_Stop_IT+0xe8>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	d107      	bne.n	80094fc <HAL_TIM_OnePulse_Stop_IT+0xa0>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6812      	ldr	r2, [r2, #0]
 80094f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80094f6:	4914      	ldr	r1, [pc, #80]	; (8009548 <HAL_TIM_OnePulse_Stop_IT+0xec>)
 80094f8:	400a      	ands	r2, r1
 80094fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	4a0f      	ldr	r2, [pc, #60]	; (8009540 <HAL_TIM_OnePulse_Stop_IT+0xe4>)
 8009504:	4013      	ands	r3, r2
 8009506:	d10d      	bne.n	8009524 <HAL_TIM_OnePulse_Stop_IT+0xc8>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	4a0d      	ldr	r2, [pc, #52]	; (8009544 <HAL_TIM_OnePulse_Stop_IT+0xe8>)
 8009510:	4013      	ands	r3, r2
 8009512:	d107      	bne.n	8009524 <HAL_TIM_OnePulse_Stop_IT+0xc8>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6812      	ldr	r2, [r2, #0]
 800951c:	6812      	ldr	r2, [r2, #0]
 800951e:	2101      	movs	r1, #1
 8009520:	438a      	bics	r2, r1
 8009522:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	0018      	movs	r0, r3
 8009528:	46bd      	mov	sp, r7
 800952a:	b002      	add	sp, #8
 800952c:	bd80      	pop	{r7, pc}
 800952e:	46c0      	nop			; (mov r8, r8)
 8009530:	40012c00 	.word	0x40012c00
 8009534:	40014000 	.word	0x40014000
 8009538:	40014400 	.word	0x40014400
 800953c:	40014800 	.word	0x40014800
 8009540:	00001111 	.word	0x00001111
 8009544:	00000444 	.word	0x00000444
 8009548:	ffff7fff 	.word	0xffff7fff

0800954c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e07c      	b.n	8009666 <HAL_TIM_Encoder_Init+0x11a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	223d      	movs	r2, #61	; 0x3d
 8009570:	5c9b      	ldrb	r3, [r3, r2]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d107      	bne.n	8009588 <HAL_TIM_Encoder_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	223c      	movs	r2, #60	; 0x3c
 800957c:	2100      	movs	r1, #0
 800957e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	0018      	movs	r0, r3
 8009584:	f000 f8ac 	bl	80096e0 <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	223d      	movs	r2, #61	; 0x3d
 800958c:	2102      	movs	r1, #2
 800958e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	6892      	ldr	r2, [r2, #8]
 800959a:	2107      	movs	r1, #7
 800959c:	438a      	bics	r2, r1
 800959e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3304      	adds	r3, #4
 80095a8:	0019      	movs	r1, r3
 80095aa:	0010      	movs	r0, r2
 80095ac:	f001 fd34 	bl	800b018 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	4a26      	ldr	r2, [pc, #152]	; (8009670 <HAL_TIM_Encoder_Init+0x124>)
 80095d6:	4013      	ands	r3, r2
 80095d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	4313      	orrs	r3, r2
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	4a21      	ldr	r2, [pc, #132]	; (8009674 <HAL_TIM_Encoder_Init+0x128>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	4a20      	ldr	r2, [pc, #128]	; (8009678 <HAL_TIM_Encoder_Init+0x12c>)
 80095f8:	4013      	ands	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	021b      	lsls	r3, r3, #8
 8009606:	4313      	orrs	r3, r2
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	4313      	orrs	r3, r2
 800960c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	011a      	lsls	r2, r3, #4
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	031b      	lsls	r3, r3, #12
 800961a:	4313      	orrs	r3, r2
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4313      	orrs	r3, r2
 8009620:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2222      	movs	r2, #34	; 0x22
 8009626:	4393      	bics	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2288      	movs	r2, #136	; 0x88
 800962e:	4393      	bics	r3, r2
 8009630:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	011b      	lsls	r3, r3, #4
 800963c:	4313      	orrs	r3, r2
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	223d      	movs	r2, #61	; 0x3d
 8009660:	2101      	movs	r1, #1
 8009662:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	0018      	movs	r0, r3
 8009668:	46bd      	mov	sp, r7
 800966a:	b006      	add	sp, #24
 800966c:	bd80      	pop	{r7, pc}
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	fffffcfc 	.word	0xfffffcfc
 8009674:	fffff3f3 	.word	0xfffff3f3
 8009678:	ffff0f0f 	.word	0xffff0f0f

0800967c <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface 
  * @param  htim TIM Encoder handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	223d      	movs	r2, #61	; 0x3d
 8009688:	2102      	movs	r1, #2
 800968a:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	4a11      	ldr	r2, [pc, #68]	; (80096d8 <HAL_TIM_Encoder_DeInit+0x5c>)
 8009694:	4013      	ands	r3, r2
 8009696:	d10d      	bne.n	80096b4 <HAL_TIM_Encoder_DeInit+0x38>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	4a0f      	ldr	r2, [pc, #60]	; (80096dc <HAL_TIM_Encoder_DeInit+0x60>)
 80096a0:	4013      	ands	r3, r2
 80096a2:	d107      	bne.n	80096b4 <HAL_TIM_Encoder_DeInit+0x38>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6812      	ldr	r2, [r2, #0]
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	2101      	movs	r1, #1
 80096b0:	438a      	bics	r2, r1
 80096b2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	0018      	movs	r0, r3
 80096b8:	f000 f81a 	bl	80096f0 <HAL_TIM_Encoder_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	223d      	movs	r2, #61	; 0x3d
 80096c0:	2100      	movs	r1, #0
 80096c2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	223c      	movs	r2, #60	; 0x3c
 80096c8:	2100      	movs	r1, #0
 80096ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	0018      	movs	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	b002      	add	sp, #8
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	46c0      	nop			; (mov r8, r8)
 80096d8:	00001111 	.word	0x00001111
 80096dc:	00000444 	.word	0x00000444

080096e0 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80096e8:	46c0      	nop			; (mov r8, r8)
 80096ea:	46bd      	mov	sp, r7
 80096ec:	b002      	add	sp, #8
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 80096f8:	46c0      	nop			; (mov r8, r8)
 80096fa:	46bd      	mov	sp, r7
 80096fc:	b002      	add	sp, #8
 80096fe:	bd80      	pop	{r7, pc}

08009700 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <HAL_TIM_Encoder_Start+0x16>
 8009710:	2b04      	cmp	r3, #4
 8009712:	d008      	beq.n	8009726 <HAL_TIM_Encoder_Start+0x26>
 8009714:	e00f      	b.n	8009736 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2201      	movs	r2, #1
 800971c:	2100      	movs	r1, #0
 800971e:	0018      	movs	r0, r3
 8009720:	f002 f978 	bl	800ba14 <TIM_CCxChannelCmd>
      break;
 8009724:	e016      	b.n	8009754 <HAL_TIM_Encoder_Start+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2201      	movs	r2, #1
 800972c:	2104      	movs	r1, #4
 800972e:	0018      	movs	r0, r3
 8009730:	f002 f970 	bl	800ba14 <TIM_CCxChannelCmd>
      break;
 8009734:	e00e      	b.n	8009754 <HAL_TIM_Encoder_Start+0x54>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2201      	movs	r2, #1
 800973c:	2100      	movs	r1, #0
 800973e:	0018      	movs	r0, r3
 8009740:	f002 f968 	bl	800ba14 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2201      	movs	r2, #1
 800974a:	2104      	movs	r1, #4
 800974c:	0018      	movs	r0, r3
 800974e:	f002 f961 	bl	800ba14 <TIM_CCxChannelCmd>
     break;
 8009752:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	6812      	ldr	r2, [r2, #0]
 800975e:	2101      	movs	r1, #1
 8009760:	430a      	orrs	r2, r1
 8009762:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	0018      	movs	r0, r3
 8009768:	46bd      	mov	sp, r7
 800976a:	b002      	add	sp, #8
 800976c:	bd80      	pop	{r7, pc}

0800976e <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

   /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <HAL_TIM_Encoder_Stop+0x16>
 800977e:	2b04      	cmp	r3, #4
 8009780:	d008      	beq.n	8009794 <HAL_TIM_Encoder_Stop+0x26>
 8009782:	e00f      	b.n	80097a4 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2200      	movs	r2, #0
 800978a:	2100      	movs	r1, #0
 800978c:	0018      	movs	r0, r3
 800978e:	f002 f941 	bl	800ba14 <TIM_CCxChannelCmd>
      break;
 8009792:	e016      	b.n	80097c2 <HAL_TIM_Encoder_Stop+0x54>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2200      	movs	r2, #0
 800979a:	2104      	movs	r1, #4
 800979c:	0018      	movs	r0, r3
 800979e:	f002 f939 	bl	800ba14 <TIM_CCxChannelCmd>
      break;
 80097a2:	e00e      	b.n	80097c2 <HAL_TIM_Encoder_Stop+0x54>
  }
    default :
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2200      	movs	r2, #0
 80097aa:	2100      	movs	r1, #0
 80097ac:	0018      	movs	r0, r3
 80097ae:	f002 f931 	bl	800ba14 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2200      	movs	r2, #0
 80097b8:	2104      	movs	r1, #4
 80097ba:	0018      	movs	r0, r3
 80097bc:	f002 f92a 	bl	800ba14 <TIM_CCxChannelCmd>
     break;
 80097c0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6a1b      	ldr	r3, [r3, #32]
 80097c8:	4a0a      	ldr	r2, [pc, #40]	; (80097f4 <HAL_TIM_Encoder_Stop+0x86>)
 80097ca:	4013      	ands	r3, r2
 80097cc:	d10d      	bne.n	80097ea <HAL_TIM_Encoder_Stop+0x7c>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	4a08      	ldr	r2, [pc, #32]	; (80097f8 <HAL_TIM_Encoder_Stop+0x8a>)
 80097d6:	4013      	ands	r3, r2
 80097d8:	d107      	bne.n	80097ea <HAL_TIM_Encoder_Stop+0x7c>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	6812      	ldr	r2, [r2, #0]
 80097e2:	6812      	ldr	r2, [r2, #0]
 80097e4:	2101      	movs	r1, #1
 80097e6:	438a      	bics	r2, r1
 80097e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	0018      	movs	r0, r3
 80097ee:	46bd      	mov	sp, r7
 80097f0:	b002      	add	sp, #8
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	00001111 	.word	0x00001111
 80097f8:	00000444 	.word	0x00000444

080097fc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <HAL_TIM_Encoder_Start_IT+0x16>
 800980c:	2b04      	cmp	r3, #4
 800980e:	d010      	beq.n	8009832 <HAL_TIM_Encoder_Start_IT+0x36>
 8009810:	e01f      	b.n	8009852 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2201      	movs	r2, #1
 8009818:	2100      	movs	r1, #0
 800981a:	0018      	movs	r0, r3
 800981c:	f002 f8fa 	bl	800ba14 <TIM_CCxChannelCmd>
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	68d2      	ldr	r2, [r2, #12]
 800982a:	2102      	movs	r1, #2
 800982c:	430a      	orrs	r2, r1
 800982e:	60da      	str	r2, [r3, #12]
      break;
 8009830:	e02e      	b.n	8009890 <HAL_TIM_Encoder_Start_IT+0x94>
  }
    case TIM_CHANNEL_2:
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2201      	movs	r2, #1
 8009838:	2104      	movs	r1, #4
 800983a:	0018      	movs	r0, r3
 800983c:	f002 f8ea 	bl	800ba14 <TIM_CCxChannelCmd>
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6812      	ldr	r2, [r2, #0]
 8009848:	68d2      	ldr	r2, [r2, #12]
 800984a:	2104      	movs	r1, #4
 800984c:	430a      	orrs	r2, r1
 800984e:	60da      	str	r2, [r3, #12]
      break;
 8009850:	e01e      	b.n	8009890 <HAL_TIM_Encoder_Start_IT+0x94>
  }
    default :
  {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2201      	movs	r2, #1
 8009858:	2100      	movs	r1, #0
 800985a:	0018      	movs	r0, r3
 800985c:	f002 f8da 	bl	800ba14 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2201      	movs	r2, #1
 8009866:	2104      	movs	r1, #4
 8009868:	0018      	movs	r0, r3
 800986a:	f002 f8d3 	bl	800ba14 <TIM_CCxChannelCmd>
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6812      	ldr	r2, [r2, #0]
 8009876:	68d2      	ldr	r2, [r2, #12]
 8009878:	2102      	movs	r1, #2
 800987a:	430a      	orrs	r2, r1
 800987c:	60da      	str	r2, [r3, #12]
     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	6812      	ldr	r2, [r2, #0]
 8009886:	68d2      	ldr	r2, [r2, #12]
 8009888:	2104      	movs	r1, #4
 800988a:	430a      	orrs	r2, r1
 800988c:	60da      	str	r2, [r3, #12]
     break;
 800988e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6812      	ldr	r2, [r2, #0]
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	2101      	movs	r1, #1
 800989c:	430a      	orrs	r2, r1
 800989e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	0018      	movs	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b002      	add	sp, #8
 80098a8:	bd80      	pop	{r7, pc}

080098aa <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if(Channel == TIM_CHANNEL_1)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10f      	bne.n	80098da <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2200      	movs	r2, #0
 80098c0:	2100      	movs	r1, #0
 80098c2:	0018      	movs	r0, r3
 80098c4:	f002 f8a6 	bl	800ba14 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	6812      	ldr	r2, [r2, #0]
 80098d0:	68d2      	ldr	r2, [r2, #12]
 80098d2:	2102      	movs	r1, #2
 80098d4:	438a      	bics	r2, r1
 80098d6:	60da      	str	r2, [r3, #12]
 80098d8:	e030      	b.n	800993c <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if(Channel == TIM_CHANNEL_2)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d10f      	bne.n	8009900 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2200      	movs	r2, #0
 80098e6:	2104      	movs	r1, #4
 80098e8:	0018      	movs	r0, r3
 80098ea:	f002 f893 	bl	800ba14 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6812      	ldr	r2, [r2, #0]
 80098f6:	68d2      	ldr	r2, [r2, #12]
 80098f8:	2104      	movs	r1, #4
 80098fa:	438a      	bics	r2, r1
 80098fc:	60da      	str	r2, [r3, #12]
 80098fe:	e01d      	b.n	800993c <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2200      	movs	r2, #0
 8009906:	2100      	movs	r1, #0
 8009908:	0018      	movs	r0, r3
 800990a:	f002 f883 	bl	800ba14 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2200      	movs	r2, #0
 8009914:	2104      	movs	r1, #4
 8009916:	0018      	movs	r0, r3
 8009918:	f002 f87c 	bl	800ba14 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	6812      	ldr	r2, [r2, #0]
 8009924:	68d2      	ldr	r2, [r2, #12]
 8009926:	2102      	movs	r1, #2
 8009928:	438a      	bics	r2, r1
 800992a:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	6812      	ldr	r2, [r2, #0]
 8009934:	68d2      	ldr	r2, [r2, #12]
 8009936:	2104      	movs	r1, #4
 8009938:	438a      	bics	r2, r1
 800993a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	4a0d      	ldr	r2, [pc, #52]	; (8009978 <HAL_TIM_Encoder_Stop_IT+0xce>)
 8009944:	4013      	ands	r3, r2
 8009946:	d10d      	bne.n	8009964 <HAL_TIM_Encoder_Stop_IT+0xba>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	4a0b      	ldr	r2, [pc, #44]	; (800997c <HAL_TIM_Encoder_Stop_IT+0xd2>)
 8009950:	4013      	ands	r3, r2
 8009952:	d107      	bne.n	8009964 <HAL_TIM_Encoder_Stop_IT+0xba>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6812      	ldr	r2, [r2, #0]
 800995c:	6812      	ldr	r2, [r2, #0]
 800995e:	2101      	movs	r1, #1
 8009960:	438a      	bics	r2, r1
 8009962:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	223d      	movs	r2, #61	; 0x3d
 8009968:	2101      	movs	r1, #1
 800996a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	0018      	movs	r0, r3
 8009970:	46bd      	mov	sp, r7
 8009972:	b002      	add	sp, #8
 8009974:	bd80      	pop	{r7, pc}
 8009976:	46c0      	nop			; (mov r8, r8)
 8009978:	00001111 	.word	0x00001111
 800997c:	00000444 	.word	0x00000444

08009980 <HAL_TIM_Encoder_Start_DMA>:
  * @param  pData2 The destination Buffer address for IC2.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1, uint32_t *pData2, uint16_t Length)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	223d      	movs	r2, #61	; 0x3d
 8009992:	5c9b      	ldrb	r3, [r3, r2]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b02      	cmp	r3, #2
 8009998:	d101      	bne.n	800999e <HAL_TIM_Encoder_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800999a:	2302      	movs	r3, #2
 800999c:	e0ca      	b.n	8009b34 <HAL_TIM_Encoder_Start_DMA+0x1b4>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	223d      	movs	r2, #61	; 0x3d
 80099a2:	5c9b      	ldrb	r3, [r3, r2]
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d110      	bne.n	80099cc <HAL_TIM_Encoder_Start_DMA+0x4c>
  {
    if((((pData1 == 0U) || (pData2 == 0U) )) && (Length > 0U))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <HAL_TIM_Encoder_Start_DMA+0x36>
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d106      	bne.n	80099c4 <HAL_TIM_Encoder_Start_DMA+0x44>
 80099b6:	2318      	movs	r3, #24
 80099b8:	18fb      	adds	r3, r7, r3
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <HAL_TIM_Encoder_Start_DMA+0x44>
    {
      return HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	e0b7      	b.n	8009b34 <HAL_TIM_Encoder_Start_DMA+0x1b4>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	223d      	movs	r2, #61	; 0x3d
 80099c8:	2102      	movs	r1, #2
 80099ca:	5499      	strb	r1, [r3, r2]
    }
  }

  switch (Channel)
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d031      	beq.n	8009a36 <HAL_TIM_Encoder_Start_DMA+0xb6>
 80099d2:	2b18      	cmp	r3, #24
 80099d4:	d05c      	beq.n	8009a90 <HAL_TIM_Encoder_Start_DMA+0x110>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d000      	beq.n	80099dc <HAL_TIM_Encoder_Start_DMA+0x5c>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
    }
    break;

    default:
    break;
 80099da:	e0aa      	b.n	8009b32 <HAL_TIM_Encoder_Start_DMA+0x1b2>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	4a56      	ldr	r2, [pc, #344]	; (8009b3c <HAL_TIM_Encoder_Start_DMA+0x1bc>)
 80099e2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	4a55      	ldr	r2, [pc, #340]	; (8009b40 <HAL_TIM_Encoder_Start_DMA+0x1c0>)
 80099ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t )pData1, Length);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3334      	adds	r3, #52	; 0x34
 80099f6:	0019      	movs	r1, r3
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	2318      	movs	r3, #24
 80099fc:	18fb      	adds	r3, r7, r3
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	f7f6 ff82 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	68d2      	ldr	r2, [r2, #12]
 8009a0e:	2180      	movs	r1, #128	; 0x80
 8009a10:	0089      	lsls	r1, r1, #2
 8009a12:	430a      	orrs	r2, r1
 8009a14:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	6812      	ldr	r2, [r2, #0]
 8009a1e:	6812      	ldr	r2, [r2, #0]
 8009a20:	2101      	movs	r1, #1
 8009a22:	430a      	orrs	r2, r1
 8009a24:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	0018      	movs	r0, r3
 8009a30:	f001 fff0 	bl	800ba14 <TIM_CCxChannelCmd>
    break;
 8009a34:	e07d      	b.n	8009b32 <HAL_TIM_Encoder_Start_DMA+0x1b2>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	4a40      	ldr	r2, [pc, #256]	; (8009b3c <HAL_TIM_Encoder_Start_DMA+0x1bc>)
 8009a3c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	4a3f      	ldr	r2, [pc, #252]	; (8009b40 <HAL_TIM_Encoder_Start_DMA+0x1c0>)
 8009a44:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3338      	adds	r3, #56	; 0x38
 8009a50:	0019      	movs	r1, r3
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	2318      	movs	r3, #24
 8009a56:	18fb      	adds	r3, r7, r3
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	f7f6 ff55 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	6812      	ldr	r2, [r2, #0]
 8009a66:	68d2      	ldr	r2, [r2, #12]
 8009a68:	2180      	movs	r1, #128	; 0x80
 8009a6a:	00c9      	lsls	r1, r1, #3
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	6812      	ldr	r2, [r2, #0]
 8009a78:	6812      	ldr	r2, [r2, #0]
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2201      	movs	r2, #1
 8009a86:	2104      	movs	r1, #4
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f001 ffc3 	bl	800ba14 <TIM_CCxChannelCmd>
    break;
 8009a8e:	e050      	b.n	8009b32 <HAL_TIM_Encoder_Start_DMA+0x1b2>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a94:	4a29      	ldr	r2, [pc, #164]	; (8009b3c <HAL_TIM_Encoder_Start_DMA+0x1bc>)
 8009a96:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	4a28      	ldr	r2, [pc, #160]	; (8009b40 <HAL_TIM_Encoder_Start_DMA+0x1c0>)
 8009a9e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3334      	adds	r3, #52	; 0x34
 8009aaa:	0019      	movs	r1, r3
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	2318      	movs	r3, #24
 8009ab0:	18fb      	adds	r3, r7, r3
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	f7f6 ff28 	bl	8000908 <HAL_DMA_Start_IT>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abc:	4a1f      	ldr	r2, [pc, #124]	; (8009b3c <HAL_TIM_Encoder_Start_DMA+0x1bc>)
 8009abe:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac4:	4a1e      	ldr	r2, [pc, #120]	; (8009b40 <HAL_TIM_Encoder_Start_DMA+0x1c0>)
 8009ac6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3338      	adds	r3, #56	; 0x38
 8009ad2:	0019      	movs	r1, r3
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	2318      	movs	r3, #24
 8009ad8:	18fb      	adds	r3, r7, r3
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	f7f6 ff14 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE(htim);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	6812      	ldr	r2, [r2, #0]
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	2101      	movs	r1, #1
 8009aec:	430a      	orrs	r2, r1
 8009aee:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2201      	movs	r2, #1
 8009af6:	2100      	movs	r1, #0
 8009af8:	0018      	movs	r0, r3
 8009afa:	f001 ff8b 	bl	800ba14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2201      	movs	r2, #1
 8009b04:	2104      	movs	r1, #4
 8009b06:	0018      	movs	r0, r3
 8009b08:	f001 ff84 	bl	800ba14 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	6812      	ldr	r2, [r2, #0]
 8009b14:	68d2      	ldr	r2, [r2, #12]
 8009b16:	2180      	movs	r1, #128	; 0x80
 8009b18:	0089      	lsls	r1, r1, #2
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	6812      	ldr	r2, [r2, #0]
 8009b26:	68d2      	ldr	r2, [r2, #12]
 8009b28:	2180      	movs	r1, #128	; 0x80
 8009b2a:	00c9      	lsls	r1, r1, #3
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	60da      	str	r2, [r3, #12]
    break;
 8009b30:	46c0      	nop			; (mov r8, r8)
  }
  /* Return function status */
  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	0018      	movs	r0, r3
 8009b36:	46bd      	mov	sp, r7
 8009b38:	b004      	add	sp, #16
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	0800af5b 	.word	0x0800af5b
 8009b40:	0800aec3 	.word	0x0800aec3

08009b44 <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if(Channel == TIM_CHANNEL_1)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10f      	bne.n	8009b74 <HAL_TIM_Encoder_Stop_DMA+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	f001 ff59 	bl	800ba14 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	6812      	ldr	r2, [r2, #0]
 8009b6a:	68d2      	ldr	r2, [r2, #12]
 8009b6c:	4928      	ldr	r1, [pc, #160]	; (8009c10 <HAL_TIM_Encoder_Stop_DMA+0xcc>)
 8009b6e:	400a      	ands	r2, r1
 8009b70:	60da      	str	r2, [r3, #12]
 8009b72:	e030      	b.n	8009bd6 <HAL_TIM_Encoder_Stop_DMA+0x92>
  }
  else if(Channel == TIM_CHANNEL_2)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b04      	cmp	r3, #4
 8009b78:	d10f      	bne.n	8009b9a <HAL_TIM_Encoder_Stop_DMA+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2104      	movs	r1, #4
 8009b82:	0018      	movs	r0, r3
 8009b84:	f001 ff46 	bl	800ba14 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6812      	ldr	r2, [r2, #0]
 8009b90:	68d2      	ldr	r2, [r2, #12]
 8009b92:	4920      	ldr	r1, [pc, #128]	; (8009c14 <HAL_TIM_Encoder_Stop_DMA+0xd0>)
 8009b94:	400a      	ands	r2, r1
 8009b96:	60da      	str	r2, [r3, #12]
 8009b98:	e01d      	b.n	8009bd6 <HAL_TIM_Encoder_Stop_DMA+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	0018      	movs	r0, r3
 8009ba4:	f001 ff36 	bl	800ba14 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2200      	movs	r2, #0
 8009bae:	2104      	movs	r1, #4
 8009bb0:	0018      	movs	r0, r3
 8009bb2:	f001 ff2f 	bl	800ba14 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	6812      	ldr	r2, [r2, #0]
 8009bbe:	68d2      	ldr	r2, [r2, #12]
 8009bc0:	4913      	ldr	r1, [pc, #76]	; (8009c10 <HAL_TIM_Encoder_Stop_DMA+0xcc>)
 8009bc2:	400a      	ands	r2, r1
 8009bc4:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	68d2      	ldr	r2, [r2, #12]
 8009bd0:	4910      	ldr	r1, [pc, #64]	; (8009c14 <HAL_TIM_Encoder_Stop_DMA+0xd0>)
 8009bd2:	400a      	ands	r2, r1
 8009bd4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	4a0e      	ldr	r2, [pc, #56]	; (8009c18 <HAL_TIM_Encoder_Stop_DMA+0xd4>)
 8009bde:	4013      	ands	r3, r2
 8009be0:	d10d      	bne.n	8009bfe <HAL_TIM_Encoder_Stop_DMA+0xba>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	4a0c      	ldr	r2, [pc, #48]	; (8009c1c <HAL_TIM_Encoder_Stop_DMA+0xd8>)
 8009bea:	4013      	ands	r3, r2
 8009bec:	d107      	bne.n	8009bfe <HAL_TIM_Encoder_Stop_DMA+0xba>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	6812      	ldr	r2, [r2, #0]
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	438a      	bics	r2, r1
 8009bfc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	223d      	movs	r2, #61	; 0x3d
 8009c02:	2101      	movs	r1, #1
 8009c04:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	0018      	movs	r0, r3
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	b002      	add	sp, #8
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	fffffdff 	.word	0xfffffdff
 8009c14:	fffffbff 	.word	0xfffffbff
 8009c18:	00001111 	.word	0x00001111
 8009c1c:	00000444 	.word	0x00000444

08009c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	4013      	ands	r3, r2
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d124      	bne.n	8009c80 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	4013      	ands	r3, r2
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d11d      	bne.n	8009c80 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2203      	movs	r2, #3
 8009c4a:	4252      	negs	r2, r2
 8009c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	2203      	movs	r2, #3
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	d004      	beq.n	8009c6a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	0018      	movs	r0, r3
 8009c64:	f001 f8c5 	bl	800adf2 <HAL_TIM_IC_CaptureCallback>
 8009c68:	e007      	b.n	8009c7a <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f001 f8b8 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	0018      	movs	r0, r3
 8009c76:	f001 f8c4 	bl	800ae02 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2204      	movs	r2, #4
 8009c88:	4013      	ands	r3, r2
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d125      	bne.n	8009cda <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	2204      	movs	r2, #4
 8009c96:	4013      	ands	r3, r2
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d11e      	bne.n	8009cda <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2205      	movs	r2, #5
 8009ca2:	4252      	negs	r2, r2
 8009ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	699a      	ldr	r2, [r3, #24]
 8009cb2:	23c0      	movs	r3, #192	; 0xc0
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	d004      	beq.n	8009cc4 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	f001 f898 	bl	800adf2 <HAL_TIM_IC_CaptureCallback>
 8009cc2:	e007      	b.n	8009cd4 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	f001 f88b 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	0018      	movs	r0, r3
 8009cd0:	f001 f897 	bl	800ae02 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d124      	bne.n	8009d32 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	2208      	movs	r2, #8
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	2b08      	cmp	r3, #8
 8009cf4:	d11d      	bne.n	8009d32 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2209      	movs	r2, #9
 8009cfc:	4252      	negs	r2, r2
 8009cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2204      	movs	r2, #4
 8009d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	4013      	ands	r3, r2
 8009d10:	d004      	beq.n	8009d1c <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	0018      	movs	r0, r3
 8009d16:	f001 f86c 	bl	800adf2 <HAL_TIM_IC_CaptureCallback>
 8009d1a:	e007      	b.n	8009d2c <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f001 f85f 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	0018      	movs	r0, r3
 8009d28:	f001 f86b 	bl	800ae02 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	2210      	movs	r2, #16
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	2b10      	cmp	r3, #16
 8009d3e:	d125      	bne.n	8009d8c <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2210      	movs	r2, #16
 8009d48:	4013      	ands	r3, r2
 8009d4a:	2b10      	cmp	r3, #16
 8009d4c:	d11e      	bne.n	8009d8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2211      	movs	r2, #17
 8009d54:	4252      	negs	r2, r2
 8009d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69da      	ldr	r2, [r3, #28]
 8009d64:	23c0      	movs	r3, #192	; 0xc0
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4013      	ands	r3, r2
 8009d6a:	d004      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	0018      	movs	r0, r3
 8009d70:	f001 f83f 	bl	800adf2 <HAL_TIM_IC_CaptureCallback>
 8009d74:	e007      	b.n	8009d86 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	0018      	movs	r0, r3
 8009d7a:	f001 f832 	bl	800ade2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	0018      	movs	r0, r3
 8009d82:	f001 f83e 	bl	800ae02 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	2201      	movs	r2, #1
 8009d94:	4013      	ands	r3, r2
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d10f      	bne.n	8009dba <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	4013      	ands	r3, r2
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d108      	bne.n	8009dba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2202      	movs	r2, #2
 8009dae:	4252      	negs	r2, r2
 8009db0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	0018      	movs	r0, r3
 8009db6:	f001 f80c 	bl	800add2 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	2280      	movs	r2, #128	; 0x80
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	2b80      	cmp	r3, #128	; 0x80
 8009dc6:	d10f      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	2280      	movs	r2, #128	; 0x80
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	2b80      	cmp	r3, #128	; 0x80
 8009dd4:	d108      	bne.n	8009de8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2281      	movs	r2, #129	; 0x81
 8009ddc:	4252      	negs	r2, r2
 8009dde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	0018      	movs	r0, r3
 8009de4:	f003 f8b0 	bl	800cf48 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	2240      	movs	r2, #64	; 0x40
 8009df0:	4013      	ands	r3, r2
 8009df2:	2b40      	cmp	r3, #64	; 0x40
 8009df4:	d10f      	bne.n	8009e16 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	2240      	movs	r2, #64	; 0x40
 8009dfe:	4013      	ands	r3, r2
 8009e00:	2b40      	cmp	r3, #64	; 0x40
 8009e02:	d108      	bne.n	8009e16 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2241      	movs	r2, #65	; 0x41
 8009e0a:	4252      	negs	r2, r2
 8009e0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	0018      	movs	r0, r3
 8009e12:	f000 fffe 	bl	800ae12 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	4013      	ands	r3, r2
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d10f      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	2b20      	cmp	r3, #32
 8009e30:	d108      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2221      	movs	r2, #33	; 0x21
 8009e38:	4252      	negs	r2, r2
 8009e3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	0018      	movs	r0, r3
 8009e40:	f003 f87a 	bl	800cf38 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8009e44:	46c0      	nop			; (mov r8, r8)
 8009e46:	46bd      	mov	sp, r7
 8009e48:	b002      	add	sp, #8
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	223c      	movs	r2, #60	; 0x3c
 8009e5c:	5c9b      	ldrb	r3, [r3, r2]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d101      	bne.n	8009e66 <HAL_TIM_OC_ConfigChannel+0x1a>
 8009e62:	2302      	movs	r3, #2
 8009e64:	e03c      	b.n	8009ee0 <HAL_TIM_OC_ConfigChannel+0x94>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	223c      	movs	r2, #60	; 0x3c
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	223d      	movs	r2, #61	; 0x3d
 8009e72:	2102      	movs	r1, #2
 8009e74:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d010      	beq.n	8009e9e <HAL_TIM_OC_ConfigChannel+0x52>
 8009e7c:	d802      	bhi.n	8009e84 <HAL_TIM_OC_ConfigChannel+0x38>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d005      	beq.n	8009e8e <HAL_TIM_OC_ConfigChannel+0x42>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
    }
    break;

    default:
    break;
 8009e82:	e024      	b.n	8009ece <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8009e84:	2b08      	cmp	r3, #8
 8009e86:	d012      	beq.n	8009eae <HAL_TIM_OC_ConfigChannel+0x62>
 8009e88:	2b0c      	cmp	r3, #12
 8009e8a:	d018      	beq.n	8009ebe <HAL_TIM_OC_ConfigChannel+0x72>
    break;
 8009e8c:	e01f      	b.n	8009ece <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	0011      	movs	r1, r2
 8009e96:	0018      	movs	r0, r3
 8009e98:	f001 f940 	bl	800b11c <TIM_OC1_SetConfig>
    break;
 8009e9c:	e017      	b.n	8009ece <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	0011      	movs	r1, r2
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	f001 f9c6 	bl	800b238 <TIM_OC2_SetConfig>
    break;
 8009eac:	e00f      	b.n	8009ece <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	0011      	movs	r1, r2
 8009eb6:	0018      	movs	r0, r3
 8009eb8:	f001 fa48 	bl	800b34c <TIM_OC3_SetConfig>
    break;
 8009ebc:	e007      	b.n	8009ece <HAL_TIM_OC_ConfigChannel+0x82>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	0011      	movs	r1, r2
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	f001 facc 	bl	800b464 <TIM_OC4_SetConfig>
    break;
 8009ecc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	223d      	movs	r2, #61	; 0x3d
 8009ed2:	2101      	movs	r1, #1
 8009ed4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	223c      	movs	r2, #60	; 0x3c
 8009eda:	2100      	movs	r1, #0
 8009edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	b004      	add	sp, #16
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  __HAL_LOCK(htim);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	223c      	movs	r2, #60	; 0x3c
 8009ef8:	5c9b      	ldrb	r3, [r3, r2]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d101      	bne.n	8009f02 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009efe:	2302      	movs	r3, #2
 8009f00:	e08a      	b.n	800a018 <HAL_TIM_IC_ConfigChannel+0x130>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	223c      	movs	r2, #60	; 0x3c
 8009f06:	2101      	movs	r1, #1
 8009f08:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	223d      	movs	r2, #61	; 0x3d
 8009f0e:	2102      	movs	r1, #2
 8009f10:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d11b      	bne.n	8009f50 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6818      	ldr	r0, [r3, #0]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	6819      	ldr	r1, [r3, #0]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f001 fb95 	bl	800b656 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	6812      	ldr	r2, [r2, #0]
 8009f34:	6992      	ldr	r2, [r2, #24]
 8009f36:	210c      	movs	r1, #12
 8009f38:	438a      	bics	r2, r1
 8009f3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	6812      	ldr	r2, [r2, #0]
 8009f44:	6991      	ldr	r1, [r2, #24]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	6892      	ldr	r2, [r2, #8]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	619a      	str	r2, [r3, #24]
 8009f4e:	e05a      	b.n	800a006 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d11c      	bne.n	8009f90 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6819      	ldr	r1, [r3, #0]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	f001 fc09 	bl	800b77c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	6812      	ldr	r2, [r2, #0]
 8009f72:	6992      	ldr	r2, [r2, #24]
 8009f74:	492a      	ldr	r1, [pc, #168]	; (800a020 <HAL_TIM_IC_ConfigChannel+0x138>)
 8009f76:	400a      	ands	r2, r1
 8009f78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	6812      	ldr	r2, [r2, #0]
 8009f82:	6991      	ldr	r1, [r2, #24]
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	6892      	ldr	r2, [r2, #8]
 8009f88:	0212      	lsls	r2, r2, #8
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	619a      	str	r2, [r3, #24]
 8009f8e:	e03a      	b.n	800a006 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	d11b      	bne.n	8009fce <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	6819      	ldr	r1, [r3, #0]
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f001 fc65 	bl	800b874 <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	6812      	ldr	r2, [r2, #0]
 8009fb2:	69d2      	ldr	r2, [r2, #28]
 8009fb4:	210c      	movs	r1, #12
 8009fb6:	438a      	bics	r2, r1
 8009fb8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	6812      	ldr	r2, [r2, #0]
 8009fc2:	69d1      	ldr	r1, [r2, #28]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	6892      	ldr	r2, [r2, #8]
 8009fc8:	430a      	orrs	r2, r1
 8009fca:	61da      	str	r2, [r3, #28]
 8009fcc:	e01b      	b.n	800a006 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6818      	ldr	r0, [r3, #0]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	6819      	ldr	r1, [r3, #0]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f001 fc8d 	bl	800b8fc <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	6812      	ldr	r2, [r2, #0]
 8009fea:	69d2      	ldr	r2, [r2, #28]
 8009fec:	490c      	ldr	r1, [pc, #48]	; (800a020 <HAL_TIM_IC_ConfigChannel+0x138>)
 8009fee:	400a      	ands	r2, r1
 8009ff0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	6812      	ldr	r2, [r2, #0]
 8009ffa:	69d1      	ldr	r1, [r2, #28]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	6892      	ldr	r2, [r2, #8]
 800a000:	0212      	lsls	r2, r2, #8
 800a002:	430a      	orrs	r2, r1
 800a004:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	223d      	movs	r2, #61	; 0x3d
 800a00a:	2101      	movs	r1, #1
 800a00c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	223c      	movs	r2, #60	; 0x3c
 800a012:	2100      	movs	r1, #0
 800a014:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	0018      	movs	r0, r3
 800a01a:	46bd      	mov	sp, r7
 800a01c:	b004      	add	sp, #16
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	fffff3ff 	.word	0xfffff3ff

0800a024 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	223c      	movs	r2, #60	; 0x3c
 800a034:	5c9b      	ldrb	r3, [r3, r2]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e0a4      	b.n	800a188 <HAL_TIM_PWM_ConfigChannel+0x164>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	223c      	movs	r2, #60	; 0x3c
 800a042:	2101      	movs	r1, #1
 800a044:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	223d      	movs	r2, #61	; 0x3d
 800a04a:	2102      	movs	r1, #2
 800a04c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b04      	cmp	r3, #4
 800a052:	d029      	beq.n	800a0a8 <HAL_TIM_PWM_ConfigChannel+0x84>
 800a054:	d802      	bhi.n	800a05c <HAL_TIM_PWM_ConfigChannel+0x38>
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 800a05a:	e08c      	b.n	800a176 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800a05c:	2b08      	cmp	r3, #8
 800a05e:	d046      	beq.n	800a0ee <HAL_TIM_PWM_ConfigChannel+0xca>
 800a060:	2b0c      	cmp	r3, #12
 800a062:	d065      	beq.n	800a130 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 800a064:	e087      	b.n	800a176 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	0011      	movs	r1, r2
 800a06e:	0018      	movs	r0, r3
 800a070:	f001 f854 	bl	800b11c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	6812      	ldr	r2, [r2, #0]
 800a07c:	6992      	ldr	r2, [r2, #24]
 800a07e:	2108      	movs	r1, #8
 800a080:	430a      	orrs	r2, r1
 800a082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	6812      	ldr	r2, [r2, #0]
 800a08c:	6992      	ldr	r2, [r2, #24]
 800a08e:	2104      	movs	r1, #4
 800a090:	438a      	bics	r2, r1
 800a092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	6812      	ldr	r2, [r2, #0]
 800a09c:	6991      	ldr	r1, [r2, #24]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	6912      	ldr	r2, [r2, #16]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	619a      	str	r2, [r3, #24]
    break;
 800a0a6:	e066      	b.n	800a176 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	0011      	movs	r1, r2
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f001 f8c1 	bl	800b238 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	6812      	ldr	r2, [r2, #0]
 800a0be:	6992      	ldr	r2, [r2, #24]
 800a0c0:	2180      	movs	r1, #128	; 0x80
 800a0c2:	0109      	lsls	r1, r1, #4
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	6812      	ldr	r2, [r2, #0]
 800a0d0:	6992      	ldr	r2, [r2, #24]
 800a0d2:	492f      	ldr	r1, [pc, #188]	; (800a190 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a0d4:	400a      	ands	r2, r1
 800a0d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	6812      	ldr	r2, [r2, #0]
 800a0e0:	6991      	ldr	r1, [r2, #24]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	6912      	ldr	r2, [r2, #16]
 800a0e6:	0212      	lsls	r2, r2, #8
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	619a      	str	r2, [r3, #24]
    break;
 800a0ec:	e043      	b.n	800a176 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	0011      	movs	r1, r2
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f001 f928 	bl	800b34c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	6812      	ldr	r2, [r2, #0]
 800a104:	69d2      	ldr	r2, [r2, #28]
 800a106:	2108      	movs	r1, #8
 800a108:	430a      	orrs	r2, r1
 800a10a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	6812      	ldr	r2, [r2, #0]
 800a114:	69d2      	ldr	r2, [r2, #28]
 800a116:	2104      	movs	r1, #4
 800a118:	438a      	bics	r2, r1
 800a11a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	6812      	ldr	r2, [r2, #0]
 800a124:	69d1      	ldr	r1, [r2, #28]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	6912      	ldr	r2, [r2, #16]
 800a12a:	430a      	orrs	r2, r1
 800a12c:	61da      	str	r2, [r3, #28]
    break;
 800a12e:	e022      	b.n	800a176 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	0011      	movs	r1, r2
 800a138:	0018      	movs	r0, r3
 800a13a:	f001 f993 	bl	800b464 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	69d2      	ldr	r2, [r2, #28]
 800a148:	2180      	movs	r1, #128	; 0x80
 800a14a:	0109      	lsls	r1, r1, #4
 800a14c:	430a      	orrs	r2, r1
 800a14e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	6812      	ldr	r2, [r2, #0]
 800a158:	69d2      	ldr	r2, [r2, #28]
 800a15a:	490d      	ldr	r1, [pc, #52]	; (800a190 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a15c:	400a      	ands	r2, r1
 800a15e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	6812      	ldr	r2, [r2, #0]
 800a168:	69d1      	ldr	r1, [r2, #28]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	6912      	ldr	r2, [r2, #16]
 800a16e:	0212      	lsls	r2, r2, #8
 800a170:	430a      	orrs	r2, r1
 800a172:	61da      	str	r2, [r3, #28]
    break;
 800a174:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	223d      	movs	r2, #61	; 0x3d
 800a17a:	2101      	movs	r1, #1
 800a17c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	223c      	movs	r2, #60	; 0x3c
 800a182:	2100      	movs	r1, #0
 800a184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	0018      	movs	r0, r3
 800a18a:	46bd      	mov	sp, r7
 800a18c:	b004      	add	sp, #16
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	fffffbff 	.word	0xfffffbff

0800a194 <HAL_TIM_OnePulse_ConfigChannel>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef* sConfig, uint32_t OutputChannel,  uint32_t InputChannel)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08c      	sub	sp, #48	; 0x30
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if(OutputChannel != InputChannel)
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d100      	bne.n	800a1ac <HAL_TIM_OnePulse_ConfigChannel+0x18>
 800a1aa:	e0ba      	b.n	800a322 <HAL_TIM_OnePulse_ConfigChannel+0x18e>
  {
  __HAL_LOCK(htim);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	223c      	movs	r2, #60	; 0x3c
 800a1b0:	5c9b      	ldrb	r3, [r3, r2]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d101      	bne.n	800a1ba <HAL_TIM_OnePulse_ConfigChannel+0x26>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e0b4      	b.n	800a324 <HAL_TIM_OnePulse_ConfigChannel+0x190>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	223c      	movs	r2, #60	; 0x3c
 800a1be:	2101      	movs	r1, #1
 800a1c0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	223d      	movs	r2, #61	; 0x3d
 800a1c6:	2102      	movs	r1, #2
 800a1c8:	5499      	strb	r1, [r3, r2]

  /* Extract the Ouput compare configuration from sConfig structure */
  temp1.OCMode = sConfig->OCMode;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	2314      	movs	r3, #20
 800a1d0:	18fb      	adds	r3, r7, r3
 800a1d2:	601a      	str	r2, [r3, #0]
  temp1.Pulse = sConfig->Pulse;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	2314      	movs	r3, #20
 800a1da:	18fb      	adds	r3, r7, r3
 800a1dc:	605a      	str	r2, [r3, #4]
  temp1.OCPolarity = sConfig->OCPolarity;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	689a      	ldr	r2, [r3, #8]
 800a1e2:	2314      	movs	r3, #20
 800a1e4:	18fb      	adds	r3, r7, r3
 800a1e6:	609a      	str	r2, [r3, #8]
  temp1.OCNPolarity = sConfig->OCNPolarity;
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	2314      	movs	r3, #20
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	60da      	str	r2, [r3, #12]
  temp1.OCIdleState = sConfig->OCIdleState;
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	691a      	ldr	r2, [r3, #16]
 800a1f6:	2314      	movs	r3, #20
 800a1f8:	18fb      	adds	r3, r7, r3
 800a1fa:	615a      	str	r2, [r3, #20]
  temp1.OCNIdleState = sConfig->OCNIdleState;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	695a      	ldr	r2, [r3, #20]
 800a200:	2314      	movs	r3, #20
 800a202:	18fb      	adds	r3, r7, r3
 800a204:	619a      	str	r2, [r3, #24]

    switch (OutputChannel)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <HAL_TIM_OnePulse_ConfigChannel+0x7e>
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	d009      	beq.n	800a224 <HAL_TIM_OnePulse_ConfigChannel+0x90>

      TIM_OC2_SetConfig(htim->Instance, &temp1);
    }
    break;
    default:
    break;
 800a210:	e011      	b.n	800a236 <HAL_TIM_OnePulse_ConfigChannel+0xa2>
      TIM_OC1_SetConfig(htim->Instance, &temp1);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2214      	movs	r2, #20
 800a218:	18ba      	adds	r2, r7, r2
 800a21a:	0011      	movs	r1, r2
 800a21c:	0018      	movs	r0, r3
 800a21e:	f000 ff7d 	bl	800b11c <TIM_OC1_SetConfig>
    break;
 800a222:	e008      	b.n	800a236 <HAL_TIM_OnePulse_ConfigChannel+0xa2>
      TIM_OC2_SetConfig(htim->Instance, &temp1);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2214      	movs	r2, #20
 800a22a:	18ba      	adds	r2, r7, r2
 800a22c:	0011      	movs	r1, r2
 800a22e:	0018      	movs	r0, r3
 800a230:	f001 f802 	bl	800b238 <TIM_OC2_SetConfig>
    break;
 800a234:	46c0      	nop			; (mov r8, r8)
  }
  switch (InputChannel)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <HAL_TIM_OnePulse_ConfigChannel+0xae>
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d033      	beq.n	800a2a8 <HAL_TIM_OnePulse_ConfigChannel+0x114>
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
    }
    break;

    default:
    break;
 800a240:	e065      	b.n	800a30e <HAL_TIM_OnePulse_ConfigChannel+0x17a>
      TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6818      	ldr	r0, [r3, #0]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	6999      	ldr	r1, [r3, #24]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	69da      	ldr	r2, [r3, #28]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	f001 fa00 	bl	800b656 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	6812      	ldr	r2, [r2, #0]
 800a25e:	6992      	ldr	r2, [r2, #24]
 800a260:	210c      	movs	r1, #12
 800a262:	438a      	bics	r2, r1
 800a264:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	6812      	ldr	r2, [r2, #0]
 800a26e:	6892      	ldr	r2, [r2, #8]
 800a270:	2170      	movs	r1, #112	; 0x70
 800a272:	438a      	bics	r2, r1
 800a274:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	6812      	ldr	r2, [r2, #0]
 800a27e:	6892      	ldr	r2, [r2, #8]
 800a280:	2150      	movs	r1, #80	; 0x50
 800a282:	430a      	orrs	r2, r1
 800a284:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	6812      	ldr	r2, [r2, #0]
 800a28e:	6892      	ldr	r2, [r2, #8]
 800a290:	2107      	movs	r1, #7
 800a292:	438a      	bics	r2, r1
 800a294:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	6812      	ldr	r2, [r2, #0]
 800a29e:	6892      	ldr	r2, [r2, #8]
 800a2a0:	2106      	movs	r1, #6
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	609a      	str	r2, [r3, #8]
    break;
 800a2a6:	e032      	b.n	800a30e <HAL_TIM_OnePulse_ConfigChannel+0x17a>
      TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6818      	ldr	r0, [r3, #0]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6999      	ldr	r1, [r3, #24]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	69da      	ldr	r2, [r3, #28]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	f001 fa60 	bl	800b77c <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	6992      	ldr	r2, [r2, #24]
 800a2c6:	4919      	ldr	r1, [pc, #100]	; (800a32c <HAL_TIM_OnePulse_ConfigChannel+0x198>)
 800a2c8:	400a      	ands	r2, r1
 800a2ca:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	6812      	ldr	r2, [r2, #0]
 800a2d4:	6892      	ldr	r2, [r2, #8]
 800a2d6:	2170      	movs	r1, #112	; 0x70
 800a2d8:	438a      	bics	r2, r1
 800a2da:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_TS_TI2FP2;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	6812      	ldr	r2, [r2, #0]
 800a2e4:	6892      	ldr	r2, [r2, #8]
 800a2e6:	2160      	movs	r1, #96	; 0x60
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	6812      	ldr	r2, [r2, #0]
 800a2f4:	6892      	ldr	r2, [r2, #8]
 800a2f6:	2107      	movs	r1, #7
 800a2f8:	438a      	bics	r2, r1
 800a2fa:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	6812      	ldr	r2, [r2, #0]
 800a304:	6892      	ldr	r2, [r2, #8]
 800a306:	2106      	movs	r1, #6
 800a308:	430a      	orrs	r2, r1
 800a30a:	609a      	str	r2, [r3, #8]
    break;
 800a30c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	223d      	movs	r2, #61	; 0x3d
 800a312:	2101      	movs	r1, #1
 800a314:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	223c      	movs	r2, #60	; 0x3c
 800a31a:	2100      	movs	r1, #0
 800a31c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	e000      	b.n	800a324 <HAL_TIM_OnePulse_ConfigChannel+0x190>
}
  else
  {
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
  }
}
 800a324:	0018      	movs	r0, r3
 800a326:	46bd      	mov	sp, r7
 800a328:	b00c      	add	sp, #48	; 0x30
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	fffff3ff 	.word	0xfffff3ff

0800a330 <HAL_TIM_DMABurst_WriteStart>:
  *         between: TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                              uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b087      	sub	sp, #28
 800a334:	af02      	add	r7, sp, #8
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
return HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, ((BurstLength) >> 8U) + 1U);
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	0a1b      	lsrs	r3, r3, #8
 800a342:	3301      	adds	r3, #1
 800a344:	683c      	ldr	r4, [r7, #0]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	68b9      	ldr	r1, [r7, #8]
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	0023      	movs	r3, r4
 800a354:	f000 f805 	bl	800a362 <HAL_TIM_DMABurst_MultiWriteStart>
 800a358:	0003      	movs	r3, r0
}
 800a35a:	0018      	movs	r0, r3
 800a35c:	46bd      	mov	sp, r7
 800a35e:	b005      	add	sp, #20
 800a360:	bd90      	pop	{r4, r7, pc}

0800a362 <HAL_TIM_DMABurst_MultiWriteStart>:
  *         between 1 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                                   uint32_t* BurstBuffer, uint32_t  BurstLength,  uint32_t  DataLength)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	60f8      	str	r0, [r7, #12]
 800a36a:	60b9      	str	r1, [r7, #8]
 800a36c:	607a      	str	r2, [r7, #4]
 800a36e:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	223d      	movs	r2, #61	; 0x3d
 800a374:	5c9b      	ldrb	r3, [r3, r2]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d101      	bne.n	800a380 <HAL_TIM_DMABurst_MultiWriteStart+0x1e>
  {
     return HAL_BUSY;
 800a37c:	2302      	movs	r3, #2
 800a37e:	e0cc      	b.n	800a51a <HAL_TIM_DMABurst_MultiWriteStart+0x1b8>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	223d      	movs	r2, #61	; 0x3d
 800a384:	5c9b      	ldrb	r3, [r3, r2]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d10b      	bne.n	800a3a4 <HAL_TIM_DMABurst_MultiWriteStart+0x42>
  {
    if((BurstBuffer == 0U ) && (BurstLength > 0U))
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d104      	bne.n	800a39c <HAL_TIM_DMABurst_MultiWriteStart+0x3a>
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <HAL_TIM_DMABurst_MultiWriteStart+0x3a>
    {
      return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e0be      	b.n	800a51a <HAL_TIM_DMABurst_MultiWriteStart+0x1b8>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	223d      	movs	r2, #61	; 0x3d
 800a3a0:	2102      	movs	r1, #2
 800a3a2:	5499      	strb	r1, [r3, r2]
    }
  }
  switch(BurstRequestSrc)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2280      	movs	r2, #128	; 0x80
 800a3a8:	0112      	lsls	r2, r2, #4
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d056      	beq.n	800a45c <HAL_TIM_DMABurst_MultiWriteStart+0xfa>
 800a3ae:	2280      	movs	r2, #128	; 0x80
 800a3b0:	0112      	lsls	r2, r2, #4
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d80c      	bhi.n	800a3d0 <HAL_TIM_DMABurst_MultiWriteStart+0x6e>
 800a3b6:	2280      	movs	r2, #128	; 0x80
 800a3b8:	0092      	lsls	r2, r2, #2
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d028      	beq.n	800a410 <HAL_TIM_DMABurst_MultiWriteStart+0xae>
 800a3be:	2280      	movs	r2, #128	; 0x80
 800a3c0:	00d2      	lsls	r2, r2, #3
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d037      	beq.n	800a436 <HAL_TIM_DMABurst_MultiWriteStart+0xd4>
 800a3c6:	2280      	movs	r2, #128	; 0x80
 800a3c8:	0052      	lsls	r2, r2, #1
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00d      	beq.n	800a3ea <HAL_TIM_DMABurst_MultiWriteStart+0x88>
      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, DataLength);
    }
    break;
    default:
    break;
 800a3ce:	e091      	b.n	800a4f4 <HAL_TIM_DMABurst_MultiWriteStart+0x192>
  switch(BurstRequestSrc)
 800a3d0:	2280      	movs	r2, #128	; 0x80
 800a3d2:	0192      	lsls	r2, r2, #6
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d067      	beq.n	800a4a8 <HAL_TIM_DMABurst_MultiWriteStart+0x146>
 800a3d8:	2280      	movs	r2, #128	; 0x80
 800a3da:	01d2      	lsls	r2, r2, #7
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d076      	beq.n	800a4ce <HAL_TIM_DMABurst_MultiWriteStart+0x16c>
 800a3e0:	2280      	movs	r2, #128	; 0x80
 800a3e2:	0152      	lsls	r2, r2, #5
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d04c      	beq.n	800a482 <HAL_TIM_DMABurst_MultiWriteStart+0x120>
    break;
 800a3e8:	e084      	b.n	800a4f4 <HAL_TIM_DMABurst_MultiWriteStart+0x192>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	4a4d      	ldr	r2, [pc, #308]	; (800a524 <HAL_TIM_DMABurst_MultiWriteStart+0x1c2>)
 800a3f0:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	4a4c      	ldr	r2, [pc, #304]	; (800a528 <HAL_TIM_DMABurst_MultiWriteStart+0x1c6>)
 800a3f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, DataLength);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6a18      	ldr	r0, [r3, #32]
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	334c      	adds	r3, #76	; 0x4c
 800a406:	001a      	movs	r2, r3
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	f7f6 fa7d 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a40e:	e071      	b.n	800a4f4 <HAL_TIM_DMABurst_MultiWriteStart+0x192>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	4a45      	ldr	r2, [pc, #276]	; (800a52c <HAL_TIM_DMABurst_MultiWriteStart+0x1ca>)
 800a416:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	4a42      	ldr	r2, [pc, #264]	; (800a528 <HAL_TIM_DMABurst_MultiWriteStart+0x1c6>)
 800a41e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, DataLength);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a424:	6839      	ldr	r1, [r7, #0]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	334c      	adds	r3, #76	; 0x4c
 800a42c:	001a      	movs	r2, r3
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	f7f6 fa6a 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a434:	e05e      	b.n	800a4f4 <HAL_TIM_DMABurst_MultiWriteStart+0x192>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43a:	4a3c      	ldr	r2, [pc, #240]	; (800a52c <HAL_TIM_DMABurst_MultiWriteStart+0x1ca>)
 800a43c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a442:	4a39      	ldr	r2, [pc, #228]	; (800a528 <HAL_TIM_DMABurst_MultiWriteStart+0x1c6>)
 800a444:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, DataLength);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	334c      	adds	r3, #76	; 0x4c
 800a452:	001a      	movs	r2, r3
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	f7f6 fa57 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a45a:	e04b      	b.n	800a4f4 <HAL_TIM_DMABurst_MultiWriteStart+0x192>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	4a32      	ldr	r2, [pc, #200]	; (800a52c <HAL_TIM_DMABurst_MultiWriteStart+0x1ca>)
 800a462:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	4a2f      	ldr	r2, [pc, #188]	; (800a528 <HAL_TIM_DMABurst_MultiWriteStart+0x1c6>)
 800a46a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, DataLength);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	334c      	adds	r3, #76	; 0x4c
 800a478:	001a      	movs	r2, r3
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	f7f6 fa44 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a480:	e038      	b.n	800a4f4 <HAL_TIM_DMABurst_MultiWriteStart+0x192>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback =  TIM_DMADelayPulseCplt;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	4a29      	ldr	r2, [pc, #164]	; (800a52c <HAL_TIM_DMABurst_MultiWriteStart+0x1ca>)
 800a488:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48e:	4a26      	ldr	r2, [pc, #152]	; (800a528 <HAL_TIM_DMABurst_MultiWriteStart+0x1c6>)
 800a490:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, DataLength);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	334c      	adds	r3, #76	; 0x4c
 800a49e:	001a      	movs	r2, r3
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	f7f6 fa31 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a4a6:	e025      	b.n	800a4f4 <HAL_TIM_DMABurst_MultiWriteStart+0x192>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ac:	4a20      	ldr	r2, [pc, #128]	; (800a530 <HAL_TIM_DMABurst_MultiWriteStart+0x1ce>)
 800a4ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b4:	4a1c      	ldr	r2, [pc, #112]	; (800a528 <HAL_TIM_DMABurst_MultiWriteStart+0x1c6>)
 800a4b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, DataLength);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	334c      	adds	r3, #76	; 0x4c
 800a4c4:	001a      	movs	r2, r3
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	f7f6 fa1e 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a4cc:	e012      	b.n	800a4f4 <HAL_TIM_DMABurst_MultiWriteStart+0x192>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	4a18      	ldr	r2, [pc, #96]	; (800a534 <HAL_TIM_DMABurst_MultiWriteStart+0x1d2>)
 800a4d4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4da:	4a13      	ldr	r2, [pc, #76]	; (800a528 <HAL_TIM_DMABurst_MultiWriteStart+0x1c6>)
 800a4dc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer, (uint32_t)&htim->Instance->DMAR, DataLength);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	334c      	adds	r3, #76	; 0x4c
 800a4ea:	001a      	movs	r2, r3
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	f7f6 fa0b 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a4f2:	46c0      	nop			; (mov r8, r8)
  }
   /* configure the DMA Burst Mode */
   htim->Instance->DCR = BurstBaseAddress | BurstLength;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	430a      	orrs	r2, r1
 800a4fe:	649a      	str	r2, [r3, #72]	; 0x48

   /* Enable the TIM DMA Request */
   __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	6812      	ldr	r2, [r2, #0]
 800a508:	68d1      	ldr	r1, [r2, #12]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	60da      	str	r2, [r3, #12]

   htim->State = HAL_TIM_STATE_READY;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	223d      	movs	r2, #61	; 0x3d
 800a514:	2101      	movs	r1, #1
 800a516:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	0018      	movs	r0, r3
 800a51c:	46bd      	mov	sp, r7
 800a51e:	b004      	add	sp, #16
 800a520:	bd80      	pop	{r7, pc}
 800a522:	46c0      	nop			; (mov r8, r8)
 800a524:	0800afcd 	.word	0x0800afcd
 800a528:	0800aec3 	.word	0x0800aec3
 800a52c:	0800aee9 	.word	0x0800aee9
 800a530:	0800cf59 	.word	0x0800cf59
 800a534:	0800aff3 	.word	0x0800aff3

0800a538 <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2280      	movs	r2, #128	; 0x80
 800a546:	0112      	lsls	r2, r2, #4
 800a548:	4293      	cmp	r3, r2
 800a54a:	d02f      	beq.n	800a5ac <HAL_TIM_DMABurst_WriteStop+0x74>
 800a54c:	2280      	movs	r2, #128	; 0x80
 800a54e:	0112      	lsls	r2, r2, #4
 800a550:	4293      	cmp	r3, r2
 800a552:	d80c      	bhi.n	800a56e <HAL_TIM_DMABurst_WriteStop+0x36>
 800a554:	2280      	movs	r2, #128	; 0x80
 800a556:	0092      	lsls	r2, r2, #2
 800a558:	4293      	cmp	r3, r2
 800a55a:	d01b      	beq.n	800a594 <HAL_TIM_DMABurst_WriteStop+0x5c>
 800a55c:	2280      	movs	r2, #128	; 0x80
 800a55e:	00d2      	lsls	r2, r2, #3
 800a560:	4293      	cmp	r3, r2
 800a562:	d01d      	beq.n	800a5a0 <HAL_TIM_DMABurst_WriteStop+0x68>
 800a564:	2280      	movs	r2, #128	; 0x80
 800a566:	0052      	lsls	r2, r2, #1
 800a568:	4293      	cmp	r3, r2
 800a56a:	d00d      	beq.n	800a588 <HAL_TIM_DMABurst_WriteStop+0x50>
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 800a56c:	e036      	b.n	800a5dc <HAL_TIM_DMABurst_WriteStop+0xa4>
  switch(BurstRequestSrc)
 800a56e:	2280      	movs	r2, #128	; 0x80
 800a570:	0192      	lsls	r2, r2, #6
 800a572:	4293      	cmp	r3, r2
 800a574:	d026      	beq.n	800a5c4 <HAL_TIM_DMABurst_WriteStop+0x8c>
 800a576:	2280      	movs	r2, #128	; 0x80
 800a578:	01d2      	lsls	r2, r2, #7
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d028      	beq.n	800a5d0 <HAL_TIM_DMABurst_WriteStop+0x98>
 800a57e:	2280      	movs	r2, #128	; 0x80
 800a580:	0152      	lsls	r2, r2, #5
 800a582:	4293      	cmp	r3, r2
 800a584:	d018      	beq.n	800a5b8 <HAL_TIM_DMABurst_WriteStop+0x80>
    break;
 800a586:	e029      	b.n	800a5dc <HAL_TIM_DMABurst_WriteStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	0018      	movs	r0, r3
 800a58e:	f7f6 fa21 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a592:	e023      	b.n	800a5dc <HAL_TIM_DMABurst_WriteStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	0018      	movs	r0, r3
 800a59a:	f7f6 fa1b 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a59e:	e01d      	b.n	800a5dc <HAL_TIM_DMABurst_WriteStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	f7f6 fa15 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a5aa:	e017      	b.n	800a5dc <HAL_TIM_DMABurst_WriteStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f7f6 fa0f 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a5b6:	e011      	b.n	800a5dc <HAL_TIM_DMABurst_WriteStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5bc:	0018      	movs	r0, r3
 800a5be:	f7f6 fa09 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a5c2:	e00b      	b.n	800a5dc <HAL_TIM_DMABurst_WriteStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c8:	0018      	movs	r0, r3
 800a5ca:	f7f6 fa03 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a5ce:	e005      	b.n	800a5dc <HAL_TIM_DMABurst_WriteStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	f7f6 f9fd 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a5da:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	6812      	ldr	r2, [r2, #0]
 800a5e4:	68d2      	ldr	r2, [r2, #12]
 800a5e6:	6839      	ldr	r1, [r7, #0]
 800a5e8:	43c9      	mvns	r1, r1
 800a5ea:	400a      	ands	r2, r1
 800a5ec:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	0018      	movs	r0, r3
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	b002      	add	sp, #8
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <HAL_TIM_DMABurst_ReadStart>:
  *         between: TIM_DMABURSTLENGTH_1TRANSFER and TIM_DMABURSTLENGTH_18TRANSFERS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                             uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 800a5f8:	b590      	push	{r4, r7, lr}
 800a5fa:	b087      	sub	sp, #28
 800a5fc:	af02      	add	r7, sp, #8
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
 800a604:	603b      	str	r3, [r7, #0]
return HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength, ((BurstLength) >> 8U) + 1U);
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	0a1b      	lsrs	r3, r3, #8
 800a60a:	3301      	adds	r3, #1
 800a60c:	683c      	ldr	r4, [r7, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	0023      	movs	r3, r4
 800a61c:	f000 f805 	bl	800a62a <HAL_TIM_DMABurst_MultiReadStart>
 800a620:	0003      	movs	r3, r0
}
 800a622:	0018      	movs	r0, r3
 800a624:	46bd      	mov	sp, r7
 800a626:	b005      	add	sp, #20
 800a628:	bd90      	pop	{r4, r7, pc}

0800a62a <HAL_TIM_DMABurst_MultiReadStart>:
  *         between 1 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress, uint32_t BurstRequestSrc,
                                                  uint32_t  *BurstBuffer, uint32_t  BurstLength, uint32_t  DataLength)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	607a      	str	r2, [r7, #4]
 800a636:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	223d      	movs	r2, #61	; 0x3d
 800a63c:	5c9b      	ldrb	r3, [r3, r2]
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b02      	cmp	r3, #2
 800a642:	d101      	bne.n	800a648 <HAL_TIM_DMABurst_MultiReadStart+0x1e>
  {
     return HAL_BUSY;
 800a644:	2302      	movs	r3, #2
 800a646:	e0cc      	b.n	800a7e2 <HAL_TIM_DMABurst_MultiReadStart+0x1b8>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	223d      	movs	r2, #61	; 0x3d
 800a64c:	5c9b      	ldrb	r3, [r3, r2]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b01      	cmp	r3, #1
 800a652:	d10b      	bne.n	800a66c <HAL_TIM_DMABurst_MultiReadStart+0x42>
  {
    if((BurstBuffer == 0U ) && (BurstLength > 0U))
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d104      	bne.n	800a664 <HAL_TIM_DMABurst_MultiReadStart+0x3a>
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <HAL_TIM_DMABurst_MultiReadStart+0x3a>
    {
      return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e0be      	b.n	800a7e2 <HAL_TIM_DMABurst_MultiReadStart+0x1b8>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	223d      	movs	r2, #61	; 0x3d
 800a668:	2102      	movs	r1, #2
 800a66a:	5499      	strb	r1, [r3, r2]
    }
  }
  switch(BurstRequestSrc)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2280      	movs	r2, #128	; 0x80
 800a670:	0112      	lsls	r2, r2, #4
 800a672:	4293      	cmp	r3, r2
 800a674:	d056      	beq.n	800a724 <HAL_TIM_DMABurst_MultiReadStart+0xfa>
 800a676:	2280      	movs	r2, #128	; 0x80
 800a678:	0112      	lsls	r2, r2, #4
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d80c      	bhi.n	800a698 <HAL_TIM_DMABurst_MultiReadStart+0x6e>
 800a67e:	2280      	movs	r2, #128	; 0x80
 800a680:	0092      	lsls	r2, r2, #2
 800a682:	4293      	cmp	r3, r2
 800a684:	d028      	beq.n	800a6d8 <HAL_TIM_DMABurst_MultiReadStart+0xae>
 800a686:	2280      	movs	r2, #128	; 0x80
 800a688:	00d2      	lsls	r2, r2, #3
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d037      	beq.n	800a6fe <HAL_TIM_DMABurst_MultiReadStart+0xd4>
 800a68e:	2280      	movs	r2, #128	; 0x80
 800a690:	0052      	lsls	r2, r2, #1
 800a692:	4293      	cmp	r3, r2
 800a694:	d00d      	beq.n	800a6b2 <HAL_TIM_DMABurst_MultiReadStart+0x88>
      /* Enable the DMA channel */
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, DataLength);
    }
    break;
    default:
    break;
 800a696:	e091      	b.n	800a7bc <HAL_TIM_DMABurst_MultiReadStart+0x192>
  switch(BurstRequestSrc)
 800a698:	2280      	movs	r2, #128	; 0x80
 800a69a:	0192      	lsls	r2, r2, #6
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d067      	beq.n	800a770 <HAL_TIM_DMABurst_MultiReadStart+0x146>
 800a6a0:	2280      	movs	r2, #128	; 0x80
 800a6a2:	01d2      	lsls	r2, r2, #7
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d076      	beq.n	800a796 <HAL_TIM_DMABurst_MultiReadStart+0x16c>
 800a6a8:	2280      	movs	r2, #128	; 0x80
 800a6aa:	0152      	lsls	r2, r2, #5
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d04c      	beq.n	800a74a <HAL_TIM_DMABurst_MultiReadStart+0x120>
    break;
 800a6b0:	e084      	b.n	800a7bc <HAL_TIM_DMABurst_MultiReadStart+0x192>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	4a4d      	ldr	r2, [pc, #308]	; (800a7ec <HAL_TIM_DMABurst_MultiReadStart+0x1c2>)
 800a6b8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	4a4c      	ldr	r2, [pc, #304]	; (800a7f0 <HAL_TIM_DMABurst_MultiReadStart+0x1c6>)
 800a6c0:	631a      	str	r2, [r3, #48]	; 0x30
       HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, DataLength);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6a18      	ldr	r0, [r3, #32]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	334c      	adds	r3, #76	; 0x4c
 800a6cc:	0019      	movs	r1, r3
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	f7f6 f919 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a6d6:	e071      	b.n	800a7bc <HAL_TIM_DMABurst_MultiReadStart+0x192>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback =  TIM_DMACaptureCplt;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	4a45      	ldr	r2, [pc, #276]	; (800a7f4 <HAL_TIM_DMABurst_MultiReadStart+0x1ca>)
 800a6de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e4:	4a42      	ldr	r2, [pc, #264]	; (800a7f0 <HAL_TIM_DMABurst_MultiReadStart+0x1c6>)
 800a6e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, DataLength);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	334c      	adds	r3, #76	; 0x4c
 800a6f2:	0019      	movs	r1, r3
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	f7f6 f906 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a6fc:	e05e      	b.n	800a7bc <HAL_TIM_DMABurst_MultiReadStart+0x192>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback =  TIM_DMACaptureCplt;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a702:	4a3c      	ldr	r2, [pc, #240]	; (800a7f4 <HAL_TIM_DMABurst_MultiReadStart+0x1ca>)
 800a704:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70a:	4a39      	ldr	r2, [pc, #228]	; (800a7f0 <HAL_TIM_DMABurst_MultiReadStart+0x1c6>)
 800a70c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, DataLength);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	334c      	adds	r3, #76	; 0x4c
 800a718:	0019      	movs	r1, r3
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	f7f6 f8f3 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a722:	e04b      	b.n	800a7bc <HAL_TIM_DMABurst_MultiReadStart+0x192>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback =  TIM_DMACaptureCplt;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	4a32      	ldr	r2, [pc, #200]	; (800a7f4 <HAL_TIM_DMABurst_MultiReadStart+0x1ca>)
 800a72a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	4a2f      	ldr	r2, [pc, #188]	; (800a7f0 <HAL_TIM_DMABurst_MultiReadStart+0x1c6>)
 800a732:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, DataLength);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	334c      	adds	r3, #76	; 0x4c
 800a73e:	0019      	movs	r1, r3
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	f7f6 f8e0 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a748:	e038      	b.n	800a7bc <HAL_TIM_DMABurst_MultiReadStart+0x192>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback =  TIM_DMACaptureCplt;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74e:	4a29      	ldr	r2, [pc, #164]	; (800a7f4 <HAL_TIM_DMABurst_MultiReadStart+0x1ca>)
 800a750:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a756:	4a26      	ldr	r2, [pc, #152]	; (800a7f0 <HAL_TIM_DMABurst_MultiReadStart+0x1c6>)
 800a758:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, DataLength);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	334c      	adds	r3, #76	; 0x4c
 800a764:	0019      	movs	r1, r3
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	f7f6 f8cd 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a76e:	e025      	b.n	800a7bc <HAL_TIM_DMABurst_MultiReadStart+0x192>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a774:	4a20      	ldr	r2, [pc, #128]	; (800a7f8 <HAL_TIM_DMABurst_MultiReadStart+0x1ce>)
 800a776:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a77c:	4a1c      	ldr	r2, [pc, #112]	; (800a7f0 <HAL_TIM_DMABurst_MultiReadStart+0x1c6>)
 800a77e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, DataLength);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	334c      	adds	r3, #76	; 0x4c
 800a78a:	0019      	movs	r1, r3
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	f7f6 f8ba 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a794:	e012      	b.n	800a7bc <HAL_TIM_DMABurst_MultiReadStart+0x192>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79a:	4a18      	ldr	r2, [pc, #96]	; (800a7fc <HAL_TIM_DMABurst_MultiReadStart+0x1d2>)
 800a79c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a2:	4a13      	ldr	r2, [pc, #76]	; (800a7f0 <HAL_TIM_DMABurst_MultiReadStart+0x1c6>)
 800a7a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer, DataLength);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	334c      	adds	r3, #76	; 0x4c
 800a7b0:	0019      	movs	r1, r3
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	f7f6 f8a7 	bl	8000908 <HAL_DMA_Start_IT>
    break;
 800a7ba:	46c0      	nop			; (mov r8, r8)
  }

  /* configure the DMA Burst Mode */
  htim->Instance->DCR = BurstBaseAddress | BurstLength;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	69ba      	ldr	r2, [r7, #24]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	6812      	ldr	r2, [r2, #0]
 800a7d0:	68d1      	ldr	r1, [r2, #12]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	223d      	movs	r2, #61	; 0x3d
 800a7dc:	2101      	movs	r1, #1
 800a7de:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	0018      	movs	r0, r3
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	b004      	add	sp, #16
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	46c0      	nop			; (mov r8, r8)
 800a7ec:	0800afcd 	.word	0x0800afcd
 800a7f0:	0800aec3 	.word	0x0800aec3
 800a7f4:	0800af5b 	.word	0x0800af5b
 800a7f8:	0800cf59 	.word	0x0800cf59
 800a7fc:	0800aff3 	.word	0x0800aff3

0800a800 <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch(BurstRequestSrc)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2280      	movs	r2, #128	; 0x80
 800a80e:	0112      	lsls	r2, r2, #4
 800a810:	4293      	cmp	r3, r2
 800a812:	d02f      	beq.n	800a874 <HAL_TIM_DMABurst_ReadStop+0x74>
 800a814:	2280      	movs	r2, #128	; 0x80
 800a816:	0112      	lsls	r2, r2, #4
 800a818:	4293      	cmp	r3, r2
 800a81a:	d80c      	bhi.n	800a836 <HAL_TIM_DMABurst_ReadStop+0x36>
 800a81c:	2280      	movs	r2, #128	; 0x80
 800a81e:	0092      	lsls	r2, r2, #2
 800a820:	4293      	cmp	r3, r2
 800a822:	d01b      	beq.n	800a85c <HAL_TIM_DMABurst_ReadStop+0x5c>
 800a824:	2280      	movs	r2, #128	; 0x80
 800a826:	00d2      	lsls	r2, r2, #3
 800a828:	4293      	cmp	r3, r2
 800a82a:	d01d      	beq.n	800a868 <HAL_TIM_DMABurst_ReadStop+0x68>
 800a82c:	2280      	movs	r2, #128	; 0x80
 800a82e:	0052      	lsls	r2, r2, #1
 800a830:	4293      	cmp	r3, r2
 800a832:	d00d      	beq.n	800a850 <HAL_TIM_DMABurst_ReadStop+0x50>
    {
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
    }
    break;
    default:
    break;
 800a834:	e036      	b.n	800a8a4 <HAL_TIM_DMABurst_ReadStop+0xa4>
  switch(BurstRequestSrc)
 800a836:	2280      	movs	r2, #128	; 0x80
 800a838:	0192      	lsls	r2, r2, #6
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d026      	beq.n	800a88c <HAL_TIM_DMABurst_ReadStop+0x8c>
 800a83e:	2280      	movs	r2, #128	; 0x80
 800a840:	01d2      	lsls	r2, r2, #7
 800a842:	4293      	cmp	r3, r2
 800a844:	d028      	beq.n	800a898 <HAL_TIM_DMABurst_ReadStop+0x98>
 800a846:	2280      	movs	r2, #128	; 0x80
 800a848:	0152      	lsls	r2, r2, #5
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d018      	beq.n	800a880 <HAL_TIM_DMABurst_ReadStop+0x80>
    break;
 800a84e:	e029      	b.n	800a8a4 <HAL_TIM_DMABurst_ReadStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_UPDATE]);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	0018      	movs	r0, r3
 800a856:	f7f6 f8bd 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a85a:	e023      	b.n	800a8a4 <HAL_TIM_DMABurst_ReadStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC1]);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	0018      	movs	r0, r3
 800a862:	f7f6 f8b7 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a866:	e01d      	b.n	800a8a4 <HAL_TIM_DMABurst_ReadStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC2]);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86c:	0018      	movs	r0, r3
 800a86e:	f7f6 f8b1 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a872:	e017      	b.n	800a8a4 <HAL_TIM_DMABurst_ReadStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC3]);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a878:	0018      	movs	r0, r3
 800a87a:	f7f6 f8ab 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a87e:	e011      	b.n	800a8a4 <HAL_TIM_DMABurst_ReadStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_CC4]);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a884:	0018      	movs	r0, r3
 800a886:	f7f6 f8a5 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a88a:	e00b      	b.n	800a8a4 <HAL_TIM_DMABurst_ReadStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a890:	0018      	movs	r0, r3
 800a892:	f7f6 f89f 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a896:	e005      	b.n	800a8a4 <HAL_TIM_DMABurst_ReadStop+0xa4>
      HAL_DMA_Abort(htim->hdma[TIM_DMA_ID_TRIGGER]);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89c:	0018      	movs	r0, r3
 800a89e:	f7f6 f899 	bl	80009d4 <HAL_DMA_Abort>
    break;
 800a8a2:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	6812      	ldr	r2, [r2, #0]
 800a8ac:	68d2      	ldr	r2, [r2, #12]
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	43c9      	mvns	r1, r1
 800a8b2:	400a      	ands	r2, r1
 800a8b4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	b002      	add	sp, #8
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <HAL_TIM_GenerateEvent>:
  * @note TIM_EVENTSOURCE_COM and TIM_EVENTSOURCE_BREAK are used only with TIM1, TIM15, TIM16 and TIM17.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	223c      	movs	r2, #60	; 0x3c
 800a8ce:	5c9b      	ldrb	r3, [r3, r2]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d101      	bne.n	800a8d8 <HAL_TIM_GenerateEvent+0x18>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e014      	b.n	800a902 <HAL_TIM_GenerateEvent+0x42>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	223c      	movs	r2, #60	; 0x3c
 800a8dc:	2101      	movs	r1, #1
 800a8de:	5499      	strb	r1, [r3, r2]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	223d      	movs	r2, #61	; 0x3d
 800a8e4:	2102      	movs	r1, #2
 800a8e6:	5499      	strb	r1, [r3, r2]

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	223d      	movs	r2, #61	; 0x3d
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	223c      	movs	r2, #60	; 0x3c
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	0018      	movs	r0, r3
 800a904:	46bd      	mov	sp, r7
 800a906:	b002      	add	sp, #8
 800a908:	bd80      	pop	{r7, pc}
  *            @arg TIM_CHANNEL_3: TIM Channel 3
  *            @arg TIM_CHANNEL_4: TIM Channel 4
  * @retval HAL status
  */ 
__weak HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef * sClearInputConfig, uint32_t Channel)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b086      	sub	sp, #24
 800a90e:	af00      	add	r7, sp, #0
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	607a      	str	r2, [r7, #4]
  uint32_t tmpsmcr = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	617b      	str	r3, [r7, #20]
  assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
  assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
  assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	223c      	movs	r2, #60	; 0x3c
 800a91e:	5c9b      	ldrb	r3, [r3, r2]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_TIM_GenerateEvent+0x68>
 800a924:	2302      	movs	r3, #2
 800a926:	e0a1      	b.n	800aa6c <HAL_TIM_GenerateEvent+0x1ac>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	223c      	movs	r2, #60	; 0x3c
 800a92c:	2101      	movs	r1, #1
 800a92e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	223d      	movs	r2, #61	; 0x3d
 800a934:	2102      	movs	r1, #2
 800a936:	5499      	strb	r1, [r3, r2]

  switch (sClearInputConfig->ClearInputSource)
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <HAL_TIM_GenerateEvent+0x86>
 800a940:	2b01      	cmp	r3, #1
 800a942:	d011      	beq.n	800a968 <HAL_TIM_GenerateEvent+0xa8>
      /* Set the OCREF clear selection bit */
      htim->Instance->SMCR |= TIM_SMCR_OCCS;
    }
    break;
    default:
    break;
 800a944:	e023      	b.n	800a98e <HAL_TIM_GenerateEvent+0xce>
      tmpsmcr = htim->Instance->SMCR;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	617b      	str	r3, [r7, #20]
      tmpsmcr &= ~TIM_SMCR_OCCS;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2208      	movs	r2, #8
 800a952:	4393      	bics	r3, r2
 800a954:	617b      	str	r3, [r7, #20]
      tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	4a46      	ldr	r2, [pc, #280]	; (800aa74 <HAL_TIM_GenerateEvent+0x1b4>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	617b      	str	r3, [r7, #20]
      htim->Instance->SMCR = tmpsmcr;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	609a      	str	r2, [r3, #8]
    break;
 800a966:	e012      	b.n	800a98e <HAL_TIM_GenerateEvent+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6818      	ldr	r0, [r3, #0]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	68d9      	ldr	r1, [r3, #12]
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	f001 f82a 	bl	800b9d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_OCCS;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	6812      	ldr	r2, [r2, #0]
 800a984:	6892      	ldr	r2, [r2, #8]
 800a986:	2108      	movs	r1, #8
 800a988:	430a      	orrs	r2, r1
 800a98a:	609a      	str	r2, [r3, #8]
    break;
 800a98c:	46c0      	nop			; (mov r8, r8)
  }

  switch (Channel)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b04      	cmp	r3, #4
 800a992:	d01e      	beq.n	800a9d2 <HAL_TIM_GenerateEvent+0x112>
 800a994:	d802      	bhi.n	800a99c <HAL_TIM_GenerateEvent+0xdc>
 800a996:	2b00      	cmp	r3, #0
 800a998:	d005      	beq.n	800a9a6 <HAL_TIM_GenerateEvent+0xe6>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;
        }
      }
    break;
    default:
    break;
 800a99a:	e05e      	b.n	800aa5a <HAL_TIM_GenerateEvent+0x19a>
  switch (Channel)
 800a99c:	2b08      	cmp	r3, #8
 800a99e:	d02f      	beq.n	800aa00 <HAL_TIM_GenerateEvent+0x140>
 800a9a0:	2b0c      	cmp	r3, #12
 800a9a2:	d043      	beq.n	800aa2c <HAL_TIM_GenerateEvent+0x16c>
    break;
 800a9a4:	e059      	b.n	800aa5a <HAL_TIM_GenerateEvent+0x19a>
        if(sClearInputConfig->ClearInputState != RESET)
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d008      	beq.n	800a9c0 <HAL_TIM_GenerateEvent+0x100>
          htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	6812      	ldr	r2, [r2, #0]
 800a9b6:	6992      	ldr	r2, [r2, #24]
 800a9b8:	2180      	movs	r1, #128	; 0x80
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	619a      	str	r2, [r3, #24]
      break;
 800a9be:	e04c      	b.n	800aa5a <HAL_TIM_GenerateEvent+0x19a>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	6812      	ldr	r2, [r2, #0]
 800a9c8:	6992      	ldr	r2, [r2, #24]
 800a9ca:	2180      	movs	r1, #128	; 0x80
 800a9cc:	438a      	bics	r2, r1
 800a9ce:	619a      	str	r2, [r3, #24]
      break;
 800a9d0:	e043      	b.n	800aa5a <HAL_TIM_GenerateEvent+0x19a>
        if(sClearInputConfig->ClearInputState != RESET)
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d009      	beq.n	800a9ee <HAL_TIM_GenerateEvent+0x12e>
          htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	6812      	ldr	r2, [r2, #0]
 800a9e2:	6992      	ldr	r2, [r2, #24]
 800a9e4:	2180      	movs	r1, #128	; 0x80
 800a9e6:	0209      	lsls	r1, r1, #8
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	619a      	str	r2, [r3, #24]
    break;
 800a9ec:	e035      	b.n	800aa5a <HAL_TIM_GenerateEvent+0x19a>
          htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	6812      	ldr	r2, [r2, #0]
 800a9f6:	6992      	ldr	r2, [r2, #24]
 800a9f8:	491f      	ldr	r1, [pc, #124]	; (800aa78 <HAL_TIM_GenerateEvent+0x1b8>)
 800a9fa:	400a      	ands	r2, r1
 800a9fc:	619a      	str	r2, [r3, #24]
    break;
 800a9fe:	e02c      	b.n	800aa5a <HAL_TIM_GenerateEvent+0x19a>
        if(sClearInputConfig->ClearInputState != RESET)
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d008      	beq.n	800aa1a <HAL_TIM_GenerateEvent+0x15a>
          htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	6812      	ldr	r2, [r2, #0]
 800aa10:	69d2      	ldr	r2, [r2, #28]
 800aa12:	2180      	movs	r1, #128	; 0x80
 800aa14:	430a      	orrs	r2, r1
 800aa16:	61da      	str	r2, [r3, #28]
    break;
 800aa18:	e01f      	b.n	800aa5a <HAL_TIM_GenerateEvent+0x19a>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	6812      	ldr	r2, [r2, #0]
 800aa22:	69d2      	ldr	r2, [r2, #28]
 800aa24:	2180      	movs	r1, #128	; 0x80
 800aa26:	438a      	bics	r2, r1
 800aa28:	61da      	str	r2, [r3, #28]
    break;
 800aa2a:	e016      	b.n	800aa5a <HAL_TIM_GenerateEvent+0x19a>
        if(sClearInputConfig->ClearInputState != RESET)
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d009      	beq.n	800aa48 <HAL_TIM_GenerateEvent+0x188>
          htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	6812      	ldr	r2, [r2, #0]
 800aa3c:	69d2      	ldr	r2, [r2, #28]
 800aa3e:	2180      	movs	r1, #128	; 0x80
 800aa40:	0209      	lsls	r1, r1, #8
 800aa42:	430a      	orrs	r2, r1
 800aa44:	61da      	str	r2, [r3, #28]
    break;
 800aa46:	e007      	b.n	800aa58 <HAL_TIM_GenerateEvent+0x198>
        htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	6812      	ldr	r2, [r2, #0]
 800aa50:	69d2      	ldr	r2, [r2, #28]
 800aa52:	4909      	ldr	r1, [pc, #36]	; (800aa78 <HAL_TIM_GenerateEvent+0x1b8>)
 800aa54:	400a      	ands	r2, r1
 800aa56:	61da      	str	r2, [r3, #28]
    break;
 800aa58:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	223d      	movs	r2, #61	; 0x3d
 800aa5e:	2101      	movs	r1, #1
 800aa60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	223c      	movs	r2, #60	; 0x3c
 800aa66:	2100      	movs	r1, #0
 800aa68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	b006      	add	sp, #24
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	ffff00ff 	.word	0xffff00ff
 800aa78:	ffff7fff 	.word	0xffff7fff

0800aa7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	223c      	movs	r2, #60	; 0x3c
 800aa8e:	5c9b      	ldrb	r3, [r3, r2]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_TIM_ConfigClockSource+0x1c>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e0ca      	b.n	800ac2e <HAL_TIM_ConfigClockSource+0x1b2>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	223c      	movs	r2, #60	; 0x3c
 800aa9c:	2101      	movs	r1, #1
 800aa9e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	223d      	movs	r2, #61	; 0x3d
 800aaa4:	2102      	movs	r1, #2
 800aaa6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2277      	movs	r2, #119	; 0x77
 800aab4:	4393      	bics	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4a5f      	ldr	r2, [pc, #380]	; (800ac38 <HAL_TIM_ConfigClockSource+0x1bc>)
 800aabc:	4013      	ands	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b40      	cmp	r3, #64	; 0x40
 800aace:	d100      	bne.n	800aad2 <HAL_TIM_ConfigClockSource+0x56>
 800aad0:	e078      	b.n	800abc4 <HAL_TIM_ConfigClockSource+0x148>
 800aad2:	d80e      	bhi.n	800aaf2 <HAL_TIM_ConfigClockSource+0x76>
 800aad4:	2b10      	cmp	r3, #16
 800aad6:	d100      	bne.n	800aada <HAL_TIM_ConfigClockSource+0x5e>
 800aad8:	e08b      	b.n	800abf2 <HAL_TIM_ConfigClockSource+0x176>
 800aada:	d803      	bhi.n	800aae4 <HAL_TIM_ConfigClockSource+0x68>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d100      	bne.n	800aae2 <HAL_TIM_ConfigClockSource+0x66>
 800aae0:	e080      	b.n	800abe4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800aae2:	e09b      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 800aae4:	2b20      	cmp	r3, #32
 800aae6:	d100      	bne.n	800aaea <HAL_TIM_ConfigClockSource+0x6e>
 800aae8:	e08a      	b.n	800ac00 <HAL_TIM_ConfigClockSource+0x184>
 800aaea:	2b30      	cmp	r3, #48	; 0x30
 800aaec:	d100      	bne.n	800aaf0 <HAL_TIM_ConfigClockSource+0x74>
 800aaee:	e08e      	b.n	800ac0e <HAL_TIM_ConfigClockSource+0x192>
    break;
 800aaf0:	e094      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 800aaf2:	2b70      	cmp	r3, #112	; 0x70
 800aaf4:	d017      	beq.n	800ab26 <HAL_TIM_ConfigClockSource+0xaa>
 800aaf6:	d804      	bhi.n	800ab02 <HAL_TIM_ConfigClockSource+0x86>
 800aaf8:	2b50      	cmp	r3, #80	; 0x50
 800aafa:	d043      	beq.n	800ab84 <HAL_TIM_ConfigClockSource+0x108>
 800aafc:	2b60      	cmp	r3, #96	; 0x60
 800aafe:	d051      	beq.n	800aba4 <HAL_TIM_ConfigClockSource+0x128>
    break;
 800ab00:	e08c      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 800ab02:	2280      	movs	r2, #128	; 0x80
 800ab04:	0152      	lsls	r2, r2, #5
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d004      	beq.n	800ab14 <HAL_TIM_ConfigClockSource+0x98>
 800ab0a:	2280      	movs	r2, #128	; 0x80
 800ab0c:	0192      	lsls	r2, r2, #6
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d024      	beq.n	800ab5c <HAL_TIM_ConfigClockSource+0xe0>
    break;
 800ab12:	e083      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	6812      	ldr	r2, [r2, #0]
 800ab1c:	6892      	ldr	r2, [r2, #8]
 800ab1e:	2107      	movs	r1, #7
 800ab20:	438a      	bics	r2, r1
 800ab22:	609a      	str	r2, [r3, #8]
    break;
 800ab24:	e07a      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	6899      	ldr	r1, [r3, #8]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f000 ff4b 	bl	800b9d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2277      	movs	r2, #119	; 0x77
 800ab46:	4393      	bics	r3, r2
 800ab48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2277      	movs	r2, #119	; 0x77
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	609a      	str	r2, [r3, #8]
    break;
 800ab5a:	e05f      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6818      	ldr	r0, [r3, #0]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	6899      	ldr	r1, [r3, #8]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f000 ff30 	bl	800b9d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	6812      	ldr	r2, [r2, #0]
 800ab78:	6892      	ldr	r2, [r2, #8]
 800ab7a:	2180      	movs	r1, #128	; 0x80
 800ab7c:	01c9      	lsls	r1, r1, #7
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	609a      	str	r2, [r3, #8]
    break;
 800ab82:	e04b      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6818      	ldr	r0, [r3, #0]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	6859      	ldr	r1, [r3, #4]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	001a      	movs	r2, r3
 800ab92:	f000 fdc1 	bl	800b718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2150      	movs	r1, #80	; 0x50
 800ab9c:	0018      	movs	r0, r3
 800ab9e:	f000 fef7 	bl	800b990 <TIM_ITRx_SetConfig>
    break;
 800aba2:	e03b      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	6859      	ldr	r1, [r3, #4]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	001a      	movs	r2, r3
 800abb2:	f000 fe29 	bl	800b808 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2160      	movs	r1, #96	; 0x60
 800abbc:	0018      	movs	r0, r3
 800abbe:	f000 fee7 	bl	800b990 <TIM_ITRx_SetConfig>
    break;
 800abc2:	e02b      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6818      	ldr	r0, [r3, #0]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	6859      	ldr	r1, [r3, #4]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	001a      	movs	r2, r3
 800abd2:	f000 fda1 	bl	800b718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2140      	movs	r1, #64	; 0x40
 800abdc:	0018      	movs	r0, r3
 800abde:	f000 fed7 	bl	800b990 <TIM_ITRx_SetConfig>
    break;
 800abe2:	e01b      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2100      	movs	r1, #0
 800abea:	0018      	movs	r0, r3
 800abec:	f000 fed0 	bl	800b990 <TIM_ITRx_SetConfig>
    break;
 800abf0:	e014      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2110      	movs	r1, #16
 800abf8:	0018      	movs	r0, r3
 800abfa:	f000 fec9 	bl	800b990 <TIM_ITRx_SetConfig>
    break;
 800abfe:	e00d      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2120      	movs	r1, #32
 800ac06:	0018      	movs	r0, r3
 800ac08:	f000 fec2 	bl	800b990 <TIM_ITRx_SetConfig>
    break;
 800ac0c:	e006      	b.n	800ac1c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2130      	movs	r1, #48	; 0x30
 800ac14:	0018      	movs	r0, r3
 800ac16:	f000 febb 	bl	800b990 <TIM_ITRx_SetConfig>
    break;
 800ac1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	223d      	movs	r2, #61	; 0x3d
 800ac20:	2101      	movs	r1, #1
 800ac22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	223c      	movs	r2, #60	; 0x3c
 800ac28:	2100      	movs	r1, #0
 800ac2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	0018      	movs	r0, r3
 800ac30:	46bd      	mov	sp, r7
 800ac32:	b004      	add	sp, #16
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	46c0      	nop			; (mov r8, r8)
 800ac38:	ffff00ff 	.word	0xffff00ff

0800ac3c <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2 = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2280      	movs	r2, #128	; 0x80
 800ac56:	4393      	bics	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]

  /* Set the the TI1 selection */
  tmpcr2 |= TI1_Selection;
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	0018      	movs	r0, r3
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	b004      	add	sp, #16
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	223c      	movs	r2, #60	; 0x3c
 800ac82:	5c9b      	ldrb	r3, [r3, r2]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d101      	bne.n	800ac8c <HAL_TIM_SlaveConfigSynchronization+0x18>
 800ac88:	2302      	movs	r3, #2
 800ac8a:	e026      	b.n	800acda <HAL_TIM_SlaveConfigSynchronization+0x66>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	223c      	movs	r2, #60	; 0x3c
 800ac90:	2101      	movs	r1, #1
 800ac92:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	223d      	movs	r2, #61	; 0x3d
 800ac98:	2102      	movs	r1, #2
 800ac9a:	5499      	strb	r1, [r3, r2]

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	0011      	movs	r1, r2
 800aca2:	0018      	movs	r0, r3
 800aca4:	f000 fc4e 	bl	800b544 <TIM_SlaveTimer_SetConfig>

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6812      	ldr	r2, [r2, #0]
 800acb0:	68d2      	ldr	r2, [r2, #12]
 800acb2:	2140      	movs	r1, #64	; 0x40
 800acb4:	438a      	bics	r2, r1
 800acb6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	6812      	ldr	r2, [r2, #0]
 800acc0:	68d2      	ldr	r2, [r2, #12]
 800acc2:	4908      	ldr	r1, [pc, #32]	; (800ace4 <HAL_TIM_SlaveConfigSynchronization+0x70>)
 800acc4:	400a      	ands	r2, r1
 800acc6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	223d      	movs	r2, #61	; 0x3d
 800accc:	2101      	movs	r1, #1
 800acce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	223c      	movs	r2, #60	; 0x3c
 800acd4:	2100      	movs	r1, #0
 800acd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
    }
 800acda:	0018      	movs	r0, r3
 800acdc:	46bd      	mov	sp, r7
 800acde:	b002      	add	sp, #8
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	46c0      	nop			; (mov r8, r8)
 800ace4:	ffffbfff 	.word	0xffffbfff

0800ace8 <HAL_TIM_SlaveConfigSynchronization_IT>:
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization_IT(TIM_HandleTypeDef *htim,
                                                        TIM_SlaveConfigTypeDef * sSlaveConfig)
    {
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
      /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	223c      	movs	r2, #60	; 0x3c
 800acf6:	5c9b      	ldrb	r3, [r3, r2]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d101      	bne.n	800ad00 <HAL_TIM_SlaveConfigSynchronization_IT+0x18>
 800acfc:	2302      	movs	r3, #2
 800acfe:	e026      	b.n	800ad4e <HAL_TIM_SlaveConfigSynchronization_IT+0x66>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	223c      	movs	r2, #60	; 0x3c
 800ad04:	2101      	movs	r1, #1
 800ad06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	223d      	movs	r2, #61	; 0x3d
 800ad0c:	2102      	movs	r1, #2
 800ad0e:	5499      	strb	r1, [r3, r2]

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	0011      	movs	r1, r2
 800ad16:	0018      	movs	r0, r3
 800ad18:	f000 fc14 	bl	800b544 <TIM_SlaveTimer_SetConfig>

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	6812      	ldr	r2, [r2, #0]
 800ad24:	68d2      	ldr	r2, [r2, #12]
 800ad26:	2140      	movs	r1, #64	; 0x40
 800ad28:	430a      	orrs	r2, r1
 800ad2a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	6812      	ldr	r2, [r2, #0]
 800ad34:	68d2      	ldr	r2, [r2, #12]
 800ad36:	4908      	ldr	r1, [pc, #32]	; (800ad58 <HAL_TIM_SlaveConfigSynchronization_IT+0x70>)
 800ad38:	400a      	ands	r2, r1
 800ad3a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	223d      	movs	r2, #61	; 0x3d
 800ad40:	2101      	movs	r1, #1
 800ad42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	223c      	movs	r2, #60	; 0x3c
 800ad48:	2100      	movs	r1, #0
 800ad4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	0018      	movs	r0, r3
 800ad50:	46bd      	mov	sp, r7
 800ad52:	b002      	add	sp, #8
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	46c0      	nop			; (mov r8, r8)
 800ad58:	ffffbfff 	.word	0xffffbfff

0800ad5c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3 : TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4 : TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(htim);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	223c      	movs	r2, #60	; 0x3c
 800ad6e:	5c9b      	ldrb	r3, [r3, r2]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d101      	bne.n	800ad78 <HAL_TIM_ReadCapturedValue+0x1c>
 800ad74:	2302      	movs	r3, #2
 800ad76:	e028      	b.n	800adca <HAL_TIM_ReadCapturedValue+0x6e>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	223c      	movs	r2, #60	; 0x3c
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	2b04      	cmp	r3, #4
 800ad84:	d00d      	beq.n	800ada2 <HAL_TIM_ReadCapturedValue+0x46>
 800ad86:	d802      	bhi.n	800ad8e <HAL_TIM_ReadCapturedValue+0x32>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d005      	beq.n	800ad98 <HAL_TIM_ReadCapturedValue+0x3c>

      break;
    }

  default:
    break;
 800ad8c:	e018      	b.n	800adc0 <HAL_TIM_ReadCapturedValue+0x64>
  switch (Channel)
 800ad8e:	2b08      	cmp	r3, #8
 800ad90:	d00c      	beq.n	800adac <HAL_TIM_ReadCapturedValue+0x50>
 800ad92:	2b0c      	cmp	r3, #12
 800ad94:	d00f      	beq.n	800adb6 <HAL_TIM_ReadCapturedValue+0x5a>
    break;
 800ad96:	e013      	b.n	800adc0 <HAL_TIM_ReadCapturedValue+0x64>
      tmpreg =  htim->Instance->CCR1;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad9e:	60fb      	str	r3, [r7, #12]
      break;
 800ada0:	e00e      	b.n	800adc0 <HAL_TIM_ReadCapturedValue+0x64>
      tmpreg =   htim->Instance->CCR2;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	60fb      	str	r3, [r7, #12]
      break;
 800adaa:	e009      	b.n	800adc0 <HAL_TIM_ReadCapturedValue+0x64>
      tmpreg =   htim->Instance->CCR3;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb2:	60fb      	str	r3, [r7, #12]
      break;
 800adb4:	e004      	b.n	800adc0 <HAL_TIM_ReadCapturedValue+0x64>
      tmpreg =   htim->Instance->CCR4;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbc:	60fb      	str	r3, [r7, #12]
      break;
 800adbe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	223c      	movs	r2, #60	; 0x3c
 800adc4:	2100      	movs	r1, #0
 800adc6:	5499      	strb	r1, [r3, r2]
  return tmpreg;
 800adc8:	68fb      	ldr	r3, [r7, #12]
}
 800adca:	0018      	movs	r0, r3
 800adcc:	46bd      	mov	sp, r7
 800adce:	b004      	add	sp, #16
 800add0:	bd80      	pop	{r7, pc}

0800add2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 800adda:	46c0      	nop			; (mov r8, r8)
 800addc:	46bd      	mov	sp, r7
 800adde:	b002      	add	sp, #8
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	46bd      	mov	sp, r7
 800adee:	b002      	add	sp, #8
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b082      	sub	sp, #8
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b002      	add	sp, #8
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	b002      	add	sp, #8
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae1a:	46c0      	nop			; (mov r8, r8)
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	b002      	add	sp, #8
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b082      	sub	sp, #8
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ae2a:	46c0      	nop			; (mov r8, r8)
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	b002      	add	sp, #8
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base state
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b082      	sub	sp, #8
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	223d      	movs	r2, #61	; 0x3d
 800ae3e:	5c9b      	ldrb	r3, [r3, r2]
 800ae40:	b2db      	uxtb	r3, r3
}
 800ae42:	0018      	movs	r0, r3
 800ae44:	46bd      	mov	sp, r7
 800ae46:	b002      	add	sp, #8
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC state
  * @param  htim TIM Ouput Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	223d      	movs	r2, #61	; 0x3d
 800ae56:	5c9b      	ldrb	r3, [r3, r2]
 800ae58:	b2db      	uxtb	r3, r3
}
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	b002      	add	sp, #8
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM state
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	223d      	movs	r2, #61	; 0x3d
 800ae6e:	5c9b      	ldrb	r3, [r3, r2]
 800ae70:	b2db      	uxtb	r3, r3
}
 800ae72:	0018      	movs	r0, r3
 800ae74:	46bd      	mov	sp, r7
 800ae76:	b002      	add	sp, #8
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture state
  * @param  htim TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	223d      	movs	r2, #61	; 0x3d
 800ae86:	5c9b      	ldrb	r3, [r3, r2]
 800ae88:	b2db      	uxtb	r3, r3
}
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	b002      	add	sp, #8
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode state
  * @param  htim TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  return htim->State;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	223d      	movs	r2, #61	; 0x3d
 800ae9e:	5c9b      	ldrb	r3, [r3, r2]
 800aea0:	b2db      	uxtb	r3, r3
}
 800aea2:	0018      	movs	r0, r3
 800aea4:	46bd      	mov	sp, r7
 800aea6:	b002      	add	sp, #8
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode state
  * @param  htim TIM Encoder handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b082      	sub	sp, #8
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  return htim->State;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	223d      	movs	r2, #61	; 0x3d
 800aeb6:	5c9b      	ldrb	r3, [r3, r2]
 800aeb8:	b2db      	uxtb	r3, r3
}
 800aeba:	0018      	movs	r0, r3
 800aebc:	46bd      	mov	sp, r7
 800aebe:	b002      	add	sp, #8
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aece:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	223d      	movs	r2, #61	; 0x3d
 800aed4:	2101      	movs	r1, #1
 800aed6:	5499      	strb	r1, [r3, r2]

  HAL_TIM_ErrorCallback(htim);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	0018      	movs	r0, r3
 800aedc:	f7ff ffa1 	bl	800ae22 <HAL_TIM_ErrorCallback>
}
 800aee0:	46c0      	nop			; (mov r8, r8)
 800aee2:	46bd      	mov	sp, r7
 800aee4:	b004      	add	sp, #16
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	223d      	movs	r2, #61	; 0x3d
 800aefa:	2101      	movs	r1, #1
 800aefc:	5499      	strb	r1, [r3, r2]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	d103      	bne.n	800af10 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2201      	movs	r2, #1
 800af0c:	771a      	strb	r2, [r3, #28]
 800af0e:	e019      	b.n	800af44 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	429a      	cmp	r2, r3
 800af18:	d103      	bne.n	800af22 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2202      	movs	r2, #2
 800af1e:	771a      	strb	r2, [r3, #28]
 800af20:	e010      	b.n	800af44 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d103      	bne.n	800af34 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2204      	movs	r2, #4
 800af30:	771a      	strb	r2, [r3, #28]
 800af32:	e007      	b.n	800af44 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d102      	bne.n	800af44 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2208      	movs	r2, #8
 800af42:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	0018      	movs	r0, r3
 800af48:	f7ff ff5b 	bl	800ae02 <HAL_TIM_PWM_PulseFinishedCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	771a      	strb	r2, [r3, #28]
}
 800af52:	46c0      	nop			; (mov r8, r8)
 800af54:	46bd      	mov	sp, r7
 800af56:	b004      	add	sp, #16
 800af58:	bd80      	pop	{r7, pc}

0800af5a <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af66:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	223d      	movs	r2, #61	; 0x3d
 800af6c:	2101      	movs	r1, #1
 800af6e:	5499      	strb	r1, [r3, r2]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	429a      	cmp	r2, r3
 800af78:	d103      	bne.n	800af82 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2201      	movs	r2, #1
 800af7e:	771a      	strb	r2, [r3, #28]
 800af80:	e019      	b.n	800afb6 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d103      	bne.n	800af94 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2202      	movs	r2, #2
 800af90:	771a      	strb	r2, [r3, #28]
 800af92:	e010      	b.n	800afb6 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d103      	bne.n	800afa6 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2204      	movs	r2, #4
 800afa2:	771a      	strb	r2, [r3, #28]
 800afa4:	e007      	b.n	800afb6 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	429a      	cmp	r2, r3
 800afae:	d102      	bne.n	800afb6 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2208      	movs	r2, #8
 800afb4:	771a      	strb	r2, [r3, #28]
  }

  HAL_TIM_IC_CaptureCallback(htim);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	0018      	movs	r0, r3
 800afba:	f7ff ff1a 	bl	800adf2 <HAL_TIM_IC_CaptureCallback>

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	771a      	strb	r2, [r3, #28]
}
 800afc4:	46c0      	nop			; (mov r8, r8)
 800afc6:	46bd      	mov	sp, r7
 800afc8:	b004      	add	sp, #16
 800afca:	bd80      	pop	{r7, pc}

0800afcc <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	223d      	movs	r2, #61	; 0x3d
 800afde:	2101      	movs	r1, #1
 800afe0:	5499      	strb	r1, [r3, r2]

  HAL_TIM_PeriodElapsedCallback(htim);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	0018      	movs	r0, r3
 800afe6:	f7ff fef4 	bl	800add2 <HAL_TIM_PeriodElapsedCallback>
}
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	46bd      	mov	sp, r7
 800afee:	b004      	add	sp, #16
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	223d      	movs	r2, #61	; 0x3d
 800b004:	2101      	movs	r1, #1
 800b006:	5499      	strb	r1, [r3, r2]

  HAL_TIM_TriggerCallback(htim);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	0018      	movs	r0, r3
 800b00c:	f7ff ff01 	bl	800ae12 <HAL_TIM_TriggerCallback>
}
 800b010:	46c0      	nop			; (mov r8, r8)
 800b012:	46bd      	mov	sp, r7
 800b014:	b004      	add	sp, #16
 800b016:	bd80      	pop	{r7, pc}

0800b018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a34      	ldr	r2, [pc, #208]	; (800b100 <TIM_Base_SetConfig+0xe8>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d008      	beq.n	800b046 <TIM_Base_SetConfig+0x2e>
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	2380      	movs	r3, #128	; 0x80
 800b038:	05db      	lsls	r3, r3, #23
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d003      	beq.n	800b046 <TIM_Base_SetConfig+0x2e>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a30      	ldr	r2, [pc, #192]	; (800b104 <TIM_Base_SetConfig+0xec>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d108      	bne.n	800b058 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2270      	movs	r2, #112	; 0x70
 800b04a:	4393      	bics	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	4313      	orrs	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a29      	ldr	r2, [pc, #164]	; (800b100 <TIM_Base_SetConfig+0xe8>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d018      	beq.n	800b092 <TIM_Base_SetConfig+0x7a>
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	2380      	movs	r3, #128	; 0x80
 800b064:	05db      	lsls	r3, r3, #23
 800b066:	429a      	cmp	r2, r3
 800b068:	d013      	beq.n	800b092 <TIM_Base_SetConfig+0x7a>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a25      	ldr	r2, [pc, #148]	; (800b104 <TIM_Base_SetConfig+0xec>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d00f      	beq.n	800b092 <TIM_Base_SetConfig+0x7a>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a24      	ldr	r2, [pc, #144]	; (800b108 <TIM_Base_SetConfig+0xf0>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d00b      	beq.n	800b092 <TIM_Base_SetConfig+0x7a>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a23      	ldr	r2, [pc, #140]	; (800b10c <TIM_Base_SetConfig+0xf4>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d007      	beq.n	800b092 <TIM_Base_SetConfig+0x7a>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a22      	ldr	r2, [pc, #136]	; (800b110 <TIM_Base_SetConfig+0xf8>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d003      	beq.n	800b092 <TIM_Base_SetConfig+0x7a>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a21      	ldr	r2, [pc, #132]	; (800b114 <TIM_Base_SetConfig+0xfc>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d108      	bne.n	800b0a4 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	4a20      	ldr	r2, [pc, #128]	; (800b118 <TIM_Base_SetConfig+0x100>)
 800b096:	4013      	ands	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2280      	movs	r2, #128	; 0x80
 800b0a8:	4393      	bics	r3, r2
 800b0aa:	001a      	movs	r2, r3
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	689a      	ldr	r2, [r3, #8]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a0c      	ldr	r2, [pc, #48]	; (800b100 <TIM_Base_SetConfig+0xe8>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d00b      	beq.n	800b0ea <TIM_Base_SetConfig+0xd2>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a0d      	ldr	r2, [pc, #52]	; (800b10c <TIM_Base_SetConfig+0xf4>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d007      	beq.n	800b0ea <TIM_Base_SetConfig+0xd2>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a0c      	ldr	r2, [pc, #48]	; (800b110 <TIM_Base_SetConfig+0xf8>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d003      	beq.n	800b0ea <TIM_Base_SetConfig+0xd2>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a0b      	ldr	r2, [pc, #44]	; (800b114 <TIM_Base_SetConfig+0xfc>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d103      	bne.n	800b0f2 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	691a      	ldr	r2, [r3, #16]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	615a      	str	r2, [r3, #20]
}
 800b0f8:	46c0      	nop			; (mov r8, r8)
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	b004      	add	sp, #16
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	40012c00 	.word	0x40012c00
 800b104:	40000400 	.word	0x40000400
 800b108:	40002000 	.word	0x40002000
 800b10c:	40014000 	.word	0x40014000
 800b110:	40014400 	.word	0x40014400
 800b114:	40014800 	.word	0x40014800
 800b118:	fffffcff 	.word	0xfffffcff

0800b11c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	2201      	movs	r2, #1
 800b138:	4393      	bics	r3, r2
 800b13a:	001a      	movs	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2270      	movs	r2, #112	; 0x70
 800b156:	4393      	bics	r3, r2
 800b158:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2203      	movs	r2, #3
 800b15e:	4393      	bics	r3, r2
 800b160:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4313      	orrs	r3, r2
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	2202      	movs	r2, #2
 800b170:	4393      	bics	r3, r2
 800b172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a27      	ldr	r2, [pc, #156]	; (800b220 <TIM_OC1_SetConfig+0x104>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d00b      	beq.n	800b19e <TIM_OC1_SetConfig+0x82>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a26      	ldr	r2, [pc, #152]	; (800b224 <TIM_OC1_SetConfig+0x108>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d007      	beq.n	800b19e <TIM_OC1_SetConfig+0x82>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a25      	ldr	r2, [pc, #148]	; (800b228 <TIM_OC1_SetConfig+0x10c>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d003      	beq.n	800b19e <TIM_OC1_SetConfig+0x82>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a24      	ldr	r2, [pc, #144]	; (800b22c <TIM_OC1_SetConfig+0x110>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d10c      	bne.n	800b1b8 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2208      	movs	r2, #8
 800b1a2:	4393      	bics	r3, r2
 800b1a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	4393      	bics	r3, r2
 800b1b6:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a19      	ldr	r2, [pc, #100]	; (800b220 <TIM_OC1_SetConfig+0x104>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d00b      	beq.n	800b1d8 <TIM_OC1_SetConfig+0xbc>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a18      	ldr	r2, [pc, #96]	; (800b224 <TIM_OC1_SetConfig+0x108>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d007      	beq.n	800b1d8 <TIM_OC1_SetConfig+0xbc>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a17      	ldr	r2, [pc, #92]	; (800b228 <TIM_OC1_SetConfig+0x10c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d003      	beq.n	800b1d8 <TIM_OC1_SetConfig+0xbc>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a16      	ldr	r2, [pc, #88]	; (800b22c <TIM_OC1_SetConfig+0x110>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d111      	bne.n	800b1fc <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	4a15      	ldr	r2, [pc, #84]	; (800b230 <TIM_OC1_SetConfig+0x114>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	4a14      	ldr	r2, [pc, #80]	; (800b234 <TIM_OC1_SetConfig+0x118>)
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	621a      	str	r2, [r3, #32]
}
 800b216:	46c0      	nop			; (mov r8, r8)
 800b218:	46bd      	mov	sp, r7
 800b21a:	b006      	add	sp, #24
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	46c0      	nop			; (mov r8, r8)
 800b220:	40012c00 	.word	0x40012c00
 800b224:	40014000 	.word	0x40014000
 800b228:	40014400 	.word	0x40014400
 800b22c:	40014800 	.word	0x40014800
 800b230:	fffffeff 	.word	0xfffffeff
 800b234:	fffffdff 	.word	0xfffffdff

0800b238 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800b24a:	2300      	movs	r3, #0
 800b24c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	2210      	movs	r2, #16
 800b254:	4393      	bics	r3, r2
 800b256:	001a      	movs	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a1b      	ldr	r3, [r3, #32]
 800b260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	4a2e      	ldr	r2, [pc, #184]	; (800b32c <TIM_OC2_SetConfig+0xf4>)
 800b272:	4013      	ands	r3, r2
 800b274:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	4a2d      	ldr	r2, [pc, #180]	; (800b330 <TIM_OC2_SetConfig+0xf8>)
 800b27a:	4013      	ands	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	021b      	lsls	r3, r3, #8
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	4313      	orrs	r3, r2
 800b288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	2220      	movs	r2, #32
 800b28e:	4393      	bics	r3, r2
 800b290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	011b      	lsls	r3, r3, #4
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a24      	ldr	r2, [pc, #144]	; (800b334 <TIM_OC2_SetConfig+0xfc>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d10d      	bne.n	800b2c2 <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	2280      	movs	r2, #128	; 0x80
 800b2aa:	4393      	bics	r3, r2
 800b2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	011b      	lsls	r3, r3, #4
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2240      	movs	r2, #64	; 0x40
 800b2be:	4393      	bics	r3, r2
 800b2c0:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a1b      	ldr	r2, [pc, #108]	; (800b334 <TIM_OC2_SetConfig+0xfc>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d00b      	beq.n	800b2e2 <TIM_OC2_SetConfig+0xaa>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a1a      	ldr	r2, [pc, #104]	; (800b338 <TIM_OC2_SetConfig+0x100>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d007      	beq.n	800b2e2 <TIM_OC2_SetConfig+0xaa>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a19      	ldr	r2, [pc, #100]	; (800b33c <TIM_OC2_SetConfig+0x104>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d003      	beq.n	800b2e2 <TIM_OC2_SetConfig+0xaa>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a18      	ldr	r2, [pc, #96]	; (800b340 <TIM_OC2_SetConfig+0x108>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d113      	bne.n	800b30a <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	4a17      	ldr	r2, [pc, #92]	; (800b344 <TIM_OC2_SetConfig+0x10c>)
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	4a16      	ldr	r2, [pc, #88]	; (800b348 <TIM_OC2_SetConfig+0x110>)
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	4313      	orrs	r3, r2
 800b308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	621a      	str	r2, [r3, #32]
}
 800b324:	46c0      	nop			; (mov r8, r8)
 800b326:	46bd      	mov	sp, r7
 800b328:	b006      	add	sp, #24
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	ffff8fff 	.word	0xffff8fff
 800b330:	fffffcff 	.word	0xfffffcff
 800b334:	40012c00 	.word	0x40012c00
 800b338:	40014000 	.word	0x40014000
 800b33c:	40014400 	.word	0x40014400
 800b340:	40014800 	.word	0x40014800
 800b344:	fffffbff 	.word	0xfffffbff
 800b348:	fffff7ff 	.word	0xfffff7ff

0800b34c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800b356:	2300      	movs	r3, #0
 800b358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800b35a:	2300      	movs	r3, #0
 800b35c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800b35e:	2300      	movs	r3, #0
 800b360:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	4a35      	ldr	r2, [pc, #212]	; (800b43c <TIM_OC3_SetConfig+0xf0>)
 800b368:	401a      	ands	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a1b      	ldr	r3, [r3, #32]
 800b372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2270      	movs	r2, #112	; 0x70
 800b384:	4393      	bics	r3, r2
 800b386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2203      	movs	r2, #3
 800b38c:	4393      	bics	r3, r2
 800b38e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	4a28      	ldr	r2, [pc, #160]	; (800b440 <TIM_OC3_SetConfig+0xf4>)
 800b39e:	4013      	ands	r3, r2
 800b3a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	021b      	lsls	r3, r3, #8
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a24      	ldr	r2, [pc, #144]	; (800b444 <TIM_OC3_SetConfig+0xf8>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d10d      	bne.n	800b3d2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	4a23      	ldr	r2, [pc, #140]	; (800b448 <TIM_OC3_SetConfig+0xfc>)
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	021b      	lsls	r3, r3, #8
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	4a1f      	ldr	r2, [pc, #124]	; (800b44c <TIM_OC3_SetConfig+0x100>)
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a1b      	ldr	r2, [pc, #108]	; (800b444 <TIM_OC3_SetConfig+0xf8>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d00b      	beq.n	800b3f2 <TIM_OC3_SetConfig+0xa6>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a1c      	ldr	r2, [pc, #112]	; (800b450 <TIM_OC3_SetConfig+0x104>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d007      	beq.n	800b3f2 <TIM_OC3_SetConfig+0xa6>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a1b      	ldr	r2, [pc, #108]	; (800b454 <TIM_OC3_SetConfig+0x108>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d003      	beq.n	800b3f2 <TIM_OC3_SetConfig+0xa6>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a1a      	ldr	r2, [pc, #104]	; (800b458 <TIM_OC3_SetConfig+0x10c>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d113      	bne.n	800b41a <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	4a19      	ldr	r2, [pc, #100]	; (800b45c <TIM_OC3_SetConfig+0x110>)
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	4a18      	ldr	r2, [pc, #96]	; (800b460 <TIM_OC3_SetConfig+0x114>)
 800b3fe:	4013      	ands	r3, r2
 800b400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	011b      	lsls	r3, r3, #4
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	011b      	lsls	r3, r3, #4
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	4313      	orrs	r3, r2
 800b418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	621a      	str	r2, [r3, #32]
}
 800b434:	46c0      	nop			; (mov r8, r8)
 800b436:	46bd      	mov	sp, r7
 800b438:	b006      	add	sp, #24
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	fffffeff 	.word	0xfffffeff
 800b440:	fffffdff 	.word	0xfffffdff
 800b444:	40012c00 	.word	0x40012c00
 800b448:	fffff7ff 	.word	0xfffff7ff
 800b44c:	fffffbff 	.word	0xfffffbff
 800b450:	40014000 	.word	0x40014000
 800b454:	40014400 	.word	0x40014400
 800b458:	40014800 	.word	0x40014800
 800b45c:	ffffefff 	.word	0xffffefff
 800b460:	ffffdfff 	.word	0xffffdfff

0800b464 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800b46e:	2300      	movs	r3, #0
 800b470:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	4a28      	ldr	r2, [pc, #160]	; (800b520 <TIM_OC4_SetConfig+0xbc>)
 800b480:	401a      	ands	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	69db      	ldr	r3, [r3, #28]
 800b496:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	4a22      	ldr	r2, [pc, #136]	; (800b524 <TIM_OC4_SetConfig+0xc0>)
 800b49c:	4013      	ands	r3, r2
 800b49e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	4a21      	ldr	r2, [pc, #132]	; (800b528 <TIM_OC4_SetConfig+0xc4>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	021b      	lsls	r3, r3, #8
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	4a1d      	ldr	r2, [pc, #116]	; (800b52c <TIM_OC4_SetConfig+0xc8>)
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	031b      	lsls	r3, r3, #12
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a19      	ldr	r2, [pc, #100]	; (800b530 <TIM_OC4_SetConfig+0xcc>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d00b      	beq.n	800b4e8 <TIM_OC4_SetConfig+0x84>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a18      	ldr	r2, [pc, #96]	; (800b534 <TIM_OC4_SetConfig+0xd0>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d007      	beq.n	800b4e8 <TIM_OC4_SetConfig+0x84>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a17      	ldr	r2, [pc, #92]	; (800b538 <TIM_OC4_SetConfig+0xd4>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d003      	beq.n	800b4e8 <TIM_OC4_SetConfig+0x84>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a16      	ldr	r2, [pc, #88]	; (800b53c <TIM_OC4_SetConfig+0xd8>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d109      	bne.n	800b4fc <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	4a15      	ldr	r2, [pc, #84]	; (800b540 <TIM_OC4_SetConfig+0xdc>)
 800b4ec:	4013      	ands	r3, r2
 800b4ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	019b      	lsls	r3, r3, #6
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	693a      	ldr	r2, [r7, #16]
 800b506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	621a      	str	r2, [r3, #32]
}
 800b516:	46c0      	nop			; (mov r8, r8)
 800b518:	46bd      	mov	sp, r7
 800b51a:	b006      	add	sp, #24
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	46c0      	nop			; (mov r8, r8)
 800b520:	ffffefff 	.word	0xffffefff
 800b524:	ffff8fff 	.word	0xffff8fff
 800b528:	fffffcff 	.word	0xfffffcff
 800b52c:	ffffdfff 	.word	0xffffdfff
 800b530:	40012c00 	.word	0x40012c00
 800b534:	40014000 	.word	0x40014000
 800b538:	40014400 	.word	0x40014400
 800b53c:	40014800 	.word	0x40014800
 800b540:	ffffbfff 	.word	0xffffbfff

0800b544 <TIM_SlaveTimer_SetConfig>:

static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800b556:	2300      	movs	r3, #0
 800b558:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2270      	movs	r2, #112	; 0x70
 800b566:	4393      	bics	r3, r2
 800b568:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	4313      	orrs	r3, r2
 800b572:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2207      	movs	r2, #7
 800b578:	4393      	bics	r3, r2
 800b57a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	4313      	orrs	r3, r2
 800b584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	2b30      	cmp	r3, #48	; 0x30
 800b594:	d054      	beq.n	800b640 <TIM_SlaveTimer_SetConfig+0xfc>
 800b596:	d806      	bhi.n	800b5a6 <TIM_SlaveTimer_SetConfig+0x62>
 800b598:	2b10      	cmp	r3, #16
 800b59a:	d053      	beq.n	800b644 <TIM_SlaveTimer_SetConfig+0x100>
 800b59c:	2b20      	cmp	r3, #32
 800b59e:	d053      	beq.n	800b648 <TIM_SlaveTimer_SetConfig+0x104>
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d053      	beq.n	800b64c <TIM_SlaveTimer_SetConfig+0x108>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;

  default:
    break;
 800b5a4:	e053      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
  switch (sSlaveConfig->InputTrigger)
 800b5a6:	2b50      	cmp	r3, #80	; 0x50
 800b5a8:	d036      	beq.n	800b618 <TIM_SlaveTimer_SetConfig+0xd4>
 800b5aa:	d802      	bhi.n	800b5b2 <TIM_SlaveTimer_SetConfig+0x6e>
 800b5ac:	2b40      	cmp	r3, #64	; 0x40
 800b5ae:	d010      	beq.n	800b5d2 <TIM_SlaveTimer_SetConfig+0x8e>
    break;
 800b5b0:	e04d      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
  switch (sSlaveConfig->InputTrigger)
 800b5b2:	2b60      	cmp	r3, #96	; 0x60
 800b5b4:	d03a      	beq.n	800b62c <TIM_SlaveTimer_SetConfig+0xe8>
 800b5b6:	2b70      	cmp	r3, #112	; 0x70
 800b5b8:	d000      	beq.n	800b5bc <TIM_SlaveTimer_SetConfig+0x78>
    break;
 800b5ba:	e048      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_ETR_SetConfig(htim->Instance,
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6818      	ldr	r0, [r3, #0]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	68d9      	ldr	r1, [r3, #12]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	689a      	ldr	r2, [r3, #8]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	f000 fa00 	bl	800b9d0 <TIM_ETR_SetConfig>
    break;
 800b5d0:	e03d      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
      tmpccer = htim->Instance->CCER;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	6812      	ldr	r2, [r2, #0]
 800b5e2:	6a12      	ldr	r2, [r2, #32]
 800b5e4:	2101      	movs	r1, #1
 800b5e6:	438a      	bics	r2, r1
 800b5e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	613b      	str	r3, [r7, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	22f0      	movs	r2, #240	; 0xf0
 800b5f6:	4393      	bics	r3, r2
 800b5f8:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	011b      	lsls	r3, r3, #4
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	4313      	orrs	r3, r2
 800b604:	613b      	str	r3, [r7, #16]
      htim->Instance->CCMR1 = tmpccmr1;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	621a      	str	r2, [r3, #32]
    break;
 800b616:	e01a      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	6899      	ldr	r1, [r3, #8]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	001a      	movs	r2, r3
 800b626:	f000 f877 	bl	800b718 <TIM_TI1_ConfigInputStage>
    break;
 800b62a:	e010      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6818      	ldr	r0, [r3, #0]
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	6899      	ldr	r1, [r3, #8]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	001a      	movs	r2, r3
 800b63a:	f000 f8e5 	bl	800b808 <TIM_TI2_ConfigInputStage>
    break;
 800b63e:	e006      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 800b640:	46c0      	nop			; (mov r8, r8)
 800b642:	e004      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 800b644:	46c0      	nop			; (mov r8, r8)
 800b646:	e002      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 800b648:	46c0      	nop			; (mov r8, r8)
 800b64a:	e000      	b.n	800b64e <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 800b64c:	46c0      	nop			; (mov r8, r8)
  }
}
 800b64e:	46c0      	nop			; (mov r8, r8)
 800b650:	46bd      	mov	sp, r7
 800b652:	b006      	add	sp, #24
 800b654:	bd80      	pop	{r7, pc}

0800b656 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b086      	sub	sp, #24
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	607a      	str	r2, [r7, #4]
 800b662:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800b668:	2300      	movs	r3, #0
 800b66a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6a1b      	ldr	r3, [r3, #32]
 800b670:	2201      	movs	r2, #1
 800b672:	4393      	bics	r3, r2
 800b674:	001a      	movs	r2, r3
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6a1b      	ldr	r3, [r3, #32]
 800b684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	4a20      	ldr	r2, [pc, #128]	; (800b70c <TIM_TI1_SetConfig+0xb6>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d00c      	beq.n	800b6a8 <TIM_TI1_SetConfig+0x52>
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	2380      	movs	r3, #128	; 0x80
 800b692:	05db      	lsls	r3, r3, #23
 800b694:	429a      	cmp	r2, r3
 800b696:	d007      	beq.n	800b6a8 <TIM_TI1_SetConfig+0x52>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	4a1d      	ldr	r2, [pc, #116]	; (800b710 <TIM_TI1_SetConfig+0xba>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d003      	beq.n	800b6a8 <TIM_TI1_SetConfig+0x52>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	4a1c      	ldr	r2, [pc, #112]	; (800b714 <TIM_TI1_SetConfig+0xbe>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d101      	bne.n	800b6ac <TIM_TI1_SetConfig+0x56>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e000      	b.n	800b6ae <TIM_TI1_SetConfig+0x58>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d008      	beq.n	800b6c4 <TIM_TI1_SetConfig+0x6e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2203      	movs	r2, #3
 800b6b6:	4393      	bics	r3, r2
 800b6b8:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	617b      	str	r3, [r7, #20]
 800b6c2:	e003      	b.n	800b6cc <TIM_TI1_SetConfig+0x76>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	22f0      	movs	r2, #240	; 0xf0
 800b6d0:	4393      	bics	r3, r2
 800b6d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	22ff      	movs	r2, #255	; 0xff
 800b6da:	4013      	ands	r3, r2
 800b6dc:	697a      	ldr	r2, [r7, #20]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	220a      	movs	r2, #10
 800b6e6:	4393      	bics	r3, r2
 800b6e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	220a      	movs	r2, #10
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	621a      	str	r2, [r3, #32]
}
 800b702:	46c0      	nop			; (mov r8, r8)
 800b704:	46bd      	mov	sp, r7
 800b706:	b006      	add	sp, #24
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	46c0      	nop			; (mov r8, r8)
 800b70c:	40012c00 	.word	0x40012c00
 800b710:	40000400 	.word	0x40000400
 800b714:	40014000 	.word	0x40014000

0800b718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b086      	sub	sp, #24
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800b724:	2300      	movs	r3, #0
 800b726:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800b728:	2300      	movs	r3, #0
 800b72a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6a1b      	ldr	r3, [r3, #32]
 800b730:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6a1b      	ldr	r3, [r3, #32]
 800b736:	2201      	movs	r2, #1
 800b738:	4393      	bics	r3, r2
 800b73a:	001a      	movs	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	22f0      	movs	r2, #240	; 0xf0
 800b74a:	4393      	bics	r3, r2
 800b74c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	011b      	lsls	r3, r3, #4
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	4313      	orrs	r3, r2
 800b756:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	220a      	movs	r2, #10
 800b75c:	4393      	bics	r3, r2
 800b75e:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	4313      	orrs	r3, r2
 800b766:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	621a      	str	r2, [r3, #32]
}
 800b774:	46c0      	nop			; (mov r8, r8)
 800b776:	46bd      	mov	sp, r7
 800b778:	b006      	add	sp, #24
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 800b78a:	2300      	movs	r3, #0
 800b78c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	2210      	movs	r2, #16
 800b798:	4393      	bics	r3, r2
 800b79a:	001a      	movs	r2, r3
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	4a14      	ldr	r2, [pc, #80]	; (800b800 <TIM_TI2_SetConfig+0x84>)
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	021b      	lsls	r3, r3, #8
 800b7b8:	697a      	ldr	r2, [r7, #20]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	4a10      	ldr	r2, [pc, #64]	; (800b804 <TIM_TI2_SetConfig+0x88>)
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	031b      	lsls	r3, r3, #12
 800b7ca:	041b      	lsls	r3, r3, #16
 800b7cc:	0c1b      	lsrs	r3, r3, #16
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	22a0      	movs	r2, #160	; 0xa0
 800b7d8:	4393      	bics	r3, r2
 800b7da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	22a0      	movs	r2, #160	; 0xa0
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	621a      	str	r2, [r3, #32]
}
 800b7f6:	46c0      	nop			; (mov r8, r8)
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	b006      	add	sp, #24
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	46c0      	nop			; (mov r8, r8)
 800b800:	fffffcff 	.word	0xfffffcff
 800b804:	ffff0fff 	.word	0xffff0fff

0800b808 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800b818:	2300      	movs	r3, #0
 800b81a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6a1b      	ldr	r3, [r3, #32]
 800b820:	2210      	movs	r2, #16
 800b822:	4393      	bics	r3, r2
 800b824:	001a      	movs	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	4a0d      	ldr	r2, [pc, #52]	; (800b870 <TIM_TI2_ConfigInputStage+0x68>)
 800b83a:	4013      	ands	r3, r2
 800b83c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	031b      	lsls	r3, r3, #12
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	4313      	orrs	r3, r2
 800b846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	22a0      	movs	r2, #160	; 0xa0
 800b84c:	4393      	bics	r3, r2
 800b84e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	011b      	lsls	r3, r3, #4
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	4313      	orrs	r3, r2
 800b858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	693a      	ldr	r2, [r7, #16]
 800b864:	621a      	str	r2, [r3, #32]
}
 800b866:	46c0      	nop			; (mov r8, r8)
 800b868:	46bd      	mov	sp, r7
 800b86a:	b006      	add	sp, #24
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	46c0      	nop			; (mov r8, r8)
 800b870:	ffff0fff 	.word	0xffff0fff

0800b874 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]
 800b880:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800b882:	2300      	movs	r3, #0
 800b884:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	4a19      	ldr	r2, [pc, #100]	; (800b8f4 <TIM_TI3_SetConfig+0x80>)
 800b890:	401a      	ands	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a1b      	ldr	r3, [r3, #32]
 800b8a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2203      	movs	r2, #3
 800b8a6:	4393      	bics	r3, r2
 800b8a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	22f0      	movs	r2, #240	; 0xf0
 800b8b6:	4393      	bics	r3, r2
 800b8b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	22ff      	movs	r2, #255	; 0xff
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	4a0b      	ldr	r2, [pc, #44]	; (800b8f8 <TIM_TI3_SetConfig+0x84>)
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	021a      	lsls	r2, r3, #8
 800b8d4:	23a0      	movs	r3, #160	; 0xa0
 800b8d6:	011b      	lsls	r3, r3, #4
 800b8d8:	4013      	ands	r3, r2
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	621a      	str	r2, [r3, #32]
}
 800b8ec:	46c0      	nop			; (mov r8, r8)
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	b006      	add	sp, #24
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	fffffeff 	.word	0xfffffeff
 800b8f8:	fffff5ff 	.word	0xfffff5ff

0800b8fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800b90e:	2300      	movs	r3, #0
 800b910:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	4a1a      	ldr	r2, [pc, #104]	; (800b980 <TIM_TI4_SetConfig+0x84>)
 800b918:	401a      	ands	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	69db      	ldr	r3, [r3, #28]
 800b922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6a1b      	ldr	r3, [r3, #32]
 800b928:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	4a15      	ldr	r2, [pc, #84]	; (800b984 <TIM_TI4_SetConfig+0x88>)
 800b92e:	4013      	ands	r3, r2
 800b930:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	021b      	lsls	r3, r3, #8
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	4313      	orrs	r3, r2
 800b93a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	4a12      	ldr	r2, [pc, #72]	; (800b988 <TIM_TI4_SetConfig+0x8c>)
 800b940:	4013      	ands	r3, r2
 800b942:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	031b      	lsls	r3, r3, #12
 800b948:	041b      	lsls	r3, r3, #16
 800b94a:	0c1b      	lsrs	r3, r3, #16
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	4313      	orrs	r3, r2
 800b950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	4a0d      	ldr	r2, [pc, #52]	; (800b98c <TIM_TI4_SetConfig+0x90>)
 800b956:	4013      	ands	r3, r2
 800b958:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	031a      	lsls	r2, r3, #12
 800b95e:	23a0      	movs	r3, #160	; 0xa0
 800b960:	021b      	lsls	r3, r3, #8
 800b962:	4013      	ands	r3, r2
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	4313      	orrs	r3, r2
 800b968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	621a      	str	r2, [r3, #32]
}
 800b976:	46c0      	nop			; (mov r8, r8)
 800b978:	46bd      	mov	sp, r7
 800b97a:	b006      	add	sp, #24
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	46c0      	nop			; (mov r8, r8)
 800b980:	ffffefff 	.word	0xffffefff
 800b984:	fffffcff 	.word	0xfffffcff
 800b988:	ffff0fff 	.word	0xffff0fff
 800b98c:	ffff5fff 	.word	0xffff5fff

0800b990 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	000a      	movs	r2, r1
 800b99a:	1cbb      	adds	r3, r7, #2
 800b99c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2270      	movs	r2, #112	; 0x70
 800b9ac:	4393      	bics	r3, r2
 800b9ae:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800b9b0:	1cbb      	adds	r3, r7, #2
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	2207      	movs	r2, #7
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	001a      	movs	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	609a      	str	r2, [r3, #8]
}
 800b9c8:	46c0      	nop			; (mov r8, r8)
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	b004      	add	sp, #16
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
 800b9dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	4a09      	ldr	r2, [pc, #36]	; (800ba10 <TIM_ETR_SetConfig+0x40>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	021a      	lsls	r2, r3, #8
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	431a      	orrs	r2, r3
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	609a      	str	r2, [r3, #8]
}
 800ba08:	46c0      	nop			; (mov r8, r8)
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	b006      	add	sp, #24
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	ffff00ff 	.word	0xffff00ff

0800ba14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800ba24:	2201      	movs	r2, #1
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	409a      	lsls	r2, r3
 800ba2a:	0013      	movs	r3, r2
 800ba2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	43d2      	mvns	r2, r2
 800ba36:	401a      	ands	r2, r3
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6a1a      	ldr	r2, [r3, #32]
 800ba40:	6879      	ldr	r1, [r7, #4]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	4099      	lsls	r1, r3
 800ba46:	000b      	movs	r3, r1
 800ba48:	431a      	orrs	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	621a      	str	r2, [r3, #32]
}
 800ba4e:	46c0      	nop			; (mov r8, r8)
 800ba50:	46bd      	mov	sp, r7
 800ba52:	b006      	add	sp, #24
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	46c0      	nop			; (mov r8, r8)

0800ba58 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef* sConfig)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08a      	sub	sp, #40	; 0x28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if(htim == NULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e095      	b.n	800bb98 <HAL_TIMEx_HallSensor_Init+0x140>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	223d      	movs	r2, #61	; 0x3d
 800ba70:	5c9b      	ldrb	r3, [r3, r2]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d107      	bne.n	800ba88 <HAL_TIMEx_HallSensor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	223c      	movs	r2, #60	; 0x3c
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	0018      	movs	r0, r3
 800ba84:	f000 f8be 	bl	800bc04 <HAL_TIMEx_HallSensor_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	223d      	movs	r2, #61	; 0x3d
 800ba8c:	2102      	movs	r1, #2
 800ba8e:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3304      	adds	r3, #4
 800ba98:	0019      	movs	r1, r3
 800ba9a:	0010      	movs	r0, r2
 800ba9c:	f7ff fabc 	bl	800b018 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6818      	ldr	r0, [r3, #0]
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	6819      	ldr	r1, [r3, #0]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	2203      	movs	r2, #3
 800baae:	f7ff fdd2 	bl	800b656 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	6992      	ldr	r2, [r2, #24]
 800babc:	210c      	movs	r1, #12
 800babe:	438a      	bics	r2, r1
 800bac0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	6812      	ldr	r2, [r2, #0]
 800baca:	6991      	ldr	r1, [r2, #24]
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	6852      	ldr	r2, [r2, #4]
 800bad0:	430a      	orrs	r2, r1
 800bad2:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	6812      	ldr	r2, [r2, #0]
 800badc:	6852      	ldr	r2, [r2, #4]
 800bade:	2180      	movs	r1, #128	; 0x80
 800bae0:	430a      	orrs	r2, r1
 800bae2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	6812      	ldr	r2, [r2, #0]
 800baec:	6892      	ldr	r2, [r2, #8]
 800baee:	2170      	movs	r1, #112	; 0x70
 800baf0:	438a      	bics	r2, r1
 800baf2:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	6812      	ldr	r2, [r2, #0]
 800bafc:	6892      	ldr	r2, [r2, #8]
 800bafe:	2140      	movs	r1, #64	; 0x40
 800bb00:	430a      	orrs	r2, r1
 800bb02:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	6812      	ldr	r2, [r2, #0]
 800bb0c:	6892      	ldr	r2, [r2, #8]
 800bb0e:	2107      	movs	r1, #7
 800bb10:	438a      	bics	r2, r1
 800bb12:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	6812      	ldr	r2, [r2, #0]
 800bb1c:	6892      	ldr	r2, [r2, #8]
 800bb1e:	2104      	movs	r1, #4
 800bb20:	430a      	orrs	r2, r1
 800bb22:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800bb24:	230c      	movs	r3, #12
 800bb26:	18fb      	adds	r3, r7, r3
 800bb28:	2200      	movs	r2, #0
 800bb2a:	611a      	str	r2, [r3, #16]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800bb2c:	230c      	movs	r3, #12
 800bb2e:	18fb      	adds	r3, r7, r3
 800bb30:	2200      	movs	r2, #0
 800bb32:	615a      	str	r2, [r3, #20]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800bb34:	230c      	movs	r3, #12
 800bb36:	18fb      	adds	r3, r7, r3
 800bb38:	2270      	movs	r2, #112	; 0x70
 800bb3a:	601a      	str	r2, [r3, #0]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800bb3c:	230c      	movs	r3, #12
 800bb3e:	18fb      	adds	r3, r7, r3
 800bb40:	2200      	movs	r2, #0
 800bb42:	619a      	str	r2, [r3, #24]
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800bb44:	230c      	movs	r3, #12
 800bb46:	18fb      	adds	r3, r7, r3
 800bb48:	2200      	movs	r2, #0
 800bb4a:	60da      	str	r2, [r3, #12]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bb4c:	230c      	movs	r3, #12
 800bb4e:	18fb      	adds	r3, r7, r3
 800bb50:	2200      	movs	r2, #0
 800bb52:	609a      	str	r2, [r3, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	68da      	ldr	r2, [r3, #12]
 800bb58:	230c      	movs	r3, #12
 800bb5a:	18fb      	adds	r3, r7, r3
 800bb5c:	605a      	str	r2, [r3, #4]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	220c      	movs	r2, #12
 800bb64:	18ba      	adds	r2, r7, r2
 800bb66:	0011      	movs	r1, r2
 800bb68:	0018      	movs	r0, r3
 800bb6a:	f7ff fb65 	bl	800b238 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	6812      	ldr	r2, [r2, #0]
 800bb76:	6852      	ldr	r2, [r2, #4]
 800bb78:	2170      	movs	r1, #112	; 0x70
 800bb7a:	438a      	bics	r2, r1
 800bb7c:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	6812      	ldr	r2, [r2, #0]
 800bb86:	6852      	ldr	r2, [r2, #4]
 800bb88:	2150      	movs	r1, #80	; 0x50
 800bb8a:	430a      	orrs	r2, r1
 800bb8c:	605a      	str	r2, [r3, #4]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	223d      	movs	r2, #61	; 0x3d
 800bb92:	2101      	movs	r1, #1
 800bb94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	0018      	movs	r0, r3
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	b00a      	add	sp, #40	; 0x28
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface 
  * @param  htim TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	223d      	movs	r2, #61	; 0x3d
 800bbac:	2102      	movs	r1, #2
 800bbae:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	4a11      	ldr	r2, [pc, #68]	; (800bbfc <HAL_TIMEx_HallSensor_DeInit+0x5c>)
 800bbb8:	4013      	ands	r3, r2
 800bbba:	d10d      	bne.n	800bbd8 <HAL_TIMEx_HallSensor_DeInit+0x38>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	4a0f      	ldr	r2, [pc, #60]	; (800bc00 <HAL_TIMEx_HallSensor_DeInit+0x60>)
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	d107      	bne.n	800bbd8 <HAL_TIMEx_HallSensor_DeInit+0x38>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	6812      	ldr	r2, [r2, #0]
 800bbd0:	6812      	ldr	r2, [r2, #0]
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	438a      	bics	r2, r1
 800bbd6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	0018      	movs	r0, r3
 800bbdc:	f000 f81a 	bl	800bc14 <HAL_TIMEx_HallSensor_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	223d      	movs	r2, #61	; 0x3d
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	223c      	movs	r2, #60	; 0x3c
 800bbec:	2100      	movs	r1, #0
 800bbee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	b002      	add	sp, #8
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	46c0      	nop			; (mov r8, r8)
 800bbfc:	00001111 	.word	0x00001111
 800bc00:	00000444 	.word	0x00000444

0800bc04 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800bc0c:	46c0      	nop			; (mov r8, r8)
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	b002      	add	sp, #8
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 800bc1c:	46c0      	nop			; (mov r8, r8)
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	b002      	add	sp, #8
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2201      	movs	r2, #1
 800bc32:	2100      	movs	r1, #0
 800bc34:	0018      	movs	r0, r3
 800bc36:	f7ff feed 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	6812      	ldr	r2, [r2, #0]
 800bc42:	6812      	ldr	r2, [r2, #0]
 800bc44:	2101      	movs	r1, #1
 800bc46:	430a      	orrs	r2, r1
 800bc48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	0018      	movs	r0, r3
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	b002      	add	sp, #8
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2200      	movs	r2, #0
 800bc62:	2100      	movs	r1, #0
 800bc64:	0018      	movs	r0, r3
 800bc66:	f7ff fed5 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <HAL_TIMEx_HallSensor_Stop+0x48>)
 800bc72:	4013      	ands	r3, r2
 800bc74:	d10d      	bne.n	800bc92 <HAL_TIMEx_HallSensor_Stop+0x3e>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	4a08      	ldr	r2, [pc, #32]	; (800bca0 <HAL_TIMEx_HallSensor_Stop+0x4c>)
 800bc7e:	4013      	ands	r3, r2
 800bc80:	d107      	bne.n	800bc92 <HAL_TIMEx_HallSensor_Stop+0x3e>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	6812      	ldr	r2, [r2, #0]
 800bc8a:	6812      	ldr	r2, [r2, #0]
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	438a      	bics	r2, r1
 800bc90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	0018      	movs	r0, r3
 800bc96:	46bd      	mov	sp, r7
 800bc98:	b002      	add	sp, #8
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	00001111 	.word	0x00001111
 800bca0:	00000444 	.word	0x00000444

0800bca4 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	6812      	ldr	r2, [r2, #0]
 800bcb4:	68d2      	ldr	r2, [r2, #12]
 800bcb6:	2102      	movs	r1, #2
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	f7ff fea5 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	6812      	ldr	r2, [r2, #0]
 800bcd2:	6812      	ldr	r2, [r2, #0]
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	0018      	movs	r0, r3
 800bcde:	46bd      	mov	sp, r7
 800bce0:	b002      	add	sp, #8
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	0018      	movs	r0, r3
 800bcf6:	f7ff fe8d 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	6812      	ldr	r2, [r2, #0]
 800bd02:	68d2      	ldr	r2, [r2, #12]
 800bd04:	2102      	movs	r1, #2
 800bd06:	438a      	bics	r2, r1
 800bd08:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	4a0a      	ldr	r2, [pc, #40]	; (800bd3c <HAL_TIMEx_HallSensor_Stop_IT+0x58>)
 800bd12:	4013      	ands	r3, r2
 800bd14:	d10d      	bne.n	800bd32 <HAL_TIMEx_HallSensor_Stop_IT+0x4e>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6a1b      	ldr	r3, [r3, #32]
 800bd1c:	4a08      	ldr	r2, [pc, #32]	; (800bd40 <HAL_TIMEx_HallSensor_Stop_IT+0x5c>)
 800bd1e:	4013      	ands	r3, r2
 800bd20:	d107      	bne.n	800bd32 <HAL_TIMEx_HallSensor_Stop_IT+0x4e>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	6812      	ldr	r2, [r2, #0]
 800bd2a:	6812      	ldr	r2, [r2, #0]
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	438a      	bics	r2, r1
 800bd30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	0018      	movs	r0, r3
 800bd36:	46bd      	mov	sp, r7
 800bd38:	b002      	add	sp, #8
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	00001111 	.word	0x00001111
 800bd40:	00000444 	.word	0x00000444

0800bd44 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	1dbb      	adds	r3, r7, #6
 800bd50:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));

   if((htim->State == HAL_TIM_STATE_BUSY))
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	223d      	movs	r2, #61	; 0x3d
 800bd56:	5c9b      	ldrb	r3, [r3, r2]
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d101      	bne.n	800bd62 <HAL_TIMEx_HallSensor_Start_DMA+0x1e>
  {
     return HAL_BUSY;
 800bd5e:	2302      	movs	r3, #2
 800bd60:	e03e      	b.n	800bde0 <HAL_TIMEx_HallSensor_Start_DMA+0x9c>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	223d      	movs	r2, #61	; 0x3d
 800bd66:	5c9b      	ldrb	r3, [r3, r2]
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d10c      	bne.n	800bd88 <HAL_TIMEx_HallSensor_Start_DMA+0x44>
  {
    if(((uint32_t)pData == 0U ) && (Length > 0U))
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d105      	bne.n	800bd80 <HAL_TIMEx_HallSensor_Start_DMA+0x3c>
 800bd74:	1dbb      	adds	r3, r7, #6
 800bd76:	881b      	ldrh	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <HAL_TIMEx_HallSensor_Start_DMA+0x3c>
    {
      return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e02f      	b.n	800bde0 <HAL_TIMEx_HallSensor_Start_DMA+0x9c>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	223d      	movs	r2, #61	; 0x3d
 800bd84:	2102      	movs	r1, #2
 800bd86:	5499      	strb	r1, [r3, r2]
    }
  }
  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	2100      	movs	r1, #0
 800bd90:	0018      	movs	r0, r3
 800bd92:	f7ff fe3f 	bl	800ba14 <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd9a:	4a13      	ldr	r2, [pc, #76]	; (800bde8 <HAL_TIMEx_HallSensor_Start_DMA+0xa4>)
 800bd9c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda2:	4a12      	ldr	r2, [pc, #72]	; (800bdec <HAL_TIMEx_HallSensor_Start_DMA+0xa8>)
 800bda4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel for Capture 1*/
  HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3334      	adds	r3, #52	; 0x34
 800bdb0:	0019      	movs	r1, r3
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	1dbb      	adds	r3, r7, #6
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	f7f4 fda6 	bl	8000908 <HAL_DMA_Start_IT>

  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	6812      	ldr	r2, [r2, #0]
 800bdc4:	68d2      	ldr	r2, [r2, #12]
 800bdc6:	2180      	movs	r1, #128	; 0x80
 800bdc8:	0089      	lsls	r1, r1, #2
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	6812      	ldr	r2, [r2, #0]
 800bdd6:	6812      	ldr	r2, [r2, #0]
 800bdd8:	2101      	movs	r1, #1
 800bdda:	430a      	orrs	r2, r1
 800bddc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	0018      	movs	r0, r3
 800bde2:	46bd      	mov	sp, r7
 800bde4:	b004      	add	sp, #16
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	0800af5b 	.word	0x0800af5b
 800bdec:	0800aec3 	.word	0x0800aec3

0800bdf0 <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	2100      	movs	r1, #0
 800be00:	0018      	movs	r0, r3
 800be02:	f7ff fe07 	bl	800ba14 <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	6812      	ldr	r2, [r2, #0]
 800be0e:	68d2      	ldr	r2, [r2, #12]
 800be10:	490d      	ldr	r1, [pc, #52]	; (800be48 <HAL_TIMEx_HallSensor_Stop_DMA+0x58>)
 800be12:	400a      	ands	r2, r1
 800be14:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	6a1b      	ldr	r3, [r3, #32]
 800be1c:	4a0b      	ldr	r2, [pc, #44]	; (800be4c <HAL_TIMEx_HallSensor_Stop_DMA+0x5c>)
 800be1e:	4013      	ands	r3, r2
 800be20:	d10d      	bne.n	800be3e <HAL_TIMEx_HallSensor_Stop_DMA+0x4e>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	4a09      	ldr	r2, [pc, #36]	; (800be50 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>)
 800be2a:	4013      	ands	r3, r2
 800be2c:	d107      	bne.n	800be3e <HAL_TIMEx_HallSensor_Stop_DMA+0x4e>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	6812      	ldr	r2, [r2, #0]
 800be36:	6812      	ldr	r2, [r2, #0]
 800be38:	2101      	movs	r1, #1
 800be3a:	438a      	bics	r2, r1
 800be3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800be3e:	2300      	movs	r3, #0
}
 800be40:	0018      	movs	r0, r3
 800be42:	46bd      	mov	sp, r7
 800be44:	b002      	add	sp, #8
 800be46:	bd80      	pop	{r7, pc}
 800be48:	fffffdff 	.word	0xfffffdff
 800be4c:	00001111 	.word	0x00001111
 800be50:	00000444 	.word	0x00000444

0800be54 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

     /* Enable the Capture compare channel N */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	2204      	movs	r2, #4
 800be66:	0018      	movs	r0, r3
 800be68:	f001 f895 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
    __HAL_TIM_MOE_ENABLE(htim);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	6812      	ldr	r2, [r2, #0]
 800be74:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800be76:	2180      	movs	r1, #128	; 0x80
 800be78:	0209      	lsls	r1, r1, #8
 800be7a:	430a      	orrs	r2, r1
 800be7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	6812      	ldr	r2, [r2, #0]
 800be88:	2101      	movs	r1, #1
 800be8a:	430a      	orrs	r2, r1
 800be8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	0018      	movs	r0, r3
 800be92:	46bd      	mov	sp, r7
 800be94:	b002      	add	sp, #8
 800be96:	bd80      	pop	{r7, pc}

0800be98 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

    /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	2200      	movs	r2, #0
 800beaa:	0018      	movs	r0, r3
 800beac:	f001 f873 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	4a15      	ldr	r2, [pc, #84]	; (800bf0c <HAL_TIMEx_OCN_Stop+0x74>)
 800beb8:	4013      	ands	r3, r2
 800beba:	d10d      	bne.n	800bed8 <HAL_TIMEx_OCN_Stop+0x40>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	6a1b      	ldr	r3, [r3, #32]
 800bec2:	4a13      	ldr	r2, [pc, #76]	; (800bf10 <HAL_TIMEx_OCN_Stop+0x78>)
 800bec4:	4013      	ands	r3, r2
 800bec6:	d107      	bne.n	800bed8 <HAL_TIMEx_OCN_Stop+0x40>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	6812      	ldr	r2, [r2, #0]
 800bed0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bed2:	4910      	ldr	r1, [pc, #64]	; (800bf14 <HAL_TIMEx_OCN_Stop+0x7c>)
 800bed4:	400a      	ands	r2, r1
 800bed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	4a0b      	ldr	r2, [pc, #44]	; (800bf0c <HAL_TIMEx_OCN_Stop+0x74>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	d10d      	bne.n	800bf00 <HAL_TIMEx_OCN_Stop+0x68>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6a1b      	ldr	r3, [r3, #32]
 800beea:	4a09      	ldr	r2, [pc, #36]	; (800bf10 <HAL_TIMEx_OCN_Stop+0x78>)
 800beec:	4013      	ands	r3, r2
 800beee:	d107      	bne.n	800bf00 <HAL_TIMEx_OCN_Stop+0x68>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	6812      	ldr	r2, [r2, #0]
 800bef8:	6812      	ldr	r2, [r2, #0]
 800befa:	2101      	movs	r1, #1
 800befc:	438a      	bics	r2, r1
 800befe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	0018      	movs	r0, r3
 800bf04:	46bd      	mov	sp, r7
 800bf06:	b002      	add	sp, #8
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	00001111 	.word	0x00001111
 800bf10:	00000444 	.word	0x00000444
 800bf14:	ffff7fff 	.word	0xffff7fff

0800bf18 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b04      	cmp	r3, #4
 800bf26:	d011      	beq.n	800bf4c <HAL_TIMEx_OCN_Start_IT+0x34>
 800bf28:	d802      	bhi.n	800bf30 <HAL_TIMEx_OCN_Start_IT+0x18>
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d005      	beq.n	800bf3a <HAL_TIMEx_OCN_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 800bf2e:	e028      	b.n	800bf82 <HAL_TIMEx_OCN_Start_IT+0x6a>
  switch (Channel)
 800bf30:	2b08      	cmp	r3, #8
 800bf32:	d014      	beq.n	800bf5e <HAL_TIMEx_OCN_Start_IT+0x46>
 800bf34:	2b0c      	cmp	r3, #12
 800bf36:	d01b      	beq.n	800bf70 <HAL_TIMEx_OCN_Start_IT+0x58>
    break;
 800bf38:	e023      	b.n	800bf82 <HAL_TIMEx_OCN_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	6812      	ldr	r2, [r2, #0]
 800bf42:	68d2      	ldr	r2, [r2, #12]
 800bf44:	2102      	movs	r1, #2
 800bf46:	430a      	orrs	r2, r1
 800bf48:	60da      	str	r2, [r3, #12]
    break;
 800bf4a:	e01a      	b.n	800bf82 <HAL_TIMEx_OCN_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	6812      	ldr	r2, [r2, #0]
 800bf54:	68d2      	ldr	r2, [r2, #12]
 800bf56:	2104      	movs	r1, #4
 800bf58:	430a      	orrs	r2, r1
 800bf5a:	60da      	str	r2, [r3, #12]
    break;
 800bf5c:	e011      	b.n	800bf82 <HAL_TIMEx_OCN_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	6812      	ldr	r2, [r2, #0]
 800bf66:	68d2      	ldr	r2, [r2, #12]
 800bf68:	2108      	movs	r1, #8
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	60da      	str	r2, [r3, #12]
    break;
 800bf6e:	e008      	b.n	800bf82 <HAL_TIMEx_OCN_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	6812      	ldr	r2, [r2, #0]
 800bf78:	68d2      	ldr	r2, [r2, #12]
 800bf7a:	2110      	movs	r1, #16
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	60da      	str	r2, [r3, #12]
    break;
 800bf80:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	6812      	ldr	r2, [r2, #0]
 800bf8a:	68d2      	ldr	r2, [r2, #12]
 800bf8c:	2180      	movs	r1, #128	; 0x80
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	60da      	str	r2, [r3, #12]

     /* Enable the Capture compare channel N */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	2204      	movs	r2, #4
 800bf9a:	0018      	movs	r0, r3
 800bf9c:	f000 fffb 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
    __HAL_TIM_MOE_ENABLE(htim);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	6812      	ldr	r2, [r2, #0]
 800bfa8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800bfaa:	2180      	movs	r1, #128	; 0x80
 800bfac:	0209      	lsls	r1, r1, #8
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	6812      	ldr	r2, [r2, #0]
 800bfba:	6812      	ldr	r2, [r2, #0]
 800bfbc:	2101      	movs	r1, #1
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	0018      	movs	r0, r3
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	b002      	add	sp, #8
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer = 0U;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b04      	cmp	r3, #4
 800bfde:	d011      	beq.n	800c004 <HAL_TIMEx_OCN_Stop_IT+0x38>
 800bfe0:	d802      	bhi.n	800bfe8 <HAL_TIMEx_OCN_Stop_IT+0x1c>
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d005      	beq.n	800bff2 <HAL_TIMEx_OCN_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 800bfe6:	e028      	b.n	800c03a <HAL_TIMEx_OCN_Stop_IT+0x6e>
  switch (Channel)
 800bfe8:	2b08      	cmp	r3, #8
 800bfea:	d014      	beq.n	800c016 <HAL_TIMEx_OCN_Stop_IT+0x4a>
 800bfec:	2b0c      	cmp	r3, #12
 800bfee:	d01b      	beq.n	800c028 <HAL_TIMEx_OCN_Stop_IT+0x5c>
    break;
 800bff0:	e023      	b.n	800c03a <HAL_TIMEx_OCN_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	6812      	ldr	r2, [r2, #0]
 800bffa:	68d2      	ldr	r2, [r2, #12]
 800bffc:	2102      	movs	r1, #2
 800bffe:	438a      	bics	r2, r1
 800c000:	60da      	str	r2, [r3, #12]
    break;
 800c002:	e01a      	b.n	800c03a <HAL_TIMEx_OCN_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	6812      	ldr	r2, [r2, #0]
 800c00c:	68d2      	ldr	r2, [r2, #12]
 800c00e:	2104      	movs	r1, #4
 800c010:	438a      	bics	r2, r1
 800c012:	60da      	str	r2, [r3, #12]
    break;
 800c014:	e011      	b.n	800c03a <HAL_TIMEx_OCN_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	6812      	ldr	r2, [r2, #0]
 800c01e:	68d2      	ldr	r2, [r2, #12]
 800c020:	2108      	movs	r1, #8
 800c022:	438a      	bics	r2, r1
 800c024:	60da      	str	r2, [r3, #12]
    break;
 800c026:	e008      	b.n	800c03a <HAL_TIMEx_OCN_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	6812      	ldr	r2, [r2, #0]
 800c030:	68d2      	ldr	r2, [r2, #12]
 800c032:	2110      	movs	r1, #16
 800c034:	438a      	bics	r2, r1
 800c036:	60da      	str	r2, [r3, #12]
    break;
 800c038:	46c0      	nop			; (mov r8, r8)
  }

     /* Disable the Capture compare channel N */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	2200      	movs	r2, #0
 800c042:	0018      	movs	r0, r3
 800c044:	f000 ffa7 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4a1c      	ldr	r2, [pc, #112]	; (800c0c4 <HAL_TIMEx_OCN_Stop_IT+0xf8>)
 800c054:	4013      	ands	r3, r2
 800c056:	d107      	bne.n	800c068 <HAL_TIMEx_OCN_Stop_IT+0x9c>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	6812      	ldr	r2, [r2, #0]
 800c060:	68d2      	ldr	r2, [r2, #12]
 800c062:	2180      	movs	r1, #128	; 0x80
 800c064:	438a      	bics	r2, r1
 800c066:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	4a16      	ldr	r2, [pc, #88]	; (800c0c8 <HAL_TIMEx_OCN_Stop_IT+0xfc>)
 800c070:	4013      	ands	r3, r2
 800c072:	d10d      	bne.n	800c090 <HAL_TIMEx_OCN_Stop_IT+0xc4>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	4a12      	ldr	r2, [pc, #72]	; (800c0c4 <HAL_TIMEx_OCN_Stop_IT+0xf8>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	d107      	bne.n	800c090 <HAL_TIMEx_OCN_Stop_IT+0xc4>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	6812      	ldr	r2, [r2, #0]
 800c088:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c08a:	4910      	ldr	r1, [pc, #64]	; (800c0cc <HAL_TIMEx_OCN_Stop_IT+0x100>)
 800c08c:	400a      	ands	r2, r1
 800c08e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	4a0c      	ldr	r2, [pc, #48]	; (800c0c8 <HAL_TIMEx_OCN_Stop_IT+0xfc>)
 800c098:	4013      	ands	r3, r2
 800c09a:	d10d      	bne.n	800c0b8 <HAL_TIMEx_OCN_Stop_IT+0xec>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	4a08      	ldr	r2, [pc, #32]	; (800c0c4 <HAL_TIMEx_OCN_Stop_IT+0xf8>)
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	d107      	bne.n	800c0b8 <HAL_TIMEx_OCN_Stop_IT+0xec>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	6812      	ldr	r2, [r2, #0]
 800c0b0:	6812      	ldr	r2, [r2, #0]
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	438a      	bics	r2, r1
 800c0b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	b004      	add	sp, #16
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	46c0      	nop			; (mov r8, r8)
 800c0c4:	00000444 	.word	0x00000444
 800c0c8:	00001111 	.word	0x00001111
 800c0cc:	ffff7fff 	.word	0xffff7fff

0800c0d0 <HAL_TIMEx_OCN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
 800c0dc:	001a      	movs	r2, r3
 800c0de:	1cbb      	adds	r3, r7, #2
 800c0e0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	223d      	movs	r2, #61	; 0x3d
 800c0e6:	5c9b      	ldrb	r3, [r3, r2]
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d101      	bne.n	800c0f2 <HAL_TIMEx_OCN_Start_DMA+0x22>
  {
     return HAL_BUSY;
 800c0ee:	2302      	movs	r3, #2
 800c0f0:	e0ab      	b.n	800c24a <HAL_TIMEx_OCN_Start_DMA+0x17a>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	223d      	movs	r2, #61	; 0x3d
 800c0f6:	5c9b      	ldrb	r3, [r3, r2]
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d10c      	bne.n	800c118 <HAL_TIMEx_OCN_Start_DMA+0x48>
  {
    if(((uint32_t)pData == 0U ) && (Length > 0U))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d105      	bne.n	800c110 <HAL_TIMEx_OCN_Start_DMA+0x40>
 800c104:	1cbb      	adds	r3, r7, #2
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <HAL_TIMEx_OCN_Start_DMA+0x40>
    {
      return HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	e09c      	b.n	800c24a <HAL_TIMEx_OCN_Start_DMA+0x17a>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	223d      	movs	r2, #61	; 0x3d
 800c114:	2102      	movs	r1, #2
 800c116:	5499      	strb	r1, [r3, r2]
    }
  }
  switch (Channel)
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2b04      	cmp	r3, #4
 800c11c:	d025      	beq.n	800c16a <HAL_TIMEx_OCN_Start_DMA+0x9a>
 800c11e:	d802      	bhi.n	800c126 <HAL_TIMEx_OCN_Start_DMA+0x56>
 800c120:	2b00      	cmp	r3, #0
 800c122:	d005      	beq.n	800c130 <HAL_TIMEx_OCN_Start_DMA+0x60>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 800c124:	e078      	b.n	800c218 <HAL_TIMEx_OCN_Start_DMA+0x148>
  switch (Channel)
 800c126:	2b08      	cmp	r3, #8
 800c128:	d03c      	beq.n	800c1a4 <HAL_TIMEx_OCN_Start_DMA+0xd4>
 800c12a:	2b0c      	cmp	r3, #12
 800c12c:	d057      	beq.n	800c1de <HAL_TIMEx_OCN_Start_DMA+0x10e>
    break;
 800c12e:	e073      	b.n	800c218 <HAL_TIMEx_OCN_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c134:	4a47      	ldr	r2, [pc, #284]	; (800c254 <HAL_TIMEx_OCN_Start_DMA+0x184>)
 800c136:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13c:	4a46      	ldr	r2, [pc, #280]	; (800c258 <HAL_TIMEx_OCN_Start_DMA+0x188>)
 800c13e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	3334      	adds	r3, #52	; 0x34
 800c14c:	001a      	movs	r2, r3
 800c14e:	1cbb      	adds	r3, r7, #2
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	f7f4 fbd9 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	6812      	ldr	r2, [r2, #0]
 800c15e:	68d2      	ldr	r2, [r2, #12]
 800c160:	2180      	movs	r1, #128	; 0x80
 800c162:	0089      	lsls	r1, r1, #2
 800c164:	430a      	orrs	r2, r1
 800c166:	60da      	str	r2, [r3, #12]
    break;
 800c168:	e056      	b.n	800c218 <HAL_TIMEx_OCN_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	4a39      	ldr	r2, [pc, #228]	; (800c254 <HAL_TIMEx_OCN_Start_DMA+0x184>)
 800c170:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c176:	4a38      	ldr	r2, [pc, #224]	; (800c258 <HAL_TIMEx_OCN_Start_DMA+0x188>)
 800c178:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c17e:	6879      	ldr	r1, [r7, #4]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3338      	adds	r3, #56	; 0x38
 800c186:	001a      	movs	r2, r3
 800c188:	1cbb      	adds	r3, r7, #2
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	f7f4 fbbc 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	6812      	ldr	r2, [r2, #0]
 800c198:	68d2      	ldr	r2, [r2, #12]
 800c19a:	2180      	movs	r1, #128	; 0x80
 800c19c:	00c9      	lsls	r1, r1, #3
 800c19e:	430a      	orrs	r2, r1
 800c1a0:	60da      	str	r2, [r3, #12]
    break;
 800c1a2:	e039      	b.n	800c218 <HAL_TIMEx_OCN_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a8:	4a2a      	ldr	r2, [pc, #168]	; (800c254 <HAL_TIMEx_OCN_Start_DMA+0x184>)
 800c1aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	4a29      	ldr	r2, [pc, #164]	; (800c258 <HAL_TIMEx_OCN_Start_DMA+0x188>)
 800c1b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	333c      	adds	r3, #60	; 0x3c
 800c1c0:	001a      	movs	r2, r3
 800c1c2:	1cbb      	adds	r3, r7, #2
 800c1c4:	881b      	ldrh	r3, [r3, #0]
 800c1c6:	f7f4 fb9f 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	6812      	ldr	r2, [r2, #0]
 800c1d2:	68d2      	ldr	r2, [r2, #12]
 800c1d4:	2180      	movs	r1, #128	; 0x80
 800c1d6:	0109      	lsls	r1, r1, #4
 800c1d8:	430a      	orrs	r2, r1
 800c1da:	60da      	str	r2, [r3, #12]
    break;
 800c1dc:	e01c      	b.n	800c218 <HAL_TIMEx_OCN_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e2:	4a1c      	ldr	r2, [pc, #112]	; (800c254 <HAL_TIMEx_OCN_Start_DMA+0x184>)
 800c1e4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ea:	4a1b      	ldr	r2, [pc, #108]	; (800c258 <HAL_TIMEx_OCN_Start_DMA+0x188>)
 800c1ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3340      	adds	r3, #64	; 0x40
 800c1fa:	001a      	movs	r2, r3
 800c1fc:	1cbb      	adds	r3, r7, #2
 800c1fe:	881b      	ldrh	r3, [r3, #0]
 800c200:	f7f4 fb82 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	6812      	ldr	r2, [r2, #0]
 800c20c:	68d2      	ldr	r2, [r2, #12]
 800c20e:	2180      	movs	r1, #128	; 0x80
 800c210:	0149      	lsls	r1, r1, #5
 800c212:	430a      	orrs	r2, r1
 800c214:	60da      	str	r2, [r3, #12]
    break;
 800c216:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	68b9      	ldr	r1, [r7, #8]
 800c21e:	2204      	movs	r2, #4
 800c220:	0018      	movs	r0, r3
 800c222:	f000 feb8 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	6812      	ldr	r2, [r2, #0]
 800c22e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c230:	2180      	movs	r1, #128	; 0x80
 800c232:	0209      	lsls	r1, r1, #8
 800c234:	430a      	orrs	r2, r1
 800c236:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	6812      	ldr	r2, [r2, #0]
 800c240:	6812      	ldr	r2, [r2, #0]
 800c242:	2101      	movs	r1, #1
 800c244:	430a      	orrs	r2, r1
 800c246:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	0018      	movs	r0, r3
 800c24c:	46bd      	mov	sp, r7
 800c24e:	b004      	add	sp, #16
 800c250:	bd80      	pop	{r7, pc}
 800c252:	46c0      	nop			; (mov r8, r8)
 800c254:	0800aee9 	.word	0x0800aee9
 800c258:	0800aec3 	.word	0x0800aec3

0800c25c <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b04      	cmp	r3, #4
 800c26a:	d011      	beq.n	800c290 <HAL_TIMEx_OCN_Stop_DMA+0x34>
 800c26c:	d802      	bhi.n	800c274 <HAL_TIMEx_OCN_Stop_DMA+0x18>
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d005      	beq.n	800c27e <HAL_TIMEx_OCN_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 800c272:	e028      	b.n	800c2c6 <HAL_TIMEx_OCN_Stop_DMA+0x6a>
  switch (Channel)
 800c274:	2b08      	cmp	r3, #8
 800c276:	d014      	beq.n	800c2a2 <HAL_TIMEx_OCN_Stop_DMA+0x46>
 800c278:	2b0c      	cmp	r3, #12
 800c27a:	d01b      	beq.n	800c2b4 <HAL_TIMEx_OCN_Stop_DMA+0x58>
    break;
 800c27c:	e023      	b.n	800c2c6 <HAL_TIMEx_OCN_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	6812      	ldr	r2, [r2, #0]
 800c286:	68d2      	ldr	r2, [r2, #12]
 800c288:	492b      	ldr	r1, [pc, #172]	; (800c338 <HAL_TIMEx_OCN_Stop_DMA+0xdc>)
 800c28a:	400a      	ands	r2, r1
 800c28c:	60da      	str	r2, [r3, #12]
    break;
 800c28e:	e01a      	b.n	800c2c6 <HAL_TIMEx_OCN_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	6812      	ldr	r2, [r2, #0]
 800c298:	68d2      	ldr	r2, [r2, #12]
 800c29a:	4928      	ldr	r1, [pc, #160]	; (800c33c <HAL_TIMEx_OCN_Stop_DMA+0xe0>)
 800c29c:	400a      	ands	r2, r1
 800c29e:	60da      	str	r2, [r3, #12]
    break;
 800c2a0:	e011      	b.n	800c2c6 <HAL_TIMEx_OCN_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	6812      	ldr	r2, [r2, #0]
 800c2aa:	68d2      	ldr	r2, [r2, #12]
 800c2ac:	4924      	ldr	r1, [pc, #144]	; (800c340 <HAL_TIMEx_OCN_Stop_DMA+0xe4>)
 800c2ae:	400a      	ands	r2, r1
 800c2b0:	60da      	str	r2, [r3, #12]
    break;
 800c2b2:	e008      	b.n	800c2c6 <HAL_TIMEx_OCN_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	6812      	ldr	r2, [r2, #0]
 800c2bc:	68d2      	ldr	r2, [r2, #12]
 800c2be:	4921      	ldr	r1, [pc, #132]	; (800c344 <HAL_TIMEx_OCN_Stop_DMA+0xe8>)
 800c2c0:	400a      	ands	r2, r1
 800c2c2:	60da      	str	r2, [r3, #12]
    break;
 800c2c4:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	6839      	ldr	r1, [r7, #0]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	0018      	movs	r0, r3
 800c2d0:	f000 fe61 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	4a1b      	ldr	r2, [pc, #108]	; (800c348 <HAL_TIMEx_OCN_Stop_DMA+0xec>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	d10d      	bne.n	800c2fc <HAL_TIMEx_OCN_Stop_DMA+0xa0>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6a1b      	ldr	r3, [r3, #32]
 800c2e6:	4a19      	ldr	r2, [pc, #100]	; (800c34c <HAL_TIMEx_OCN_Stop_DMA+0xf0>)
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	d107      	bne.n	800c2fc <HAL_TIMEx_OCN_Stop_DMA+0xa0>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	6812      	ldr	r2, [r2, #0]
 800c2f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c2f6:	4916      	ldr	r1, [pc, #88]	; (800c350 <HAL_TIMEx_OCN_Stop_DMA+0xf4>)
 800c2f8:	400a      	ands	r2, r1
 800c2fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	4a11      	ldr	r2, [pc, #68]	; (800c348 <HAL_TIMEx_OCN_Stop_DMA+0xec>)
 800c304:	4013      	ands	r3, r2
 800c306:	d10d      	bne.n	800c324 <HAL_TIMEx_OCN_Stop_DMA+0xc8>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	4a0f      	ldr	r2, [pc, #60]	; (800c34c <HAL_TIMEx_OCN_Stop_DMA+0xf0>)
 800c310:	4013      	ands	r3, r2
 800c312:	d107      	bne.n	800c324 <HAL_TIMEx_OCN_Stop_DMA+0xc8>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	6812      	ldr	r2, [r2, #0]
 800c31c:	6812      	ldr	r2, [r2, #0]
 800c31e:	2101      	movs	r1, #1
 800c320:	438a      	bics	r2, r1
 800c322:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	223d      	movs	r2, #61	; 0x3d
 800c328:	2101      	movs	r1, #1
 800c32a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	0018      	movs	r0, r3
 800c330:	46bd      	mov	sp, r7
 800c332:	b002      	add	sp, #8
 800c334:	bd80      	pop	{r7, pc}
 800c336:	46c0      	nop			; (mov r8, r8)
 800c338:	fffffdff 	.word	0xfffffdff
 800c33c:	fffffbff 	.word	0xfffffbff
 800c340:	fffff7ff 	.word	0xfffff7ff
 800c344:	ffffefff 	.word	0xffffefff
 800c348:	00001111 	.word	0x00001111
 800c34c:	00000444 	.word	0x00000444
 800c350:	ffff7fff 	.word	0xffff7fff

0800c354 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	2204      	movs	r2, #4
 800c366:	0018      	movs	r0, r3
 800c368:	f000 fe15 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	6812      	ldr	r2, [r2, #0]
 800c374:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c376:	2180      	movs	r1, #128	; 0x80
 800c378:	0209      	lsls	r1, r1, #8
 800c37a:	430a      	orrs	r2, r1
 800c37c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	6812      	ldr	r2, [r2, #0]
 800c386:	6812      	ldr	r2, [r2, #0]
 800c388:	2101      	movs	r1, #1
 800c38a:	430a      	orrs	r2, r1
 800c38c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	0018      	movs	r0, r3
 800c392:	46bd      	mov	sp, r7
 800c394:	b002      	add	sp, #8
 800c396:	bd80      	pop	{r7, pc}

0800c398 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	f000 fdf3 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	6a1b      	ldr	r3, [r3, #32]
 800c3b6:	4a15      	ldr	r2, [pc, #84]	; (800c40c <HAL_TIMEx_PWMN_Stop+0x74>)
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	d10d      	bne.n	800c3d8 <HAL_TIMEx_PWMN_Stop+0x40>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
 800c3c2:	4a13      	ldr	r2, [pc, #76]	; (800c410 <HAL_TIMEx_PWMN_Stop+0x78>)
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	d107      	bne.n	800c3d8 <HAL_TIMEx_PWMN_Stop+0x40>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	6812      	ldr	r2, [r2, #0]
 800c3d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c3d2:	4910      	ldr	r1, [pc, #64]	; (800c414 <HAL_TIMEx_PWMN_Stop+0x7c>)
 800c3d4:	400a      	ands	r2, r1
 800c3d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	4a0b      	ldr	r2, [pc, #44]	; (800c40c <HAL_TIMEx_PWMN_Stop+0x74>)
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	d10d      	bne.n	800c400 <HAL_TIMEx_PWMN_Stop+0x68>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	4a09      	ldr	r2, [pc, #36]	; (800c410 <HAL_TIMEx_PWMN_Stop+0x78>)
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	d107      	bne.n	800c400 <HAL_TIMEx_PWMN_Stop+0x68>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	6812      	ldr	r2, [r2, #0]
 800c3f8:	6812      	ldr	r2, [r2, #0]
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	438a      	bics	r2, r1
 800c3fe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	0018      	movs	r0, r3
 800c404:	46bd      	mov	sp, r7
 800c406:	b002      	add	sp, #8
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	46c0      	nop			; (mov r8, r8)
 800c40c:	00001111 	.word	0x00001111
 800c410:	00000444 	.word	0x00000444
 800c414:	ffff7fff 	.word	0xffff7fff

0800c418 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	2b04      	cmp	r3, #4
 800c426:	d011      	beq.n	800c44c <HAL_TIMEx_PWMN_Start_IT+0x34>
 800c428:	d802      	bhi.n	800c430 <HAL_TIMEx_PWMN_Start_IT+0x18>
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d005      	beq.n	800c43a <HAL_TIMEx_PWMN_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 800c42e:	e028      	b.n	800c482 <HAL_TIMEx_PWMN_Start_IT+0x6a>
  switch (Channel)
 800c430:	2b08      	cmp	r3, #8
 800c432:	d014      	beq.n	800c45e <HAL_TIMEx_PWMN_Start_IT+0x46>
 800c434:	2b0c      	cmp	r3, #12
 800c436:	d01b      	beq.n	800c470 <HAL_TIMEx_PWMN_Start_IT+0x58>
    break;
 800c438:	e023      	b.n	800c482 <HAL_TIMEx_PWMN_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	6812      	ldr	r2, [r2, #0]
 800c442:	68d2      	ldr	r2, [r2, #12]
 800c444:	2102      	movs	r1, #2
 800c446:	430a      	orrs	r2, r1
 800c448:	60da      	str	r2, [r3, #12]
    break;
 800c44a:	e01a      	b.n	800c482 <HAL_TIMEx_PWMN_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	6812      	ldr	r2, [r2, #0]
 800c454:	68d2      	ldr	r2, [r2, #12]
 800c456:	2104      	movs	r1, #4
 800c458:	430a      	orrs	r2, r1
 800c45a:	60da      	str	r2, [r3, #12]
    break;
 800c45c:	e011      	b.n	800c482 <HAL_TIMEx_PWMN_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	6812      	ldr	r2, [r2, #0]
 800c466:	68d2      	ldr	r2, [r2, #12]
 800c468:	2108      	movs	r1, #8
 800c46a:	430a      	orrs	r2, r1
 800c46c:	60da      	str	r2, [r3, #12]
    break;
 800c46e:	e008      	b.n	800c482 <HAL_TIMEx_PWMN_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	6812      	ldr	r2, [r2, #0]
 800c478:	68d2      	ldr	r2, [r2, #12]
 800c47a:	2110      	movs	r1, #16
 800c47c:	430a      	orrs	r2, r1
 800c47e:	60da      	str	r2, [r3, #12]
    break;
 800c480:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	6812      	ldr	r2, [r2, #0]
 800c48a:	68d2      	ldr	r2, [r2, #12]
 800c48c:	2180      	movs	r1, #128	; 0x80
 800c48e:	430a      	orrs	r2, r1
 800c490:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	2204      	movs	r2, #4
 800c49a:	0018      	movs	r0, r3
 800c49c:	f000 fd7b 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	6812      	ldr	r2, [r2, #0]
 800c4a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c4aa:	2180      	movs	r1, #128	; 0x80
 800c4ac:	0209      	lsls	r1, r1, #8
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	6812      	ldr	r2, [r2, #0]
 800c4ba:	6812      	ldr	r2, [r2, #0]
 800c4bc:	2101      	movs	r1, #1
 800c4be:	430a      	orrs	r2, r1
 800c4c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	0018      	movs	r0, r3
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	b002      	add	sp, #8
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT (TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer = 0U;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	d011      	beq.n	800c504 <HAL_TIMEx_PWMN_Stop_IT+0x38>
 800c4e0:	d802      	bhi.n	800c4e8 <HAL_TIMEx_PWMN_Stop_IT+0x1c>
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d005      	beq.n	800c4f2 <HAL_TIMEx_PWMN_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
    }
    break;

    default:
    break;
 800c4e6:	e028      	b.n	800c53a <HAL_TIMEx_PWMN_Stop_IT+0x6e>
  switch (Channel)
 800c4e8:	2b08      	cmp	r3, #8
 800c4ea:	d014      	beq.n	800c516 <HAL_TIMEx_PWMN_Stop_IT+0x4a>
 800c4ec:	2b0c      	cmp	r3, #12
 800c4ee:	d01b      	beq.n	800c528 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
    break;
 800c4f0:	e023      	b.n	800c53a <HAL_TIMEx_PWMN_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	6812      	ldr	r2, [r2, #0]
 800c4fa:	68d2      	ldr	r2, [r2, #12]
 800c4fc:	2102      	movs	r1, #2
 800c4fe:	438a      	bics	r2, r1
 800c500:	60da      	str	r2, [r3, #12]
    break;
 800c502:	e01a      	b.n	800c53a <HAL_TIMEx_PWMN_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	6812      	ldr	r2, [r2, #0]
 800c50c:	68d2      	ldr	r2, [r2, #12]
 800c50e:	2104      	movs	r1, #4
 800c510:	438a      	bics	r2, r1
 800c512:	60da      	str	r2, [r3, #12]
    break;
 800c514:	e011      	b.n	800c53a <HAL_TIMEx_PWMN_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	6812      	ldr	r2, [r2, #0]
 800c51e:	68d2      	ldr	r2, [r2, #12]
 800c520:	2108      	movs	r1, #8
 800c522:	438a      	bics	r2, r1
 800c524:	60da      	str	r2, [r3, #12]
    break;
 800c526:	e008      	b.n	800c53a <HAL_TIMEx_PWMN_Stop_IT+0x6e>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	6812      	ldr	r2, [r2, #0]
 800c530:	68d2      	ldr	r2, [r2, #12]
 800c532:	2110      	movs	r1, #16
 800c534:	438a      	bics	r2, r1
 800c536:	60da      	str	r2, [r3, #12]
    break;
 800c538:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	6839      	ldr	r1, [r7, #0]
 800c540:	2200      	movs	r2, #0
 800c542:	0018      	movs	r0, r3
 800c544:	f000 fd27 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6a1b      	ldr	r3, [r3, #32]
 800c54e:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == RESET)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	4a1c      	ldr	r2, [pc, #112]	; (800c5c4 <HAL_TIMEx_PWMN_Stop_IT+0xf8>)
 800c554:	4013      	ands	r3, r2
 800c556:	d107      	bne.n	800c568 <HAL_TIMEx_PWMN_Stop_IT+0x9c>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	6812      	ldr	r2, [r2, #0]
 800c560:	68d2      	ldr	r2, [r2, #12]
 800c562:	2180      	movs	r1, #128	; 0x80
 800c564:	438a      	bics	r2, r1
 800c566:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	4a16      	ldr	r2, [pc, #88]	; (800c5c8 <HAL_TIMEx_PWMN_Stop_IT+0xfc>)
 800c570:	4013      	ands	r3, r2
 800c572:	d10d      	bne.n	800c590 <HAL_TIMEx_PWMN_Stop_IT+0xc4>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	6a1b      	ldr	r3, [r3, #32]
 800c57a:	4a12      	ldr	r2, [pc, #72]	; (800c5c4 <HAL_TIMEx_PWMN_Stop_IT+0xf8>)
 800c57c:	4013      	ands	r3, r2
 800c57e:	d107      	bne.n	800c590 <HAL_TIMEx_PWMN_Stop_IT+0xc4>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	6812      	ldr	r2, [r2, #0]
 800c588:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c58a:	4910      	ldr	r1, [pc, #64]	; (800c5cc <HAL_TIMEx_PWMN_Stop_IT+0x100>)
 800c58c:	400a      	ands	r2, r1
 800c58e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	4a0c      	ldr	r2, [pc, #48]	; (800c5c8 <HAL_TIMEx_PWMN_Stop_IT+0xfc>)
 800c598:	4013      	ands	r3, r2
 800c59a:	d10d      	bne.n	800c5b8 <HAL_TIMEx_PWMN_Stop_IT+0xec>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6a1b      	ldr	r3, [r3, #32]
 800c5a2:	4a08      	ldr	r2, [pc, #32]	; (800c5c4 <HAL_TIMEx_PWMN_Stop_IT+0xf8>)
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	d107      	bne.n	800c5b8 <HAL_TIMEx_PWMN_Stop_IT+0xec>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	6812      	ldr	r2, [r2, #0]
 800c5b0:	6812      	ldr	r2, [r2, #0]
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	438a      	bics	r2, r1
 800c5b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	0018      	movs	r0, r3
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	b004      	add	sp, #16
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	46c0      	nop			; (mov r8, r8)
 800c5c4:	00000444 	.word	0x00000444
 800c5c8:	00001111 	.word	0x00001111
 800c5cc:	ffff7fff 	.word	0xffff7fff

0800c5d0 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
 800c5dc:	001a      	movs	r2, r3
 800c5de:	1cbb      	adds	r3, r7, #2
 800c5e0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  if((htim->State == HAL_TIM_STATE_BUSY))
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	223d      	movs	r2, #61	; 0x3d
 800c5e6:	5c9b      	ldrb	r3, [r3, r2]
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d101      	bne.n	800c5f2 <HAL_TIMEx_PWMN_Start_DMA+0x22>
  {
     return HAL_BUSY;
 800c5ee:	2302      	movs	r3, #2
 800c5f0:	e0ab      	b.n	800c74a <HAL_TIMEx_PWMN_Start_DMA+0x17a>
  }
  else if((htim->State == HAL_TIM_STATE_READY))
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	223d      	movs	r2, #61	; 0x3d
 800c5f6:	5c9b      	ldrb	r3, [r3, r2]
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d10c      	bne.n	800c618 <HAL_TIMEx_PWMN_Start_DMA+0x48>
  {
    if(((uint32_t)pData == 0U ) && (Length > 0U))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d105      	bne.n	800c610 <HAL_TIMEx_PWMN_Start_DMA+0x40>
 800c604:	1cbb      	adds	r3, r7, #2
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d001      	beq.n	800c610 <HAL_TIMEx_PWMN_Start_DMA+0x40>
    {
      return HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e09c      	b.n	800c74a <HAL_TIMEx_PWMN_Start_DMA+0x17a>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	223d      	movs	r2, #61	; 0x3d
 800c614:	2102      	movs	r1, #2
 800c616:	5499      	strb	r1, [r3, r2]
    }
  }
  switch (Channel)
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2b04      	cmp	r3, #4
 800c61c:	d025      	beq.n	800c66a <HAL_TIMEx_PWMN_Start_DMA+0x9a>
 800c61e:	d802      	bhi.n	800c626 <HAL_TIMEx_PWMN_Start_DMA+0x56>
 800c620:	2b00      	cmp	r3, #0
 800c622:	d005      	beq.n	800c630 <HAL_TIMEx_PWMN_Start_DMA+0x60>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 800c624:	e078      	b.n	800c718 <HAL_TIMEx_PWMN_Start_DMA+0x148>
  switch (Channel)
 800c626:	2b08      	cmp	r3, #8
 800c628:	d03c      	beq.n	800c6a4 <HAL_TIMEx_PWMN_Start_DMA+0xd4>
 800c62a:	2b0c      	cmp	r3, #12
 800c62c:	d057      	beq.n	800c6de <HAL_TIMEx_PWMN_Start_DMA+0x10e>
    break;
 800c62e:	e073      	b.n	800c718 <HAL_TIMEx_PWMN_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c634:	4a47      	ldr	r2, [pc, #284]	; (800c754 <HAL_TIMEx_PWMN_Start_DMA+0x184>)
 800c636:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63c:	4a46      	ldr	r2, [pc, #280]	; (800c758 <HAL_TIMEx_PWMN_Start_DMA+0x188>)
 800c63e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3334      	adds	r3, #52	; 0x34
 800c64c:	001a      	movs	r2, r3
 800c64e:	1cbb      	adds	r3, r7, #2
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	f7f4 f959 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	6812      	ldr	r2, [r2, #0]
 800c65e:	68d2      	ldr	r2, [r2, #12]
 800c660:	2180      	movs	r1, #128	; 0x80
 800c662:	0089      	lsls	r1, r1, #2
 800c664:	430a      	orrs	r2, r1
 800c666:	60da      	str	r2, [r3, #12]
    break;
 800c668:	e056      	b.n	800c718 <HAL_TIMEx_PWMN_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66e:	4a39      	ldr	r2, [pc, #228]	; (800c754 <HAL_TIMEx_PWMN_Start_DMA+0x184>)
 800c670:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c676:	4a38      	ldr	r2, [pc, #224]	; (800c758 <HAL_TIMEx_PWMN_Start_DMA+0x188>)
 800c678:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c67e:	6879      	ldr	r1, [r7, #4]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3338      	adds	r3, #56	; 0x38
 800c686:	001a      	movs	r2, r3
 800c688:	1cbb      	adds	r3, r7, #2
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	f7f4 f93c 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	6812      	ldr	r2, [r2, #0]
 800c698:	68d2      	ldr	r2, [r2, #12]
 800c69a:	2180      	movs	r1, #128	; 0x80
 800c69c:	00c9      	lsls	r1, r1, #3
 800c69e:	430a      	orrs	r2, r1
 800c6a0:	60da      	str	r2, [r3, #12]
    break;
 800c6a2:	e039      	b.n	800c718 <HAL_TIMEx_PWMN_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a8:	4a2a      	ldr	r2, [pc, #168]	; (800c754 <HAL_TIMEx_PWMN_Start_DMA+0x184>)
 800c6aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b0:	4a29      	ldr	r2, [pc, #164]	; (800c758 <HAL_TIMEx_PWMN_Start_DMA+0x188>)
 800c6b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,Length);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c6b8:	6879      	ldr	r1, [r7, #4]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	333c      	adds	r3, #60	; 0x3c
 800c6c0:	001a      	movs	r2, r3
 800c6c2:	1cbb      	adds	r3, r7, #2
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	f7f4 f91f 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	6812      	ldr	r2, [r2, #0]
 800c6d2:	68d2      	ldr	r2, [r2, #12]
 800c6d4:	2180      	movs	r1, #128	; 0x80
 800c6d6:	0109      	lsls	r1, r1, #4
 800c6d8:	430a      	orrs	r2, r1
 800c6da:	60da      	str	r2, [r3, #12]
    break;
 800c6dc:	e01c      	b.n	800c718 <HAL_TIMEx_PWMN_Start_DMA+0x148>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e2:	4a1c      	ldr	r2, [pc, #112]	; (800c754 <HAL_TIMEx_PWMN_Start_DMA+0x184>)
 800c6e4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ea:	4a1b      	ldr	r2, [pc, #108]	; (800c758 <HAL_TIMEx_PWMN_Start_DMA+0x188>)
 800c6ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	3340      	adds	r3, #64	; 0x40
 800c6fa:	001a      	movs	r2, r3
 800c6fc:	1cbb      	adds	r3, r7, #2
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	f7f4 f902 	bl	8000908 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	6812      	ldr	r2, [r2, #0]
 800c70c:	68d2      	ldr	r2, [r2, #12]
 800c70e:	2180      	movs	r1, #128	; 0x80
 800c710:	0149      	lsls	r1, r1, #5
 800c712:	430a      	orrs	r2, r1
 800c714:	60da      	str	r2, [r3, #12]
    break;
 800c716:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the complementary PWM output  */
     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68b9      	ldr	r1, [r7, #8]
 800c71e:	2204      	movs	r2, #4
 800c720:	0018      	movs	r0, r3
 800c722:	f000 fc38 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
    __HAL_TIM_MOE_ENABLE(htim);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	6812      	ldr	r2, [r2, #0]
 800c72e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c730:	2180      	movs	r1, #128	; 0x80
 800c732:	0209      	lsls	r1, r1, #8
 800c734:	430a      	orrs	r2, r1
 800c736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	6812      	ldr	r2, [r2, #0]
 800c740:	6812      	ldr	r2, [r2, #0]
 800c742:	2101      	movs	r1, #1
 800c744:	430a      	orrs	r2, r1
 800c746:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	0018      	movs	r0, r3
 800c74c:	46bd      	mov	sp, r7
 800c74e:	b004      	add	sp, #16
 800c750:	bd80      	pop	{r7, pc}
 800c752:	46c0      	nop			; (mov r8, r8)
 800c754:	0800aee9 	.word	0x0800aee9
 800c758:	0800aec3 	.word	0x0800aec3

0800c75c <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	2b04      	cmp	r3, #4
 800c76a:	d011      	beq.n	800c790 <HAL_TIMEx_PWMN_Stop_DMA+0x34>
 800c76c:	d802      	bhi.n	800c774 <HAL_TIMEx_PWMN_Stop_DMA+0x18>
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d005      	beq.n	800c77e <HAL_TIMEx_PWMN_Stop_DMA+0x22>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
    }
    break;

    default:
    break;
 800c772:	e028      	b.n	800c7c6 <HAL_TIMEx_PWMN_Stop_DMA+0x6a>
  switch (Channel)
 800c774:	2b08      	cmp	r3, #8
 800c776:	d014      	beq.n	800c7a2 <HAL_TIMEx_PWMN_Stop_DMA+0x46>
 800c778:	2b0c      	cmp	r3, #12
 800c77a:	d01b      	beq.n	800c7b4 <HAL_TIMEx_PWMN_Stop_DMA+0x58>
    break;
 800c77c:	e023      	b.n	800c7c6 <HAL_TIMEx_PWMN_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	6812      	ldr	r2, [r2, #0]
 800c786:	68d2      	ldr	r2, [r2, #12]
 800c788:	492b      	ldr	r1, [pc, #172]	; (800c838 <HAL_TIMEx_PWMN_Stop_DMA+0xdc>)
 800c78a:	400a      	ands	r2, r1
 800c78c:	60da      	str	r2, [r3, #12]
    break;
 800c78e:	e01a      	b.n	800c7c6 <HAL_TIMEx_PWMN_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	68d2      	ldr	r2, [r2, #12]
 800c79a:	4928      	ldr	r1, [pc, #160]	; (800c83c <HAL_TIMEx_PWMN_Stop_DMA+0xe0>)
 800c79c:	400a      	ands	r2, r1
 800c79e:	60da      	str	r2, [r3, #12]
    break;
 800c7a0:	e011      	b.n	800c7c6 <HAL_TIMEx_PWMN_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	6812      	ldr	r2, [r2, #0]
 800c7aa:	68d2      	ldr	r2, [r2, #12]
 800c7ac:	4924      	ldr	r1, [pc, #144]	; (800c840 <HAL_TIMEx_PWMN_Stop_DMA+0xe4>)
 800c7ae:	400a      	ands	r2, r1
 800c7b0:	60da      	str	r2, [r3, #12]
    break;
 800c7b2:	e008      	b.n	800c7c6 <HAL_TIMEx_PWMN_Stop_DMA+0x6a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	6812      	ldr	r2, [r2, #0]
 800c7bc:	68d2      	ldr	r2, [r2, #12]
 800c7be:	4921      	ldr	r1, [pc, #132]	; (800c844 <HAL_TIMEx_PWMN_Stop_DMA+0xe8>)
 800c7c0:	400a      	ands	r2, r1
 800c7c2:	60da      	str	r2, [r3, #12]
    break;
 800c7c4:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	0018      	movs	r0, r3
 800c7d0:	f000 fbe1 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	4a1b      	ldr	r2, [pc, #108]	; (800c848 <HAL_TIMEx_PWMN_Stop_DMA+0xec>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	d10d      	bne.n	800c7fc <HAL_TIMEx_PWMN_Stop_DMA+0xa0>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	4a19      	ldr	r2, [pc, #100]	; (800c84c <HAL_TIMEx_PWMN_Stop_DMA+0xf0>)
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	d107      	bne.n	800c7fc <HAL_TIMEx_PWMN_Stop_DMA+0xa0>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	6812      	ldr	r2, [r2, #0]
 800c7f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c7f6:	4916      	ldr	r1, [pc, #88]	; (800c850 <HAL_TIMEx_PWMN_Stop_DMA+0xf4>)
 800c7f8:	400a      	ands	r2, r1
 800c7fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	4a11      	ldr	r2, [pc, #68]	; (800c848 <HAL_TIMEx_PWMN_Stop_DMA+0xec>)
 800c804:	4013      	ands	r3, r2
 800c806:	d10d      	bne.n	800c824 <HAL_TIMEx_PWMN_Stop_DMA+0xc8>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6a1b      	ldr	r3, [r3, #32]
 800c80e:	4a0f      	ldr	r2, [pc, #60]	; (800c84c <HAL_TIMEx_PWMN_Stop_DMA+0xf0>)
 800c810:	4013      	ands	r3, r2
 800c812:	d107      	bne.n	800c824 <HAL_TIMEx_PWMN_Stop_DMA+0xc8>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	6812      	ldr	r2, [r2, #0]
 800c81c:	6812      	ldr	r2, [r2, #0]
 800c81e:	2101      	movs	r1, #1
 800c820:	438a      	bics	r2, r1
 800c822:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	223d      	movs	r2, #61	; 0x3d
 800c828:	2101      	movs	r1, #1
 800c82a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	0018      	movs	r0, r3
 800c830:	46bd      	mov	sp, r7
 800c832:	b002      	add	sp, #8
 800c834:	bd80      	pop	{r7, pc}
 800c836:	46c0      	nop			; (mov r8, r8)
 800c838:	fffffdff 	.word	0xfffffdff
 800c83c:	fffffbff 	.word	0xfffffbff
 800c840:	fffff7ff 	.word	0xfffff7ff
 800c844:	ffffefff 	.word	0xffffefff
 800c848:	00001111 	.word	0x00001111
 800c84c:	00000444 	.word	0x00000444
 800c850:	ffff7fff 	.word	0xffff7fff

0800c854 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
  {
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6839      	ldr	r1, [r7, #0]
 800c864:	2204      	movs	r2, #4
 800c866:	0018      	movs	r0, r3
 800c868:	f000 fb95 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6812      	ldr	r2, [r2, #0]
 800c874:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c876:	2180      	movs	r1, #128	; 0x80
 800c878:	0209      	lsls	r1, r1, #8
 800c87a:	430a      	orrs	r2, r1
 800c87c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800c87e:	2300      	movs	r3, #0
}
 800c880:	0018      	movs	r0, r3
 800c882:	46bd      	mov	sp, r7
 800c884:	b002      	add	sp, #8
 800c886:	bd80      	pop	{r7, pc}

0800c888 <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output */
    TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	2200      	movs	r2, #0
 800c89a:	0018      	movs	r0, r3
 800c89c:	f000 fb7b 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	4a15      	ldr	r2, [pc, #84]	; (800c8fc <HAL_TIMEx_OnePulseN_Stop+0x74>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	d10d      	bne.n	800c8c8 <HAL_TIMEx_OnePulseN_Stop+0x40>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	4a13      	ldr	r2, [pc, #76]	; (800c900 <HAL_TIMEx_OnePulseN_Stop+0x78>)
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	d107      	bne.n	800c8c8 <HAL_TIMEx_OnePulseN_Stop+0x40>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	6812      	ldr	r2, [r2, #0]
 800c8c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c8c2:	4910      	ldr	r1, [pc, #64]	; (800c904 <HAL_TIMEx_OnePulseN_Stop+0x7c>)
 800c8c4:	400a      	ands	r2, r1
 800c8c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	4a0b      	ldr	r2, [pc, #44]	; (800c8fc <HAL_TIMEx_OnePulseN_Stop+0x74>)
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	d10d      	bne.n	800c8f0 <HAL_TIMEx_OnePulseN_Stop+0x68>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	4a09      	ldr	r2, [pc, #36]	; (800c900 <HAL_TIMEx_OnePulseN_Stop+0x78>)
 800c8dc:	4013      	ands	r3, r2
 800c8de:	d107      	bne.n	800c8f0 <HAL_TIMEx_OnePulseN_Stop+0x68>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	6812      	ldr	r2, [r2, #0]
 800c8e8:	6812      	ldr	r2, [r2, #0]
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	438a      	bics	r2, r1
 800c8ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	0018      	movs	r0, r3
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	b002      	add	sp, #8
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	46c0      	nop			; (mov r8, r8)
 800c8fc:	00001111 	.word	0x00001111
 800c900:	00000444 	.word	0x00000444
 800c904:	ffff7fff 	.word	0xffff7fff

0800c908 <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	6812      	ldr	r2, [r2, #0]
 800c91a:	68d2      	ldr	r2, [r2, #12]
 800c91c:	2102      	movs	r1, #2
 800c91e:	430a      	orrs	r2, r1
 800c920:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	6812      	ldr	r2, [r2, #0]
 800c92a:	68d2      	ldr	r2, [r2, #12]
 800c92c:	2104      	movs	r1, #4
 800c92e:	430a      	orrs	r2, r1
 800c930:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	2204      	movs	r2, #4
 800c93a:	0018      	movs	r0, r3
 800c93c:	f000 fb2b 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	6812      	ldr	r2, [r2, #0]
 800c948:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c94a:	2180      	movs	r1, #128	; 0x80
 800c94c:	0209      	lsls	r1, r1, #8
 800c94e:	430a      	orrs	r2, r1
 800c950:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800c952:	2300      	movs	r3, #0
  }
 800c954:	0018      	movs	r0, r3
 800c956:	46bd      	mov	sp, r7
 800c958:	b002      	add	sp, #8
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	6812      	ldr	r2, [r2, #0]
 800c96e:	68d2      	ldr	r2, [r2, #12]
 800c970:	2102      	movs	r1, #2
 800c972:	438a      	bics	r2, r1
 800c974:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	6812      	ldr	r2, [r2, #0]
 800c97e:	68d2      	ldr	r2, [r2, #12]
 800c980:	2104      	movs	r1, #4
 800c982:	438a      	bics	r2, r1
 800c984:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	2200      	movs	r2, #0
 800c98e:	0018      	movs	r0, r3
 800c990:	f000 fb01 	bl	800cf96 <TIM_CCxNChannelCmd>

  /* Disable the Main Ouput */
  __HAL_TIM_MOE_DISABLE(htim);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	4a15      	ldr	r2, [pc, #84]	; (800c9f0 <HAL_TIMEx_OnePulseN_Stop_IT+0x94>)
 800c99c:	4013      	ands	r3, r2
 800c99e:	d10d      	bne.n	800c9bc <HAL_TIMEx_OnePulseN_Stop_IT+0x60>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	4a13      	ldr	r2, [pc, #76]	; (800c9f4 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>)
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	d107      	bne.n	800c9bc <HAL_TIMEx_OnePulseN_Stop_IT+0x60>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	6812      	ldr	r2, [r2, #0]
 800c9b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c9b6:	4910      	ldr	r1, [pc, #64]	; (800c9f8 <HAL_TIMEx_OnePulseN_Stop_IT+0x9c>)
 800c9b8:	400a      	ands	r2, r1
 800c9ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
   __HAL_TIM_DISABLE(htim);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	6a1b      	ldr	r3, [r3, #32]
 800c9c2:	4a0b      	ldr	r2, [pc, #44]	; (800c9f0 <HAL_TIMEx_OnePulseN_Stop_IT+0x94>)
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	d10d      	bne.n	800c9e4 <HAL_TIMEx_OnePulseN_Stop_IT+0x88>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	4a09      	ldr	r2, [pc, #36]	; (800c9f4 <HAL_TIMEx_OnePulseN_Stop_IT+0x98>)
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	d107      	bne.n	800c9e4 <HAL_TIMEx_OnePulseN_Stop_IT+0x88>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	6812      	ldr	r2, [r2, #0]
 800c9dc:	6812      	ldr	r2, [r2, #0]
 800c9de:	2101      	movs	r1, #1
 800c9e0:	438a      	bics	r2, r1
 800c9e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	0018      	movs	r0, r3
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	b002      	add	sp, #8
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	46c0      	nop			; (mov r8, r8)
 800c9f0:	00001111 	.word	0x00001111
 800c9f4:	00000444 	.word	0x00000444
 800c9f8:	ffff7fff 	.word	0xffff7fff

0800c9fc <HAL_TIMEx_ConfigCommutationEvent>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	223c      	movs	r2, #60	; 0x3c
 800ca0c:	5c9b      	ldrb	r3, [r3, r2]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d101      	bne.n	800ca16 <HAL_TIMEx_ConfigCommutationEvent+0x1a>
 800ca12:	2302      	movs	r3, #2
 800ca14:	e03c      	b.n	800ca90 <HAL_TIMEx_ConfigCommutationEvent+0x94>
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	223c      	movs	r2, #60	; 0x3c
 800ca1a:	2101      	movs	r1, #1
 800ca1c:	5499      	strb	r1, [r3, r2]

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d008      	beq.n	800ca36 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2b10      	cmp	r3, #16
 800ca28:	d005      	beq.n	800ca36 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b20      	cmp	r3, #32
 800ca2e:	d002      	beq.n	800ca36 <HAL_TIMEx_ConfigCommutationEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b30      	cmp	r3, #48	; 0x30
 800ca34:	d10f      	bne.n	800ca56 <HAL_TIMEx_ConfigCommutationEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	6812      	ldr	r2, [r2, #0]
 800ca3e:	6892      	ldr	r2, [r2, #8]
 800ca40:	2170      	movs	r1, #112	; 0x70
 800ca42:	438a      	bics	r2, r1
 800ca44:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	6812      	ldr	r2, [r2, #0]
 800ca4e:	6891      	ldr	r1, [r2, #8]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	430a      	orrs	r2, r1
 800ca54:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	6812      	ldr	r2, [r2, #0]
 800ca5e:	6852      	ldr	r2, [r2, #4]
 800ca60:	2101      	movs	r1, #1
 800ca62:	430a      	orrs	r2, r1
 800ca64:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	6812      	ldr	r2, [r2, #0]
 800ca6e:	6852      	ldr	r2, [r2, #4]
 800ca70:	2104      	movs	r1, #4
 800ca72:	438a      	bics	r2, r1
 800ca74:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	6812      	ldr	r2, [r2, #0]
 800ca7e:	6851      	ldr	r1, [r2, #4]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	430a      	orrs	r2, r1
 800ca84:	605a      	str	r2, [r3, #4]

  __HAL_UNLOCK(htim);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	223c      	movs	r2, #60	; 0x3c
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	0018      	movs	r0, r3
 800ca92:	46bd      	mov	sp, r7
 800ca94:	b004      	add	sp, #16
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <HAL_TIMEx_ConfigCommutationEvent_IT>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	223c      	movs	r2, #60	; 0x3c
 800caa8:	5c9b      	ldrb	r3, [r3, r2]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d101      	bne.n	800cab2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x1a>
 800caae:	2302      	movs	r3, #2
 800cab0:	e044      	b.n	800cb3c <HAL_TIMEx_ConfigCommutationEvent_IT+0xa4>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	223c      	movs	r2, #60	; 0x3c
 800cab6:	2101      	movs	r1, #1
 800cab8:	5499      	strb	r1, [r3, r2]

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d008      	beq.n	800cad2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	2b10      	cmp	r3, #16
 800cac4:	d005      	beq.n	800cad2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	2b20      	cmp	r3, #32
 800caca:	d002      	beq.n	800cad2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	2b30      	cmp	r3, #48	; 0x30
 800cad0:	d10f      	bne.n	800caf2 <HAL_TIMEx_ConfigCommutationEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	6812      	ldr	r2, [r2, #0]
 800cada:	6892      	ldr	r2, [r2, #8]
 800cadc:	2170      	movs	r1, #112	; 0x70
 800cade:	438a      	bics	r2, r1
 800cae0:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	6812      	ldr	r2, [r2, #0]
 800caea:	6891      	ldr	r1, [r2, #8]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	430a      	orrs	r2, r1
 800caf0:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	6812      	ldr	r2, [r2, #0]
 800cafa:	6852      	ldr	r2, [r2, #4]
 800cafc:	2101      	movs	r1, #1
 800cafe:	430a      	orrs	r2, r1
 800cb00:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	6812      	ldr	r2, [r2, #0]
 800cb0a:	6852      	ldr	r2, [r2, #4]
 800cb0c:	2104      	movs	r1, #4
 800cb0e:	438a      	bics	r2, r1
 800cb10:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	6812      	ldr	r2, [r2, #0]
 800cb1a:	6851      	ldr	r1, [r2, #4]
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	430a      	orrs	r2, r1
 800cb20:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation Interrupt Request */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	6812      	ldr	r2, [r2, #0]
 800cb2a:	68d2      	ldr	r2, [r2, #12]
 800cb2c:	2120      	movs	r1, #32
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	223c      	movs	r2, #60	; 0x3c
 800cb36:	2100      	movs	r1, #0
 800cb38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	b004      	add	sp, #16
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <HAL_TIMEx_ConfigCommutationEvent_DMA>:
  *            @arg TIM_COMMUTATION_TRGI: Commutation source is the TRGI of the Interface Timer
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutationEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger, uint32_t  CommutationSource)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	223c      	movs	r2, #60	; 0x3c
 800cb54:	5c9b      	ldrb	r3, [r3, r2]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d101      	bne.n	800cb5e <HAL_TIMEx_ConfigCommutationEvent_DMA+0x1a>
 800cb5a:	2302      	movs	r3, #2
 800cb5c:	e04d      	b.n	800cbfa <HAL_TIMEx_ConfigCommutationEvent_DMA+0xb6>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	223c      	movs	r2, #60	; 0x3c
 800cb62:	2101      	movs	r1, #1
 800cb64:	5499      	strb	r1, [r3, r2]

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d008      	beq.n	800cb7e <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2b10      	cmp	r3, #16
 800cb70:	d005      	beq.n	800cb7e <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2b20      	cmp	r3, #32
 800cb76:	d002      	beq.n	800cb7e <HAL_TIMEx_ConfigCommutationEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	2b30      	cmp	r3, #48	; 0x30
 800cb7c:	d10f      	bne.n	800cb9e <HAL_TIMEx_ConfigCommutationEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	6812      	ldr	r2, [r2, #0]
 800cb86:	6892      	ldr	r2, [r2, #8]
 800cb88:	2170      	movs	r1, #112	; 0x70
 800cb8a:	438a      	bics	r2, r1
 800cb8c:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	6812      	ldr	r2, [r2, #0]
 800cb96:	6891      	ldr	r1, [r2, #8]
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	430a      	orrs	r2, r1
 800cb9c:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	6812      	ldr	r2, [r2, #0]
 800cba6:	6852      	ldr	r2, [r2, #4]
 800cba8:	2101      	movs	r1, #1
 800cbaa:	430a      	orrs	r2, r1
 800cbac:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	6812      	ldr	r2, [r2, #0]
 800cbb6:	6852      	ldr	r2, [r2, #4]
 800cbb8:	2104      	movs	r1, #4
 800cbba:	438a      	bics	r2, r1
 800cbbc:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	6812      	ldr	r2, [r2, #0]
 800cbc6:	6851      	ldr	r1, [r2, #4]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	430a      	orrs	r2, r1
 800cbcc:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd2:	4a0c      	ldr	r2, [pc, #48]	; (800cc04 <HAL_TIMEx_ConfigCommutationEvent_DMA+0xc0>)
 800cbd4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbda:	4a0b      	ldr	r2, [pc, #44]	; (800cc08 <HAL_TIMEx_ConfigCommutationEvent_DMA+0xc4>)
 800cbdc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	6812      	ldr	r2, [r2, #0]
 800cbe6:	68d2      	ldr	r2, [r2, #12]
 800cbe8:	2180      	movs	r1, #128	; 0x80
 800cbea:	0189      	lsls	r1, r1, #6
 800cbec:	430a      	orrs	r2, r1
 800cbee:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	223c      	movs	r2, #60	; 0x3c
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	0018      	movs	r0, r3
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	b004      	add	sp, #16
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	46c0      	nop			; (mov r8, r8)
 800cc04:	0800cf59 	.word	0x0800cf59
 800cc08:	0800aec3 	.word	0x0800aec3

0800cc0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	223c      	movs	r2, #60	; 0x3c
 800cc1a:	5c9b      	ldrb	r3, [r3, r2]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d101      	bne.n	800cc24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc20:	2302      	movs	r3, #2
 800cc22:	e032      	b.n	800cc8a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	223c      	movs	r2, #60	; 0x3c
 800cc28:	2101      	movs	r1, #1
 800cc2a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	223d      	movs	r2, #61	; 0x3d
 800cc30:	2102      	movs	r1, #2
 800cc32:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	6812      	ldr	r2, [r2, #0]
 800cc3c:	6852      	ldr	r2, [r2, #4]
 800cc3e:	2170      	movs	r1, #112	; 0x70
 800cc40:	438a      	bics	r2, r1
 800cc42:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	6812      	ldr	r2, [r2, #0]
 800cc4c:	6851      	ldr	r1, [r2, #4]
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	6812      	ldr	r2, [r2, #0]
 800cc52:	430a      	orrs	r2, r1
 800cc54:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	6812      	ldr	r2, [r2, #0]
 800cc5e:	6892      	ldr	r2, [r2, #8]
 800cc60:	2180      	movs	r1, #128	; 0x80
 800cc62:	438a      	bics	r2, r1
 800cc64:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	6812      	ldr	r2, [r2, #0]
 800cc6e:	6891      	ldr	r1, [r2, #8]
 800cc70:	683a      	ldr	r2, [r7, #0]
 800cc72:	6852      	ldr	r2, [r2, #4]
 800cc74:	430a      	orrs	r2, r1
 800cc76:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	223d      	movs	r2, #61	; 0x3d
 800cc7c:	2101      	movs	r1, #1
 800cc7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	223c      	movs	r2, #60	; 0x3c
 800cc84:	2100      	movs	r1, #0
 800cc86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cc88:	2300      	movs	r3, #0
}
 800cc8a:	0018      	movs	r0, r3
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	b002      	add	sp, #8
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b084      	sub	sp, #16
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	223c      	movs	r2, #60	; 0x3c
 800cca4:	5c9b      	ldrb	r3, [r3, r2]
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d101      	bne.n	800ccae <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ccaa:	2302      	movs	r3, #2
 800ccac:	e04d      	b.n	800cd4a <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	223c      	movs	r2, #60	; 0x3c
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	223d      	movs	r2, #61	; 0x3d
 800ccba:	2102      	movs	r1, #2
 800ccbc:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	22ff      	movs	r2, #255	; 0xff
 800ccc2:	4393      	bics	r3, r2
 800ccc4:	001a      	movs	r2, r3
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	4a20      	ldr	r2, [pc, #128]	; (800cd54 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>)
 800ccd2:	401a      	ands	r2, r3
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	4a1e      	ldr	r2, [pc, #120]	; (800cd58 <HAL_TIMEx_ConfigBreakDeadTime+0xc6>)
 800cce0:	401a      	ands	r2, r3
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	4a1b      	ldr	r2, [pc, #108]	; (800cd5c <HAL_TIMEx_ConfigBreakDeadTime+0xca>)
 800ccee:	401a      	ands	r2, r3
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4313      	orrs	r3, r2
 800ccf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	4a19      	ldr	r2, [pc, #100]	; (800cd60 <HAL_TIMEx_ConfigBreakDeadTime+0xce>)
 800ccfc:	401a      	ands	r2, r3
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	4313      	orrs	r3, r2
 800cd04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	4a16      	ldr	r2, [pc, #88]	; (800cd64 <HAL_TIMEx_ConfigBreakDeadTime+0xd2>)
 800cd0a:	401a      	ands	r2, r3
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	695b      	ldr	r3, [r3, #20]
 800cd10:	4313      	orrs	r3, r2
 800cd12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	4a14      	ldr	r2, [pc, #80]	; (800cd68 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>)
 800cd18:	401a      	ands	r2, r3
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	4a11      	ldr	r2, [pc, #68]	; (800cd6c <HAL_TIMEx_ConfigBreakDeadTime+0xda>)
 800cd26:	401a      	ands	r2, r3
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	223d      	movs	r2, #61	; 0x3d
 800cd3c:	2101      	movs	r1, #1
 800cd3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	223c      	movs	r2, #60	; 0x3c
 800cd44:	2100      	movs	r1, #0
 800cd46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cd48:	2300      	movs	r3, #0
}
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	b004      	add	sp, #16
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	46c0      	nop			; (mov r8, r8)
 800cd54:	fffffcff 	.word	0xfffffcff
 800cd58:	fffffbff 	.word	0xfffffbff
 800cd5c:	fffff7ff 	.word	0xfffff7ff
 800cd60:	ffffefff 	.word	0xffffefff
 800cd64:	ffffdfff 	.word	0xffffdfff
 800cd68:	ffffbfff 	.word	0xffffbfff
 800cd6c:	ffff7fff 	.word	0xffff7fff

0800cd70 <HAL_TIMEx_RemapConfig>:
  *            @arg TIM_TIM14_HSE: TIM14 TI1 is connected to HSE/32
  *            @arg TIM_TIM14_MCO: TIM14 TI1 is connected to MCO
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	223c      	movs	r2, #60	; 0x3c
 800cd7e:	5c9b      	ldrb	r3, [r3, r2]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d101      	bne.n	800cd88 <HAL_TIMEx_RemapConfig+0x18>
 800cd84:	2302      	movs	r3, #2
 800cd86:	e010      	b.n	800cdaa <HAL_TIMEx_RemapConfig+0x3a>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	223c      	movs	r2, #60	; 0x3c
 800cd8c:	2101      	movs	r1, #1
 800cd8e:	5499      	strb	r1, [r3, r2]
  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  /* Set the Timer remapping configuration */
  htim->Instance->OR = Remap;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	651a      	str	r2, [r3, #80]	; 0x50

  htim->State = HAL_TIM_STATE_READY;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	223d      	movs	r2, #61	; 0x3d
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	223c      	movs	r2, #60	; 0x3c
 800cda4:	2100      	movs	r1, #0
 800cda6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	0018      	movs	r0, r3
 800cdac:	46bd      	mov	sp, r7
 800cdae:	b002      	add	sp, #8
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <HAL_TIM_ConfigOCrefClear>:
  * @retval None
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{ 
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b086      	sub	sp, #24
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	60f8      	str	r0, [r7, #12]
 800cdba:	60b9      	str	r1, [r7, #8]
 800cdbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpsmcr = 0U;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
                                        
  /* Check input state */
  __HAL_LOCK(htim);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	223c      	movs	r2, #60	; 0x3c
 800cdc6:	5c9b      	ldrb	r3, [r3, r2]
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d101      	bne.n	800cdd0 <HAL_TIM_ConfigOCrefClear+0x1e>
 800cdcc:	2302      	movs	r3, #2
 800cdce:	e0ab      	b.n	800cf28 <HAL_TIM_ConfigOCrefClear+0x176>
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	223c      	movs	r2, #60	; 0x3c
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	223d      	movs	r2, #61	; 0x3d
 800cddc:	2102      	movs	r1, #2
 800cdde:	5499      	strb	r1, [r3, r2]
  
  switch (sClearInputConfig->ClearInputSource)
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d01d      	beq.n	800ce24 <HAL_TIM_ConfigOCrefClear+0x72>
 800cde8:	d302      	bcc.n	800cdf0 <HAL_TIM_ConfigOCrefClear+0x3e>
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d011      	beq.n	800ce12 <HAL_TIM_ConfigOCrefClear+0x60>
      /* Set the OCREF clear selection bit */
      htim->Instance->SMCR |= TIM_SMCR_OCCS;
    }
    break;
    default:
    break;
 800cdee:	e02c      	b.n	800ce4a <HAL_TIM_ConfigOCrefClear+0x98>
      tmpsmcr = htim->Instance->SMCR;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	617b      	str	r3, [r7, #20]
      tmpsmcr &= ~TIM_SMCR_OCCS;
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	2208      	movs	r2, #8
 800cdfc:	4393      	bics	r3, r2
 800cdfe:	617b      	str	r3, [r7, #20]
      tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	4a4b      	ldr	r2, [pc, #300]	; (800cf30 <HAL_TIM_ConfigOCrefClear+0x17e>)
 800ce04:	4013      	ands	r3, r2
 800ce06:	617b      	str	r3, [r7, #20]
      htim->Instance->SMCR = tmpsmcr;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	697a      	ldr	r2, [r7, #20]
 800ce0e:	609a      	str	r2, [r3, #8]
    break;
 800ce10:	e01b      	b.n	800ce4a <HAL_TIM_ConfigOCrefClear+0x98>
      htim->Instance->SMCR &= ~TIM_SMCR_OCCS;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	6812      	ldr	r2, [r2, #0]
 800ce1a:	6892      	ldr	r2, [r2, #8]
 800ce1c:	2108      	movs	r1, #8
 800ce1e:	438a      	bics	r2, r1
 800ce20:	609a      	str	r2, [r3, #8]
    break;
 800ce22:	e012      	b.n	800ce4a <HAL_TIM_ConfigOCrefClear+0x98>
      TIM_ETR_SetConfig(htim->Instance,
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	68d9      	ldr	r1, [r3, #12]
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	689a      	ldr	r2, [r3, #8]
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	f7fe fdcc 	bl	800b9d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_OCCS;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	6812      	ldr	r2, [r2, #0]
 800ce40:	6892      	ldr	r2, [r2, #8]
 800ce42:	2108      	movs	r1, #8
 800ce44:	430a      	orrs	r2, r1
 800ce46:	609a      	str	r2, [r3, #8]
    break;
 800ce48:	46c0      	nop			; (mov r8, r8)
  }
  
  switch (Channel)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2b04      	cmp	r3, #4
 800ce4e:	d01e      	beq.n	800ce8e <HAL_TIM_ConfigOCrefClear+0xdc>
 800ce50:	d802      	bhi.n	800ce58 <HAL_TIM_ConfigOCrefClear+0xa6>
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d005      	beq.n	800ce62 <HAL_TIM_ConfigOCrefClear+0xb0>
          htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
        }
      }    
    break;
    default:  
    break;
 800ce56:	e05e      	b.n	800cf16 <HAL_TIM_ConfigOCrefClear+0x164>
  switch (Channel)
 800ce58:	2b08      	cmp	r3, #8
 800ce5a:	d02f      	beq.n	800cebc <HAL_TIM_ConfigOCrefClear+0x10a>
 800ce5c:	2b0c      	cmp	r3, #12
 800ce5e:	d043      	beq.n	800cee8 <HAL_TIM_ConfigOCrefClear+0x136>
    break;
 800ce60:	e059      	b.n	800cf16 <HAL_TIM_ConfigOCrefClear+0x164>
        if(sClearInputConfig->ClearInputState != RESET)
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d008      	beq.n	800ce7c <HAL_TIM_ConfigOCrefClear+0xca>
          htim->Instance->CCMR1 |= TIM_CCMR1_OC1CE;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	6812      	ldr	r2, [r2, #0]
 800ce72:	6992      	ldr	r2, [r2, #24]
 800ce74:	2180      	movs	r1, #128	; 0x80
 800ce76:	430a      	orrs	r2, r1
 800ce78:	619a      	str	r2, [r3, #24]
      break;
 800ce7a:	e04c      	b.n	800cf16 <HAL_TIM_ConfigOCrefClear+0x164>
          htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1CE;      
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	6812      	ldr	r2, [r2, #0]
 800ce84:	6992      	ldr	r2, [r2, #24]
 800ce86:	2180      	movs	r1, #128	; 0x80
 800ce88:	438a      	bics	r2, r1
 800ce8a:	619a      	str	r2, [r3, #24]
      break;
 800ce8c:	e043      	b.n	800cf16 <HAL_TIM_ConfigOCrefClear+0x164>
        if(sClearInputConfig->ClearInputState != RESET)
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d009      	beq.n	800ceaa <HAL_TIM_ConfigOCrefClear+0xf8>
          htim->Instance->CCMR1 |= TIM_CCMR1_OC2CE;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	6812      	ldr	r2, [r2, #0]
 800ce9e:	6992      	ldr	r2, [r2, #24]
 800cea0:	2180      	movs	r1, #128	; 0x80
 800cea2:	0209      	lsls	r1, r1, #8
 800cea4:	430a      	orrs	r2, r1
 800cea6:	619a      	str	r2, [r3, #24]
    break;
 800cea8:	e035      	b.n	800cf16 <HAL_TIM_ConfigOCrefClear+0x164>
          htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2CE;      
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	6812      	ldr	r2, [r2, #0]
 800ceb2:	6992      	ldr	r2, [r2, #24]
 800ceb4:	491f      	ldr	r1, [pc, #124]	; (800cf34 <HAL_TIM_ConfigOCrefClear+0x182>)
 800ceb6:	400a      	ands	r2, r1
 800ceb8:	619a      	str	r2, [r3, #24]
    break;
 800ceba:	e02c      	b.n	800cf16 <HAL_TIM_ConfigOCrefClear+0x164>
        if(sClearInputConfig->ClearInputState != RESET)
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d008      	beq.n	800ced6 <HAL_TIM_ConfigOCrefClear+0x124>
          htim->Instance->CCMR2 |= TIM_CCMR2_OC3CE;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	6812      	ldr	r2, [r2, #0]
 800cecc:	69d2      	ldr	r2, [r2, #28]
 800cece:	2180      	movs	r1, #128	; 0x80
 800ced0:	430a      	orrs	r2, r1
 800ced2:	61da      	str	r2, [r3, #28]
    break;
 800ced4:	e01f      	b.n	800cf16 <HAL_TIM_ConfigOCrefClear+0x164>
          htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3CE;      
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	6812      	ldr	r2, [r2, #0]
 800cede:	69d2      	ldr	r2, [r2, #28]
 800cee0:	2180      	movs	r1, #128	; 0x80
 800cee2:	438a      	bics	r2, r1
 800cee4:	61da      	str	r2, [r3, #28]
    break;
 800cee6:	e016      	b.n	800cf16 <HAL_TIM_ConfigOCrefClear+0x164>
        if(sClearInputConfig->ClearInputState != RESET)
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d009      	beq.n	800cf04 <HAL_TIM_ConfigOCrefClear+0x152>
          htim->Instance->CCMR2 |= TIM_CCMR2_OC4CE;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	6812      	ldr	r2, [r2, #0]
 800cef8:	69d2      	ldr	r2, [r2, #28]
 800cefa:	2180      	movs	r1, #128	; 0x80
 800cefc:	0209      	lsls	r1, r1, #8
 800cefe:	430a      	orrs	r2, r1
 800cf00:	61da      	str	r2, [r3, #28]
    break;
 800cf02:	e007      	b.n	800cf14 <HAL_TIM_ConfigOCrefClear+0x162>
          htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4CE;      
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	6812      	ldr	r2, [r2, #0]
 800cf0c:	69d2      	ldr	r2, [r2, #28]
 800cf0e:	4909      	ldr	r1, [pc, #36]	; (800cf34 <HAL_TIM_ConfigOCrefClear+0x182>)
 800cf10:	400a      	ands	r2, r1
 800cf12:	61da      	str	r2, [r3, #28]
    break;
 800cf14:	46c0      	nop			; (mov r8, r8)
  } 

  htim->State = HAL_TIM_STATE_READY;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	223d      	movs	r2, #61	; 0x3d
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	5499      	strb	r1, [r3, r2]
  
  __HAL_UNLOCK(htim);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	223c      	movs	r2, #60	; 0x3c
 800cf22:	2100      	movs	r1, #0
 800cf24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;  
 800cf26:	2300      	movs	r3, #0
}  
 800cf28:	0018      	movs	r0, r3
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	b006      	add	sp, #24
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	ffff00ff 	.word	0xffff00ff
 800cf34:	ffff7fff 	.word	0xffff7fff

0800cf38 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800cf40:	46c0      	nop			; (mov r8, r8)
 800cf42:	46bd      	mov	sp, r7
 800cf44:	b002      	add	sp, #8
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf50:	46c0      	nop			; (mov r8, r8)
 800cf52:	46bd      	mov	sp, r7
 800cf54:	b002      	add	sp, #8
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf64:	60fb      	str	r3, [r7, #12]

  htim->State= HAL_TIM_STATE_READY;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	223d      	movs	r2, #61	; 0x3d
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	5499      	strb	r1, [r3, r2]

  HAL_TIMEx_CommutationCallback(htim);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	0018      	movs	r0, r3
 800cf72:	f7ff ffe1 	bl	800cf38 <HAL_TIMEx_CommutationCallback>
}
 800cf76:	46c0      	nop			; (mov r8, r8)
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	b004      	add	sp, #16
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface state
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b082      	sub	sp, #8
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
  return htim->State;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	223d      	movs	r2, #61	; 0x3d
 800cf8a:	5c9b      	ldrb	r3, [r3, r2]
 800cf8c:	b2db      	uxtb	r3, r3
}
 800cf8e:	0018      	movs	r0, r3
 800cf90:	46bd      	mov	sp, r7
 800cf92:	b002      	add	sp, #8
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b086      	sub	sp, #24
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	60f8      	str	r0, [r7, #12]
 800cf9e:	60b9      	str	r1, [r7, #8]
 800cfa0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 800cfa6:	2204      	movs	r2, #4
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	409a      	lsls	r2, r3
 800cfac:	0013      	movs	r3, r2
 800cfae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	43d2      	mvns	r2, r2
 800cfb8:	401a      	ands	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	6a1a      	ldr	r2, [r3, #32]
 800cfc2:	6879      	ldr	r1, [r7, #4]
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	4099      	lsls	r1, r3
 800cfc8:	000b      	movs	r3, r1
 800cfca:	431a      	orrs	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	621a      	str	r2, [r3, #32]
}
 800cfd0:	46c0      	nop			; (mov r8, r8)
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	b006      	add	sp, #24
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	000a      	movs	r2, r1
 800cfe2:	1cfb      	adds	r3, r7, #3
 800cfe4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 800cfe6:	230f      	movs	r3, #15
 800cfe8:	18fb      	adds	r3, r7, r3
 800cfea:	2200      	movs	r2, #0
 800cfec:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	7c1b      	ldrb	r3, [r3, #16]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10e      	bne.n	800d014 <USBD_CDC_Init+0x3c>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800cff6:	2380      	movs	r3, #128	; 0x80
 800cff8:	009b      	lsls	r3, r3, #2
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	2202      	movs	r2, #2
 800cffe:	2181      	movs	r1, #129	; 0x81
 800d000:	f002 fa93 	bl	800f52a <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800d004:	2380      	movs	r3, #128	; 0x80
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	2202      	movs	r2, #2
 800d00c:	2101      	movs	r1, #1
 800d00e:	f002 fa8c 	bl	800f52a <USBD_LL_OpenEP>
 800d012:	e00b      	b.n	800d02c <USBD_CDC_Init+0x54>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	2340      	movs	r3, #64	; 0x40
 800d018:	2202      	movs	r2, #2
 800d01a:	2181      	movs	r1, #129	; 0x81
 800d01c:	f002 fa85 	bl	800f52a <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	2340      	movs	r3, #64	; 0x40
 800d024:	2202      	movs	r2, #2
 800d026:	2101      	movs	r1, #1
 800d028:	f002 fa7f 	bl	800f52a <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	2308      	movs	r3, #8
 800d030:	2203      	movs	r2, #3
 800d032:	2182      	movs	r1, #130	; 0x82
 800d034:	f002 fa79 	bl	800f52a <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800d038:	2387      	movs	r3, #135	; 0x87
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	0018      	movs	r0, r3
 800d03e:	f002 fd43 	bl	800fac8 <USBD_static_malloc>
 800d042:	0001      	movs	r1, r0
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	2386      	movs	r3, #134	; 0x86
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	50d1      	str	r1, [r2, r3]
  
  if(pdev->pClassData == NULL)
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	2386      	movs	r3, #134	; 0x86
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	58d3      	ldr	r3, [r2, r3]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d104      	bne.n	800d062 <USBD_CDC_Init+0x8a>
  {
    ret = 1; 
 800d058:	230f      	movs	r3, #15
 800d05a:	18fb      	adds	r3, r7, r3
 800d05c:	2201      	movs	r2, #1
 800d05e:	701a      	strb	r2, [r3, #0]
 800d060:	e02c      	b.n	800d0bc <USBD_CDC_Init+0xe4>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	2386      	movs	r3, #134	; 0x86
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	58d3      	ldr	r3, [r2, r3]
 800d06a:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	2387      	movs	r3, #135	; 0x87
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	58d3      	ldr	r3, [r2, r3]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	2385      	movs	r3, #133	; 0x85
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	2100      	movs	r1, #0
 800d080:	50d1      	str	r1, [r2, r3]
    hcdc->RxState =0;
 800d082:	68ba      	ldr	r2, [r7, #8]
 800d084:	2386      	movs	r3, #134	; 0x86
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	2100      	movs	r1, #0
 800d08a:	50d1      	str	r1, [r2, r3]
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	7c1b      	ldrb	r3, [r3, #16]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d10a      	bne.n	800d0aa <USBD_CDC_Init+0xd2>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	2381      	movs	r3, #129	; 0x81
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	58d2      	ldr	r2, [r2, r3]
 800d09c:	2380      	movs	r3, #128	; 0x80
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	2101      	movs	r1, #1
 800d0a4:	f002 fc97 	bl	800f9d6 <USBD_LL_PrepareReceive>
 800d0a8:	e008      	b.n	800d0bc <USBD_CDC_Init+0xe4>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	2381      	movs	r3, #129	; 0x81
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	58d2      	ldr	r2, [r2, r3]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	2340      	movs	r3, #64	; 0x40
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	f002 fc8d 	bl	800f9d6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 800d0bc:	230f      	movs	r3, #15
 800d0be:	18fb      	adds	r3, r7, r3
 800d0c0:	781b      	ldrb	r3, [r3, #0]
}
 800d0c2:	0018      	movs	r0, r3
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	b004      	add	sp, #16
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b084      	sub	sp, #16
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	000a      	movs	r2, r1
 800d0d4:	1cfb      	adds	r3, r7, #3
 800d0d6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 800d0d8:	230f      	movs	r3, #15
 800d0da:	18fb      	adds	r3, r7, r3
 800d0dc:	2200      	movs	r2, #0
 800d0de:	701a      	strb	r2, [r3, #0]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2181      	movs	r1, #129	; 0x81
 800d0e4:	0018      	movs	r0, r3
 800d0e6:	f002 fa77 	bl	800f5d8 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2101      	movs	r1, #1
 800d0ee:	0018      	movs	r0, r3
 800d0f0:	f002 fa72 	bl	800f5d8 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2182      	movs	r1, #130	; 0x82
 800d0f8:	0018      	movs	r0, r3
 800d0fa:	f002 fa6d 	bl	800f5d8 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	2386      	movs	r3, #134	; 0x86
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	58d3      	ldr	r3, [r2, r3]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d011      	beq.n	800d12e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	2387      	movs	r3, #135	; 0x87
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	58d3      	ldr	r3, [r2, r3]
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	2386      	movs	r3, #134	; 0x86
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	58d3      	ldr	r3, [r2, r3]
 800d11e:	0018      	movs	r0, r3
 800d120:	f002 fcde 	bl	800fae0 <USBD_static_free>
    pdev->pClassData = NULL;
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	2386      	movs	r3, #134	; 0x86
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	2100      	movs	r1, #0
 800d12c:	50d1      	str	r1, [r2, r3]
  }
  
  return ret;
 800d12e:	230f      	movs	r3, #15
 800d130:	18fb      	adds	r3, r7, r3
 800d132:	781b      	ldrb	r3, [r3, #0]
}
 800d134:	0018      	movs	r0, r3
 800d136:	46bd      	mov	sp, r7
 800d138:	b004      	add	sp, #16
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	2386      	movs	r3, #134	; 0x86
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	58d3      	ldr	r3, [r2, r3]
 800d14e:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	001a      	movs	r2, r3
 800d156:	2360      	movs	r3, #96	; 0x60
 800d158:	4013      	ands	r3, r2
 800d15a:	d03d      	beq.n	800d1d8 <USBD_CDC_Setup+0x9c>
 800d15c:	2b20      	cmp	r3, #32
 800d15e:	d000      	beq.n	800d162 <USBD_CDC_Setup+0x26>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800d160:	e046      	b.n	800d1f0 <USBD_CDC_Setup+0xb4>
    if (req->wLength)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	88db      	ldrh	r3, [r3, #6]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d02b      	beq.n	800d1c2 <USBD_CDC_Setup+0x86>
      if (req->bmRequest & 0x80)
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	b25b      	sxtb	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	da12      	bge.n	800d19a <USBD_CDC_Setup+0x5e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	2387      	movs	r3, #135	; 0x87
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	58d3      	ldr	r3, [r2, r3]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800d182:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d184:	683a      	ldr	r2, [r7, #0]
 800d186:	88d2      	ldrh	r2, [r2, #6]
 800d188:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 800d18a:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	88da      	ldrh	r2, [r3, #6]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	0018      	movs	r0, r3
 800d194:	f001 f9c0 	bl	800e518 <USBD_CtlSendData>
    break;
 800d198:	e02b      	b.n	800d1f2 <USBD_CDC_Setup+0xb6>
        hcdc->CmdOpCode = req->bRequest;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	7859      	ldrb	r1, [r3, #1]
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	2380      	movs	r3, #128	; 0x80
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = req->wLength;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	88db      	ldrh	r3, [r3, #6]
 800d1aa:	b2d9      	uxtb	r1, r3
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	4a13      	ldr	r2, [pc, #76]	; (800d1fc <USBD_CDC_Setup+0xc0>)
 800d1b0:	5499      	strb	r1, [r3, r2]
                           (uint8_t *)hcdc->data,
 800d1b2:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	88da      	ldrh	r2, [r3, #6]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	0018      	movs	r0, r3
 800d1bc:	f001 f9df 	bl	800e57e <USBD_CtlPrepareRx>
    break;
 800d1c0:	e017      	b.n	800d1f2 <USBD_CDC_Setup+0xb6>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	2387      	movs	r3, #135	; 0x87
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	58d3      	ldr	r3, [r2, r3]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	7850      	ldrb	r0, [r2, #1]
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	4798      	blx	r3
    break;
 800d1d6:	e00c      	b.n	800d1f2 <USBD_CDC_Setup+0xb6>
    switch (req->bRequest)
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	785b      	ldrb	r3, [r3, #1]
 800d1dc:	2b0a      	cmp	r3, #10
 800d1de:	d106      	bne.n	800d1ee <USBD_CDC_Setup+0xb2>
      USBD_CtlSendData (pdev,
 800d1e0:	4907      	ldr	r1, [pc, #28]	; (800d200 <USBD_CDC_Setup+0xc4>)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	0018      	movs	r0, r3
 800d1e8:	f001 f996 	bl	800e518 <USBD_CtlSendData>
      break;
 800d1ec:	e000      	b.n	800d1f0 <USBD_CDC_Setup+0xb4>
      break;
 800d1ee:	46c0      	nop			; (mov r8, r8)
    break;
 800d1f0:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	0018      	movs	r0, r3
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	b004      	add	sp, #16
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	00000201 	.word	0x00000201
 800d200:	20000174 	.word	0x20000174

0800d204 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	000a      	movs	r2, r1
 800d20e:	1cfb      	adds	r3, r7, #3
 800d210:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	2386      	movs	r3, #134	; 0x86
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	58d3      	ldr	r3, [r2, r3]
 800d21a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	2386      	movs	r3, #134	; 0x86
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	58d3      	ldr	r3, [r2, r3]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d006      	beq.n	800d236 <USBD_CDC_DataIn+0x32>
  {
    
    hcdc->TxState = 0;
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	2385      	movs	r3, #133	; 0x85
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	2100      	movs	r1, #0
 800d230:	50d1      	str	r1, [r2, r3]

    return USBD_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	e000      	b.n	800d238 <USBD_CDC_DataIn+0x34>
  }
  else
  {
    return USBD_FAIL;
 800d236:	2302      	movs	r3, #2
  }
}
 800d238:	0018      	movs	r0, r3
 800d23a:	46bd      	mov	sp, r7
 800d23c:	b004      	add	sp, #16
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	000a      	movs	r2, r1
 800d24a:	1cfb      	adds	r3, r7, #3
 800d24c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	2386      	movs	r3, #134	; 0x86
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	58d3      	ldr	r3, [r2, r3]
 800d256:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800d258:	1cfb      	adds	r3, r7, #3
 800d25a:	781a      	ldrb	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	0011      	movs	r1, r2
 800d260:	0018      	movs	r0, r3
 800d262:	f002 fc0f 	bl	800fa84 <USBD_LL_GetRxDataSize>
 800d266:	0001      	movs	r1, r0
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	2383      	movs	r3, #131	; 0x83
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	50d1      	str	r1, [r2, r3]
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	2386      	movs	r3, #134	; 0x86
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	58d3      	ldr	r3, [r2, r3]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d011      	beq.n	800d2a0 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	2387      	movs	r3, #135	; 0x87
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	58d3      	ldr	r3, [r2, r3]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	68f9      	ldr	r1, [r7, #12]
 800d288:	2281      	movs	r2, #129	; 0x81
 800d28a:	0092      	lsls	r2, r2, #2
 800d28c:	5888      	ldr	r0, [r1, r2]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	2183      	movs	r1, #131	; 0x83
 800d292:	0089      	lsls	r1, r1, #2
 800d294:	468c      	mov	ip, r1
 800d296:	4462      	add	r2, ip
 800d298:	0011      	movs	r1, r2
 800d29a:	4798      	blx	r3

    return USBD_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	e000      	b.n	800d2a2 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800d2a0:	2302      	movs	r3, #2
  }
}
 800d2a2:	0018      	movs	r0, r3
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	b004      	add	sp, #16
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800d2aa:	b590      	push	{r4, r7, lr}
 800d2ac:	b085      	sub	sp, #20
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	2386      	movs	r3, #134	; 0x86
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	58d3      	ldr	r3, [r2, r3]
 800d2ba:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	2387      	movs	r3, #135	; 0x87
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	58d3      	ldr	r3, [r2, r3]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d01a      	beq.n	800d2fe <USBD_CDC_EP0_RxReady+0x54>
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	2380      	movs	r3, #128	; 0x80
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	5cd3      	ldrb	r3, [r2, r3]
 800d2d0:	2bff      	cmp	r3, #255	; 0xff
 800d2d2:	d014      	beq.n	800d2fe <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	2387      	movs	r3, #135	; 0x87
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	58d3      	ldr	r3, [r2, r3]
 800d2dc:	689b      	ldr	r3, [r3, #8]
 800d2de:	68f9      	ldr	r1, [r7, #12]
 800d2e0:	2280      	movs	r2, #128	; 0x80
 800d2e2:	0092      	lsls	r2, r2, #2
 800d2e4:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)hcdc->data,
 800d2e6:	68fc      	ldr	r4, [r7, #12]
                                                      hcdc->CmdLength);
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	4907      	ldr	r1, [pc, #28]	; (800d308 <USBD_CDC_EP0_RxReady+0x5e>)
 800d2ec:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d2ee:	b292      	uxth	r2, r2
 800d2f0:	0021      	movs	r1, r4
 800d2f2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	2380      	movs	r3, #128	; 0x80
 800d2f8:	009b      	lsls	r3, r3, #2
 800d2fa:	21ff      	movs	r1, #255	; 0xff
 800d2fc:	54d1      	strb	r1, [r2, r3]
      
  }
  return USBD_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	0018      	movs	r0, r3
 800d302:	46bd      	mov	sp, r7
 800d304:	b005      	add	sp, #20
 800d306:	bd90      	pop	{r4, r7, pc}
 800d308:	00000201 	.word	0x00000201

0800d30c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2243      	movs	r2, #67	; 0x43
 800d318:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d31a:	4b02      	ldr	r3, [pc, #8]	; (800d324 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800d31c:	0018      	movs	r0, r3
 800d31e:	46bd      	mov	sp, r7
 800d320:	b002      	add	sp, #8
 800d322:	bd80      	pop	{r7, pc}
 800d324:	20000088 	.word	0x20000088

0800d328 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2243      	movs	r2, #67	; 0x43
 800d334:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d336:	4b02      	ldr	r3, [pc, #8]	; (800d340 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800d338:	0018      	movs	r0, r3
 800d33a:	46bd      	mov	sp, r7
 800d33c:	b002      	add	sp, #8
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	20000044 	.word	0x20000044

0800d344 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2243      	movs	r2, #67	; 0x43
 800d350:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d352:	4b02      	ldr	r3, [pc, #8]	; (800d35c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800d354:	0018      	movs	r0, r3
 800d356:	46bd      	mov	sp, r7
 800d358:	b002      	add	sp, #8
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	200000cc 	.word	0x200000cc

0800d360 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	220a      	movs	r2, #10
 800d36c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d36e:	4b02      	ldr	r3, [pc, #8]	; (800d378 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800d370:	0018      	movs	r0, r3
 800d372:	46bd      	mov	sp, r7
 800d374:	b002      	add	sp, #8
 800d376:	bd80      	pop	{r7, pc}
 800d378:	20000000 	.word	0x20000000

0800d37c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d386:	230f      	movs	r3, #15
 800d388:	18fb      	adds	r3, r7, r3
 800d38a:	2202      	movs	r2, #2
 800d38c:	701a      	strb	r2, [r3, #0]
  
  if(fops != NULL)
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d008      	beq.n	800d3a6 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	2387      	movs	r3, #135	; 0x87
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	6839      	ldr	r1, [r7, #0]
 800d39c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;    
 800d39e:	230f      	movs	r3, #15
 800d3a0:	18fb      	adds	r3, r7, r3
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800d3a6:	230f      	movs	r3, #15
 800d3a8:	18fb      	adds	r3, r7, r3
 800d3aa:	781b      	ldrb	r3, [r3, #0]
}
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	b004      	add	sp, #16
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	1dbb      	adds	r3, r7, #6
 800d3c0:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	2386      	movs	r3, #134	; 0x86
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	58d3      	ldr	r3, [r2, r3]
 800d3ca:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 800d3cc:	697a      	ldr	r2, [r7, #20]
 800d3ce:	2382      	movs	r3, #130	; 0x82
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;  
 800d3d6:	1dbb      	adds	r3, r7, #6
 800d3d8:	8819      	ldrh	r1, [r3, #0]
 800d3da:	697a      	ldr	r2, [r7, #20]
 800d3dc:	2384      	movs	r3, #132	; 0x84
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;  
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	0018      	movs	r0, r3
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	b006      	add	sp, #24
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	2386      	movs	r3, #134	; 0x86
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	58d3      	ldr	r3, [r2, r3]
 800d3fe:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	2381      	movs	r3, #129	; 0x81
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	50d1      	str	r1, [r2, r3]
  
  return USBD_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	0018      	movs	r0, r3
 800d40e:	46bd      	mov	sp, r7
 800d410:	b004      	add	sp, #16
 800d412:	bd80      	pop	{r7, pc}

0800d414 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	2386      	movs	r3, #134	; 0x86
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	58d3      	ldr	r3, [r2, r3]
 800d424:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	2386      	movs	r3, #134	; 0x86
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	58d3      	ldr	r3, [r2, r3]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d01c      	beq.n	800d46c <USBD_CDC_TransmitPacket+0x58>
  {
    if(hcdc->TxState == 0)
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	2385      	movs	r3, #133	; 0x85
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	58d3      	ldr	r3, [r2, r3]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d114      	bne.n	800d468 <USBD_CDC_TransmitPacket+0x54>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	2385      	movs	r3, #133	; 0x85
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	2101      	movs	r1, #1
 800d446:	50d1      	str	r1, [r2, r3]
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	2382      	movs	r3, #130	; 0x82
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	58d1      	ldr	r1, [r2, r3]
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	2384      	movs	r3, #132	; 0x84
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev,
 800d458:	b29b      	uxth	r3, r3
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	000a      	movs	r2, r1
 800d45e:	2181      	movs	r1, #129	; 0x81
 800d460:	f002 fa62 	bl	800f928 <USBD_LL_Transmit>
      
      return USBD_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	e002      	b.n	800d46e <USBD_CDC_TransmitPacket+0x5a>
    }
    else
    {
      return USBD_BUSY;
 800d468:	2301      	movs	r3, #1
 800d46a:	e000      	b.n	800d46e <USBD_CDC_TransmitPacket+0x5a>
    }
  }
  else
  {
    return USBD_FAIL;
 800d46c:	2302      	movs	r3, #2
  }
}
 800d46e:	0018      	movs	r0, r3
 800d470:	46bd      	mov	sp, r7
 800d472:	b004      	add	sp, #16
 800d474:	bd80      	pop	{r7, pc}

0800d476 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800d476:	b580      	push	{r7, lr}
 800d478:	b084      	sub	sp, #16
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	2386      	movs	r3, #134	; 0x86
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	58d3      	ldr	r3, [r2, r3]
 800d486:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d488:	687a      	ldr	r2, [r7, #4]
 800d48a:	2386      	movs	r3, #134	; 0x86
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	58d3      	ldr	r3, [r2, r3]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d019      	beq.n	800d4c8 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	7c1b      	ldrb	r3, [r3, #16]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10a      	bne.n	800d4b2 <USBD_CDC_ReceivePacket+0x3c>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	2381      	movs	r3, #129	; 0x81
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	58d2      	ldr	r2, [r2, r3]
 800d4a4:	2380      	movs	r3, #128	; 0x80
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	2101      	movs	r1, #1
 800d4ac:	f002 fa93 	bl	800f9d6 <USBD_LL_PrepareReceive>
 800d4b0:	e008      	b.n	800d4c4 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	2381      	movs	r3, #129	; 0x81
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	58d2      	ldr	r2, [r2, r3]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	2340      	movs	r3, #64	; 0x40
 800d4be:	2101      	movs	r1, #1
 800d4c0:	f002 fa89 	bl	800f9d6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	e000      	b.n	800d4ca <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800d4c8:	2302      	movs	r3, #2
  }
}
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	b004      	add	sp, #16
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	46c0      	nop			; (mov r8, r8)

0800d4d4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	1dfb      	adds	r3, r7, #7
 800d4e0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d101      	bne.n	800d4ec <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	e020      	b.n	800d52e <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	2385      	movs	r3, #133	; 0x85
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	58d3      	ldr	r3, [r2, r3]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d004      	beq.n	800d502 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	2385      	movs	r3, #133	; 0x85
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	2100      	movs	r1, #0
 800d500:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d004      	beq.n	800d512 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	2384      	movs	r3, #132	; 0x84
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	23fe      	movs	r3, #254	; 0xfe
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	2101      	movs	r1, #1
 800d51a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	1dfa      	adds	r2, r7, #7
 800d520:	7812      	ldrb	r2, [r2, #0]
 800d522:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	0018      	movs	r0, r3
 800d528:	f001 fec2 	bl	800f2b0 <USBD_LL_Init>
  
  return USBD_OK; 
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	0018      	movs	r0, r3
 800d530:	46bd      	mov	sp, r7
 800d532:	b004      	add	sp, #16
 800d534:	bd80      	pop	{r7, pc}

0800d536 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b082      	sub	sp, #8
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	23fe      	movs	r3, #254	; 0xfe
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	2101      	movs	r1, #1
 800d546:	54d1      	strb	r1, [r2, r3]
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	2385      	movs	r3, #133	; 0x85
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	58d3      	ldr	r3, [r2, r3]
 800d550:	685a      	ldr	r2, [r3, #4]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	b2d9      	uxtb	r1, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	0018      	movs	r0, r3
 800d55c:	4790      	blx	r2
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	0018      	movs	r0, r3
 800d562:	f001 ff9d 	bl	800f4a0 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	0018      	movs	r0, r3
 800d56a:	f001 ff0f 	bl	800f38c <USBD_LL_DeInit>
  
  return USBD_OK;
 800d56e:	2300      	movs	r3, #0
}
 800d570:	0018      	movs	r0, r3
 800d572:	46bd      	mov	sp, r7
 800d574:	b002      	add	sp, #8
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d582:	230f      	movs	r3, #15
 800d584:	18fb      	adds	r3, r7, r3
 800d586:	2200      	movs	r2, #0
 800d588:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d009      	beq.n	800d5a4 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	2385      	movs	r3, #133	; 0x85
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800d59a:	230f      	movs	r3, #15
 800d59c:	18fb      	adds	r3, r7, r3
 800d59e:	2200      	movs	r2, #0
 800d5a0:	701a      	strb	r2, [r3, #0]
 800d5a2:	e003      	b.n	800d5ac <USBD_RegisterClass+0x34>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800d5a4:	230f      	movs	r3, #15
 800d5a6:	18fb      	adds	r3, r7, r3
 800d5a8:	2202      	movs	r2, #2
 800d5aa:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 800d5ac:	230f      	movs	r3, #15
 800d5ae:	18fb      	adds	r3, r7, r3
 800d5b0:	781b      	ldrb	r3, [r3, #0]
}
 800d5b2:	0018      	movs	r0, r3
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	b004      	add	sp, #16
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b082      	sub	sp, #8
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	0018      	movs	r0, r3
 800d5c6:	f001 ff26 	bl	800f416 <USBD_LL_Start>
  
  return USBD_OK;  
 800d5ca:	2300      	movs	r3, #0
}
 800d5cc:	0018      	movs	r0, r3
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	b002      	add	sp, #8
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	2385      	movs	r3, #133	; 0x85
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	58d3      	ldr	r3, [r2, r3]
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	b2d9      	uxtb	r1, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	0018      	movs	r0, r3
 800d5f0:	4790      	blx	r2

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	0018      	movs	r0, r3
 800d5f6:	f001 ff53 	bl	800f4a0 <USBD_LL_Stop>
  
  return USBD_OK;  
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	46bd      	mov	sp, r7
 800d600:	b002      	add	sp, #8
 800d602:	bd80      	pop	{r7, pc}

0800d604 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	0018      	movs	r0, r3
 800d610:	46bd      	mov	sp, r7
 800d612:	b002      	add	sp, #8
 800d614:	bd80      	pop	{r7, pc}

0800d616 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b084      	sub	sp, #16
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	000a      	movs	r2, r1
 800d620:	1cfb      	adds	r3, r7, #3
 800d622:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d624:	230f      	movs	r3, #15
 800d626:	18fb      	adds	r3, r7, r3
 800d628:	2202      	movs	r2, #2
 800d62a:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	2385      	movs	r3, #133	; 0x85
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	58d3      	ldr	r3, [r2, r3]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00f      	beq.n	800d658 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	2385      	movs	r3, #133	; 0x85
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	58d3      	ldr	r3, [r2, r3]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	1cfa      	adds	r2, r7, #3
 800d644:	7811      	ldrb	r1, [r2, #0]
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	0010      	movs	r0, r2
 800d64a:	4798      	blx	r3
 800d64c:	1e03      	subs	r3, r0, #0
 800d64e:	d103      	bne.n	800d658 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 800d650:	230f      	movs	r3, #15
 800d652:	18fb      	adds	r3, r7, r3
 800d654:	2200      	movs	r2, #0
 800d656:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 800d658:	230f      	movs	r3, #15
 800d65a:	18fb      	adds	r3, r7, r3
 800d65c:	781b      	ldrb	r3, [r3, #0]
}
 800d65e:	0018      	movs	r0, r3
 800d660:	46bd      	mov	sp, r7
 800d662:	b004      	add	sp, #16
 800d664:	bd80      	pop	{r7, pc}

0800d666 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	000a      	movs	r2, r1
 800d670:	1cfb      	adds	r3, r7, #3
 800d672:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	2385      	movs	r3, #133	; 0x85
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	58d3      	ldr	r3, [r2, r3]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	1cfa      	adds	r2, r7, #3
 800d680:	7811      	ldrb	r1, [r2, #0]
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	0010      	movs	r0, r2
 800d686:	4798      	blx	r3
  return USBD_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	0018      	movs	r0, r3
 800d68c:	46bd      	mov	sp, r7
 800d68e:	b002      	add	sp, #8
 800d690:	bd80      	pop	{r7, pc}

0800d692 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2282      	movs	r2, #130	; 0x82
 800d6a0:	0092      	lsls	r2, r2, #2
 800d6a2:	4694      	mov	ip, r2
 800d6a4:	4463      	add	r3, ip
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	0011      	movs	r1, r2
 800d6aa:	0018      	movs	r0, r3
 800d6ac:	f000 fe71 	bl	800e392 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	23fa      	movs	r3, #250	; 0xfa
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a21      	ldr	r2, [pc, #132]	; (800d744 <USBD_LL_SetupStage+0xb2>)
 800d6be:	5a9b      	ldrh	r3, [r3, r2]
 800d6c0:	0019      	movs	r1, r3
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	23fc      	movs	r3, #252	; 0xfc
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	2382      	movs	r3, #130	; 0x82
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	5cd3      	ldrb	r3, [r2, r3]
 800d6d2:	001a      	movs	r2, r3
 800d6d4:	231f      	movs	r3, #31
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d00d      	beq.n	800d6f8 <USBD_LL_SetupStage+0x66>
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d015      	beq.n	800d70c <USBD_LL_SetupStage+0x7a>
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d11d      	bne.n	800d720 <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2282      	movs	r2, #130	; 0x82
 800d6e8:	0092      	lsls	r2, r2, #2
 800d6ea:	189a      	adds	r2, r3, r2
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	0011      	movs	r1, r2
 800d6f0:	0018      	movs	r0, r3
 800d6f2:	f000 f9f9 	bl	800dae8 <USBD_StdDevReq>
    break;
 800d6f6:	e020      	b.n	800d73a <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2282      	movs	r2, #130	; 0x82
 800d6fc:	0092      	lsls	r2, r2, #2
 800d6fe:	189a      	adds	r2, r3, r2
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	0011      	movs	r1, r2
 800d704:	0018      	movs	r0, r3
 800d706:	f000 fa43 	bl	800db90 <USBD_StdItfReq>
    break;
 800d70a:	e016      	b.n	800d73a <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2282      	movs	r2, #130	; 0x82
 800d710:	0092      	lsls	r2, r2, #2
 800d712:	189a      	adds	r2, r3, r2
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	0011      	movs	r1, r2
 800d718:	0018      	movs	r0, r3
 800d71a:	f000 fa78 	bl	800dc0e <USBD_StdEPReq>
    break;
 800d71e:	e00c      	b.n	800d73a <USBD_LL_SetupStage+0xa8>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	2382      	movs	r3, #130	; 0x82
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	5cd3      	ldrb	r3, [r2, r3]
 800d728:	227f      	movs	r2, #127	; 0x7f
 800d72a:	4393      	bics	r3, r2
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	0011      	movs	r1, r2
 800d732:	0018      	movs	r0, r3
 800d734:	f001 ffe6 	bl	800f704 <USBD_LL_StallEP>
    break;
 800d738:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	0018      	movs	r0, r3
 800d73e:	46bd      	mov	sp, r7
 800d740:	b002      	add	sp, #8
 800d742:	bd80      	pop	{r7, pc}
 800d744:	0000020e 	.word	0x0000020e

0800d748 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b086      	sub	sp, #24
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	607a      	str	r2, [r7, #4]
 800d752:	230b      	movs	r3, #11
 800d754:	18fb      	adds	r3, r7, r3
 800d756:	1c0a      	adds	r2, r1, #0
 800d758:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800d75a:	230b      	movs	r3, #11
 800d75c:	18fb      	adds	r3, r7, r3
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d13e      	bne.n	800d7e2 <USBD_LL_DataOutStage+0x9a>
  {
    pep = &pdev->ep_out[0];
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3305      	adds	r3, #5
 800d768:	33ff      	adds	r3, #255	; 0xff
 800d76a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	23fa      	movs	r3, #250	; 0xfa
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	58d3      	ldr	r3, [r2, r3]
 800d774:	2b03      	cmp	r3, #3
 800d776:	d14c      	bne.n	800d812 <USBD_LL_DataOutStage+0xca>
    {
      if(pep->rem_length > pep->maxpacket)
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	689a      	ldr	r2, [r3, #8]
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	429a      	cmp	r2, r3
 800d782:	d914      	bls.n	800d7ae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	689a      	ldr	r2, [r3, #8]
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	1ad2      	subs	r2, r2, r3
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	68da      	ldr	r2, [r3, #12]
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d900      	bls.n	800d7a0 <USBD_LL_DataOutStage+0x58>
 800d79e:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 800d7a0:	b292      	uxth	r2, r2
 800d7a2:	6879      	ldr	r1, [r7, #4]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	0018      	movs	r0, r3
 800d7a8:	f000 ff0d 	bl	800e5c6 <USBD_CtlContinueRx>
 800d7ac:	e031      	b.n	800d812 <USBD_LL_DataOutStage+0xca>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	2385      	movs	r3, #133	; 0x85
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	58d3      	ldr	r3, [r2, r3]
 800d7b6:	691b      	ldr	r3, [r3, #16]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00d      	beq.n	800d7d8 <USBD_LL_DataOutStage+0x90>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	23fe      	movs	r3, #254	; 0xfe
 800d7c0:	005b      	lsls	r3, r3, #1
 800d7c2:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	d107      	bne.n	800d7d8 <USBD_LL_DataOutStage+0x90>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	2385      	movs	r3, #133	; 0x85
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	58d3      	ldr	r3, [r2, r3]
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	0010      	movs	r0, r2
 800d7d6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	0018      	movs	r0, r3
 800d7dc:	f000 ff06 	bl	800e5ec <USBD_CtlSendStatus>
 800d7e0:	e017      	b.n	800d812 <USBD_LL_DataOutStage+0xca>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	2385      	movs	r3, #133	; 0x85
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	58d3      	ldr	r3, [r2, r3]
 800d7ea:	699b      	ldr	r3, [r3, #24]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d010      	beq.n	800d812 <USBD_LL_DataOutStage+0xca>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	23fe      	movs	r3, #254	; 0xfe
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 800d7f8:	2b03      	cmp	r3, #3
 800d7fa:	d10a      	bne.n	800d812 <USBD_LL_DataOutStage+0xca>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 800d7fc:	68fa      	ldr	r2, [r7, #12]
 800d7fe:	2385      	movs	r3, #133	; 0x85
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	58d3      	ldr	r3, [r2, r3]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	220b      	movs	r2, #11
 800d808:	18ba      	adds	r2, r7, r2
 800d80a:	7811      	ldrb	r1, [r2, #0]
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	0010      	movs	r0, r2
 800d810:	4798      	blx	r3
  }  
  return USBD_OK;
 800d812:	2300      	movs	r3, #0
}
 800d814:	0018      	movs	r0, r3
 800d816:	46bd      	mov	sp, r7
 800d818:	b006      	add	sp, #24
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	607a      	str	r2, [r7, #4]
 800d826:	230b      	movs	r3, #11
 800d828:	18fb      	adds	r3, r7, r3
 800d82a:	1c0a      	adds	r2, r1, #0
 800d82c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800d82e:	230b      	movs	r3, #11
 800d830:	18fb      	adds	r3, r7, r3
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d000      	beq.n	800d83a <USBD_LL_DataInStage+0x1e>
 800d838:	e077      	b.n	800d92a <USBD_LL_DataInStage+0x10e>
  {
    pep = &pdev->ep_in[0];
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	3314      	adds	r3, #20
 800d83e:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	23fa      	movs	r3, #250	; 0xfa
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	58d3      	ldr	r3, [r2, r3]
 800d848:	2b02      	cmp	r3, #2
 800d84a:	d15e      	bne.n	800d90a <USBD_LL_DataInStage+0xee>
    {
      if(pep->rem_length > pep->maxpacket)
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	689a      	ldr	r2, [r3, #8]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	429a      	cmp	r2, r3
 800d856:	d915      	bls.n	800d884 <USBD_LL_DataInStage+0x68>
      {
        pep->rem_length -=  pep->maxpacket;
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	689a      	ldr	r2, [r3, #8]
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	1ad2      	subs	r2, r2, r3
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	6879      	ldr	r1, [r7, #4]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	0018      	movs	r0, r3
 800d872:	f000 fe71 	bl	800e558 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	2300      	movs	r3, #0
 800d87a:	2200      	movs	r2, #0
 800d87c:	2100      	movs	r1, #0
 800d87e:	f002 f8aa 	bl	800f9d6 <USBD_LL_PrepareReceive>
 800d882:	e042      	b.n	800d90a <USBD_LL_DataInStage+0xee>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	0019      	movs	r1, r3
 800d88e:	0010      	movs	r0, r2
 800d890:	f002 fcf6 	bl	8010280 <__aeabi_uidivmod>
 800d894:	1e0b      	subs	r3, r1, #0
 800d896:	d11f      	bne.n	800d8d8 <USBD_LL_DataInStage+0xbc>
           (pep->total_length >= pep->maxpacket) &&
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d319      	bcc.n	800d8d8 <USBD_LL_DataInStage+0xbc>
             (pep->total_length < pdev->ep0_data_len ))
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	68f9      	ldr	r1, [r7, #12]
 800d8aa:	23fc      	movs	r3, #252	; 0xfc
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d211      	bcs.n	800d8d8 <USBD_LL_DataInStage+0xbc>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	0018      	movs	r0, r3
 800d8bc:	f000 fe4c 	bl	800e558 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	23fc      	movs	r3, #252	; 0xfc
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	50d1      	str	r1, [r2, r3]
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	f002 f880 	bl	800f9d6 <USBD_LL_PrepareReceive>
 800d8d6:	e018      	b.n	800d90a <USBD_LL_DataInStage+0xee>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	2385      	movs	r3, #133	; 0x85
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	58d3      	ldr	r3, [r2, r3]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00d      	beq.n	800d902 <USBD_LL_DataInStage+0xe6>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	23fe      	movs	r3, #254	; 0xfe
 800d8ea:	005b      	lsls	r3, r3, #1
 800d8ec:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	d107      	bne.n	800d902 <USBD_LL_DataInStage+0xe6>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	2385      	movs	r3, #133	; 0x85
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	58d3      	ldr	r3, [r2, r3]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	0010      	movs	r0, r2
 800d900:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	0018      	movs	r0, r3
 800d906:	f000 fe85 	bl	800e614 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	2380      	movs	r3, #128	; 0x80
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	5cd3      	ldrb	r3, [r2, r3]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d121      	bne.n	800d95a <USBD_LL_DataInStage+0x13e>
    {
      USBD_RunTestMode(pdev); 
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	0018      	movs	r0, r3
 800d91a:	f7ff fe73 	bl	800d604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	2380      	movs	r3, #128	; 0x80
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	2100      	movs	r1, #0
 800d926:	54d1      	strb	r1, [r2, r3]
 800d928:	e017      	b.n	800d95a <USBD_LL_DataInStage+0x13e>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	2385      	movs	r3, #133	; 0x85
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	58d3      	ldr	r3, [r2, r3]
 800d932:	695b      	ldr	r3, [r3, #20]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d010      	beq.n	800d95a <USBD_LL_DataInStage+0x13e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	23fe      	movs	r3, #254	; 0xfe
 800d93c:	005b      	lsls	r3, r3, #1
 800d93e:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 800d940:	2b03      	cmp	r3, #3
 800d942:	d10a      	bne.n	800d95a <USBD_LL_DataInStage+0x13e>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	2385      	movs	r3, #133	; 0x85
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	58d3      	ldr	r3, [r2, r3]
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	220b      	movs	r2, #11
 800d950:	18ba      	adds	r2, r7, r2
 800d952:	7811      	ldrb	r1, [r2, #0]
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	0010      	movs	r0, r2
 800d958:	4798      	blx	r3
  }  
  return USBD_OK;
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	0018      	movs	r0, r3
 800d95e:	46bd      	mov	sp, r7
 800d960:	b006      	add	sp, #24
 800d962:	bd80      	pop	{r7, pc}

0800d964 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	2340      	movs	r3, #64	; 0x40
 800d970:	2200      	movs	r2, #0
 800d972:	2100      	movs	r1, #0
 800d974:	f001 fdd9 	bl	800f52a <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	2388      	movs	r3, #136	; 0x88
 800d97c:	005b      	lsls	r3, r3, #1
 800d97e:	2140      	movs	r1, #64	; 0x40
 800d980:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	2340      	movs	r3, #64	; 0x40
 800d986:	2200      	movs	r2, #0
 800d988:	2180      	movs	r1, #128	; 0x80
 800d98a:	f001 fdce 	bl	800f52a <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2240      	movs	r2, #64	; 0x40
 800d992:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	23fe      	movs	r3, #254	; 0xfe
 800d998:	005b      	lsls	r3, r3, #1
 800d99a:	2101      	movs	r1, #1
 800d99c:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	2386      	movs	r3, #134	; 0x86
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	58d3      	ldr	r3, [r2, r3]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00a      	beq.n	800d9c0 <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	2385      	movs	r3, #133	; 0x85
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	58d3      	ldr	r3, [r2, r3]
 800d9b2:	685a      	ldr	r2, [r3, #4]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	b2d9      	uxtb	r1, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	0018      	movs	r0, r3
 800d9be:	4790      	blx	r2
 
  
  return USBD_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	0018      	movs	r0, r3
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	b002      	add	sp, #8
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b082      	sub	sp, #8
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	000a      	movs	r2, r1
 800d9d4:	1cfb      	adds	r3, r7, #3
 800d9d6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	1cfa      	adds	r2, r7, #3
 800d9dc:	7812      	ldrb	r2, [r2, #0]
 800d9de:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	0018      	movs	r0, r3
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	b002      	add	sp, #8
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b082      	sub	sp, #8
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	23fe      	movs	r3, #254	; 0xfe
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	5cd1      	ldrb	r1, [r2, r3]
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	23fe      	movs	r3, #254	; 0xfe
 800d9fe:	33ff      	adds	r3, #255	; 0xff
 800da00:	54d1      	strb	r1, [r2, r3]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	23fe      	movs	r3, #254	; 0xfe
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	2104      	movs	r1, #4
 800da0a:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 800da0c:	2300      	movs	r3, #0
}
 800da0e:	0018      	movs	r0, r3
 800da10:	46bd      	mov	sp, r7
 800da12:	b002      	add	sp, #8
 800da14:	bd80      	pop	{r7, pc}

0800da16 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800da16:	b580      	push	{r7, lr}
 800da18:	b082      	sub	sp, #8
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	23fe      	movs	r3, #254	; 0xfe
 800da22:	33ff      	adds	r3, #255	; 0xff
 800da24:	5cd1      	ldrb	r1, [r2, r3]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	23fe      	movs	r3, #254	; 0xfe
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	0018      	movs	r0, r3
 800da32:	46bd      	mov	sp, r7
 800da34:	b002      	add	sp, #8
 800da36:	bd80      	pop	{r7, pc}

0800da38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	23fe      	movs	r3, #254	; 0xfe
 800da44:	005b      	lsls	r3, r3, #1
 800da46:	5cd3      	ldrb	r3, [r2, r3]
 800da48:	2b03      	cmp	r3, #3
 800da4a:	d10e      	bne.n	800da6a <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	2385      	movs	r3, #133	; 0x85
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	58d3      	ldr	r3, [r2, r3]
 800da54:	69db      	ldr	r3, [r3, #28]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d007      	beq.n	800da6a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	2385      	movs	r3, #133	; 0x85
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	58d3      	ldr	r3, [r2, r3]
 800da62:	69db      	ldr	r3, [r3, #28]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	0010      	movs	r0, r2
 800da68:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	0018      	movs	r0, r3
 800da6e:	46bd      	mov	sp, r7
 800da70:	b002      	add	sp, #8
 800da72:	bd80      	pop	{r7, pc}

0800da74 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	000a      	movs	r2, r1
 800da7e:	1cfb      	adds	r3, r7, #3
 800da80:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	0018      	movs	r0, r3
 800da86:	46bd      	mov	sp, r7
 800da88:	b002      	add	sp, #8
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	000a      	movs	r2, r1
 800da96:	1cfb      	adds	r3, r7, #3
 800da98:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	0018      	movs	r0, r3
 800da9e:	46bd      	mov	sp, r7
 800daa0:	b002      	add	sp, #8
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	0018      	movs	r0, r3
 800dab0:	46bd      	mov	sp, r7
 800dab2:	b002      	add	sp, #8
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b082      	sub	sp, #8
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	23fe      	movs	r3, #254	; 0xfe
 800dac2:	005b      	lsls	r3, r3, #1
 800dac4:	2101      	movs	r1, #1
 800dac6:	54d1      	strb	r1, [r2, r3]
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	2385      	movs	r3, #133	; 0x85
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	58d3      	ldr	r3, [r2, r3]
 800dad0:	685a      	ldr	r2, [r3, #4]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	b2d9      	uxtb	r1, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	0018      	movs	r0, r3
 800dadc:	4790      	blx	r2
   
  return USBD_OK;
 800dade:	2300      	movs	r3, #0
}
 800dae0:	0018      	movs	r0, r3
 800dae2:	46bd      	mov	sp, r7
 800dae4:	b002      	add	sp, #8
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800daf2:	230f      	movs	r3, #15
 800daf4:	18fb      	adds	r3, r7, r3
 800daf6:	2200      	movs	r2, #0
 800daf8:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	785b      	ldrb	r3, [r3, #1]
 800dafe:	2b09      	cmp	r3, #9
 800db00:	d835      	bhi.n	800db6e <USBD_StdDevReq+0x86>
 800db02:	009a      	lsls	r2, r3, #2
 800db04:	4b21      	ldr	r3, [pc, #132]	; (800db8c <USBD_StdDevReq+0xa4>)
 800db06:	18d3      	adds	r3, r2, r3
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	0011      	movs	r1, r2
 800db12:	0018      	movs	r0, r3
 800db14:	f000 f991 	bl	800de3a <USBD_GetDescriptor>
    break;
 800db18:	e030      	b.n	800db7c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	0011      	movs	r1, r2
 800db20:	0018      	movs	r0, r3
 800db22:	f000 fa95 	bl	800e050 <USBD_SetAddress>
    break;
 800db26:	e029      	b.n	800db7c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800db28:	683a      	ldr	r2, [r7, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	0011      	movs	r1, r2
 800db2e:	0018      	movs	r0, r3
 800db30:	f000 fade 	bl	800e0f0 <USBD_SetConfig>
    break;
 800db34:	e022      	b.n	800db7c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800db36:	683a      	ldr	r2, [r7, #0]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	0011      	movs	r1, r2
 800db3c:	0018      	movs	r0, r3
 800db3e:	f000 fb73 	bl	800e228 <USBD_GetConfig>
    break;
 800db42:	e01b      	b.n	800db7c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	0011      	movs	r1, r2
 800db4a:	0018      	movs	r0, r3
 800db4c:	f000 fba4 	bl	800e298 <USBD_GetStatus>
    break;
 800db50:	e014      	b.n	800db7c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	0011      	movs	r1, r2
 800db58:	0018      	movs	r0, r3
 800db5a:	f000 fbcc 	bl	800e2f6 <USBD_SetFeature>
    break;
 800db5e:	e00d      	b.n	800db7c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800db60:	683a      	ldr	r2, [r7, #0]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	0011      	movs	r1, r2
 800db66:	0018      	movs	r0, r3
 800db68:	f000 fbe4 	bl	800e334 <USBD_ClrFeature>
    break;
 800db6c:	e006      	b.n	800db7c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	0011      	movs	r1, r2
 800db74:	0018      	movs	r0, r3
 800db76:	f000 fc47 	bl	800e408 <USBD_CtlError>
    break;
 800db7a:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 800db7c:	230f      	movs	r3, #15
 800db7e:	18fb      	adds	r3, r7, r3
 800db80:	781b      	ldrb	r3, [r3, #0]
}
 800db82:	0018      	movs	r0, r3
 800db84:	46bd      	mov	sp, r7
 800db86:	b004      	add	sp, #16
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	46c0      	nop			; (mov r8, r8)
 800db8c:	08010398 	.word	0x08010398

0800db90 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 800db9a:	230f      	movs	r3, #15
 800db9c:	18fb      	adds	r3, r7, r3
 800db9e:	2200      	movs	r2, #0
 800dba0:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	23fe      	movs	r3, #254	; 0xfe
 800dba6:	005b      	lsls	r3, r3, #1
 800dba8:	5cd3      	ldrb	r3, [r2, r3]
 800dbaa:	2b03      	cmp	r3, #3
 800dbac:	d122      	bne.n	800dbf4 <USBD_StdItfReq+0x64>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	889b      	ldrh	r3, [r3, #4]
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d816      	bhi.n	800dbe6 <USBD_StdItfReq+0x56>
    {
      pdev->pClass->Setup (pdev, req); 
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	2385      	movs	r3, #133	; 0x85
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	58d3      	ldr	r3, [r2, r3]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	6839      	ldr	r1, [r7, #0]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	0010      	movs	r0, r2
 800dbc8:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	88db      	ldrh	r3, [r3, #6]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d117      	bne.n	800dc02 <USBD_StdItfReq+0x72>
 800dbd2:	230f      	movs	r3, #15
 800dbd4:	18fb      	adds	r3, r7, r3
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d112      	bne.n	800dc02 <USBD_StdItfReq+0x72>
      {
         USBD_CtlSendStatus(pdev);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	0018      	movs	r0, r3
 800dbe0:	f000 fd04 	bl	800e5ec <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 800dbe4:	e00d      	b.n	800dc02 <USBD_StdItfReq+0x72>
       USBD_CtlError(pdev , req);
 800dbe6:	683a      	ldr	r2, [r7, #0]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	0011      	movs	r1, r2
 800dbec:	0018      	movs	r0, r3
 800dbee:	f000 fc0b 	bl	800e408 <USBD_CtlError>
    break;
 800dbf2:	e006      	b.n	800dc02 <USBD_StdItfReq+0x72>
    
  default:
     USBD_CtlError(pdev , req);
 800dbf4:	683a      	ldr	r2, [r7, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	0011      	movs	r1, r2
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	f000 fc04 	bl	800e408 <USBD_CtlError>
    break;
 800dc00:	e000      	b.n	800dc04 <USBD_StdItfReq+0x74>
    break;
 800dc02:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	0018      	movs	r0, r3
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	b004      	add	sp, #16
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b084      	sub	sp, #16
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
 800dc16:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800dc18:	230f      	movs	r3, #15
 800dc1a:	18fb      	adds	r3, r7, r3
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	889a      	ldrh	r2, [r3, #4]
 800dc24:	230e      	movs	r3, #14
 800dc26:	18fb      	adds	r3, r7, r3
 800dc28:	701a      	strb	r2, [r3, #0]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	001a      	movs	r2, r3
 800dc30:	2360      	movs	r3, #96	; 0x60
 800dc32:	4013      	ands	r3, r2
 800dc34:	2b20      	cmp	r3, #32
 800dc36:	d10a      	bne.n	800dc4e <USBD_StdEPReq+0x40>
  {
    pdev->pClass->Setup (pdev, req);
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	2385      	movs	r3, #133	; 0x85
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	58d3      	ldr	r3, [r2, r3]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	0010      	movs	r0, r2
 800dc48:	4798      	blx	r3
    
    return USBD_OK;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	e0f1      	b.n	800de32 <USBD_StdEPReq+0x224>
  }
  
  switch (req->bRequest) 
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	785b      	ldrb	r3, [r3, #1]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d04e      	beq.n	800dcf4 <USBD_StdEPReq+0xe6>
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	d003      	beq.n	800dc62 <USBD_StdEPReq+0x54>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d100      	bne.n	800dc60 <USBD_StdEPReq+0x52>
 800dc5e:	e090      	b.n	800dd82 <USBD_StdEPReq+0x174>
      break;
    }
    break;
    
  default:
    break;
 800dc60:	e0e4      	b.n	800de2c <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	23fe      	movs	r3, #254	; 0xfe
 800dc66:	005b      	lsls	r3, r3, #1
 800dc68:	5cd3      	ldrb	r3, [r2, r3]
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d002      	beq.n	800dc74 <USBD_StdEPReq+0x66>
 800dc6e:	2b03      	cmp	r3, #3
 800dc70:	d013      	beq.n	800dc9a <USBD_StdEPReq+0x8c>
 800dc72:	e036      	b.n	800dce2 <USBD_StdEPReq+0xd4>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800dc74:	230e      	movs	r3, #14
 800dc76:	18fb      	adds	r3, r7, r3
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d038      	beq.n	800dcf0 <USBD_StdEPReq+0xe2>
 800dc7e:	230e      	movs	r3, #14
 800dc80:	18fb      	adds	r3, r7, r3
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	2b80      	cmp	r3, #128	; 0x80
 800dc86:	d033      	beq.n	800dcf0 <USBD_StdEPReq+0xe2>
        USBD_LL_StallEP(pdev , ep_addr);
 800dc88:	230e      	movs	r3, #14
 800dc8a:	18fb      	adds	r3, r7, r3
 800dc8c:	781a      	ldrb	r2, [r3, #0]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	0011      	movs	r1, r2
 800dc92:	0018      	movs	r0, r3
 800dc94:	f001 fd36 	bl	800f704 <USBD_LL_StallEP>
      break;	
 800dc98:	e02a      	b.n	800dcf0 <USBD_StdEPReq+0xe2>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	885b      	ldrh	r3, [r3, #2]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d111      	bne.n	800dcc6 <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800dca2:	230e      	movs	r3, #14
 800dca4:	18fb      	adds	r3, r7, r3
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00c      	beq.n	800dcc6 <USBD_StdEPReq+0xb8>
 800dcac:	230e      	movs	r3, #14
 800dcae:	18fb      	adds	r3, r7, r3
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	2b80      	cmp	r3, #128	; 0x80
 800dcb4:	d007      	beq.n	800dcc6 <USBD_StdEPReq+0xb8>
          USBD_LL_StallEP(pdev , ep_addr);
 800dcb6:	230e      	movs	r3, #14
 800dcb8:	18fb      	adds	r3, r7, r3
 800dcba:	781a      	ldrb	r2, [r3, #0]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	0011      	movs	r1, r2
 800dcc0:	0018      	movs	r0, r3
 800dcc2:	f001 fd1f 	bl	800f704 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	2385      	movs	r3, #133	; 0x85
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	58d3      	ldr	r3, [r2, r3]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	0010      	movs	r0, r2
 800dcd6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	0018      	movs	r0, r3
 800dcdc:	f000 fc86 	bl	800e5ec <USBD_CtlSendStatus>
      break;
 800dce0:	e007      	b.n	800dcf2 <USBD_StdEPReq+0xe4>
      USBD_CtlError(pdev , req);
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	0011      	movs	r1, r2
 800dce8:	0018      	movs	r0, r3
 800dcea:	f000 fb8d 	bl	800e408 <USBD_CtlError>
      break;    
 800dcee:	e000      	b.n	800dcf2 <USBD_StdEPReq+0xe4>
      break;	
 800dcf0:	46c0      	nop			; (mov r8, r8)
    break;
 800dcf2:	e09b      	b.n	800de2c <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	23fe      	movs	r3, #254	; 0xfe
 800dcf8:	005b      	lsls	r3, r3, #1
 800dcfa:	5cd3      	ldrb	r3, [r2, r3]
 800dcfc:	2b02      	cmp	r3, #2
 800dcfe:	d002      	beq.n	800dd06 <USBD_StdEPReq+0xf8>
 800dd00:	2b03      	cmp	r3, #3
 800dd02:	d013      	beq.n	800dd2c <USBD_StdEPReq+0x11e>
 800dd04:	e032      	b.n	800dd6c <USBD_StdEPReq+0x15e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800dd06:	230e      	movs	r3, #14
 800dd08:	18fb      	adds	r3, r7, r3
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d034      	beq.n	800dd7a <USBD_StdEPReq+0x16c>
 800dd10:	230e      	movs	r3, #14
 800dd12:	18fb      	adds	r3, r7, r3
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b80      	cmp	r3, #128	; 0x80
 800dd18:	d02f      	beq.n	800dd7a <USBD_StdEPReq+0x16c>
        USBD_LL_StallEP(pdev , ep_addr);
 800dd1a:	230e      	movs	r3, #14
 800dd1c:	18fb      	adds	r3, r7, r3
 800dd1e:	781a      	ldrb	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	0011      	movs	r1, r2
 800dd24:	0018      	movs	r0, r3
 800dd26:	f001 fced 	bl	800f704 <USBD_LL_StallEP>
      break;	
 800dd2a:	e026      	b.n	800dd7a <USBD_StdEPReq+0x16c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	885b      	ldrh	r3, [r3, #2]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d124      	bne.n	800dd7e <USBD_StdEPReq+0x170>
        if ((ep_addr & 0x7F) != 0x00) 
 800dd34:	230e      	movs	r3, #14
 800dd36:	18fb      	adds	r3, r7, r3
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	227f      	movs	r2, #127	; 0x7f
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	d010      	beq.n	800dd62 <USBD_StdEPReq+0x154>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800dd40:	230e      	movs	r3, #14
 800dd42:	18fb      	adds	r3, r7, r3
 800dd44:	781a      	ldrb	r2, [r3, #0]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	0011      	movs	r1, r2
 800dd4a:	0018      	movs	r0, r3
 800dd4c:	f001 fd25 	bl	800f79a <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	2385      	movs	r3, #133	; 0x85
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	58d3      	ldr	r3, [r2, r3]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	6839      	ldr	r1, [r7, #0]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	0010      	movs	r0, r2
 800dd60:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	0018      	movs	r0, r3
 800dd66:	f000 fc41 	bl	800e5ec <USBD_CtlSendStatus>
      break;
 800dd6a:	e008      	b.n	800dd7e <USBD_StdEPReq+0x170>
      USBD_CtlError(pdev , req);
 800dd6c:	683a      	ldr	r2, [r7, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	0011      	movs	r1, r2
 800dd72:	0018      	movs	r0, r3
 800dd74:	f000 fb48 	bl	800e408 <USBD_CtlError>
      break;    
 800dd78:	e002      	b.n	800dd80 <USBD_StdEPReq+0x172>
      break;	
 800dd7a:	46c0      	nop			; (mov r8, r8)
 800dd7c:	e056      	b.n	800de2c <USBD_StdEPReq+0x21e>
      break;
 800dd7e:	46c0      	nop			; (mov r8, r8)
    break;
 800dd80:	e054      	b.n	800de2c <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	23fe      	movs	r3, #254	; 0xfe
 800dd86:	005b      	lsls	r3, r3, #1
 800dd88:	5cd3      	ldrb	r3, [r2, r3]
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d002      	beq.n	800dd94 <USBD_StdEPReq+0x186>
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d00f      	beq.n	800ddb2 <USBD_StdEPReq+0x1a4>
 800dd92:	e042      	b.n	800de1a <USBD_StdEPReq+0x20c>
      if ((ep_addr & 0x7F) != 0x00) 
 800dd94:	230e      	movs	r3, #14
 800dd96:	18fb      	adds	r3, r7, r3
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	227f      	movs	r2, #127	; 0x7f
 800dd9c:	4013      	ands	r3, r2
 800dd9e:	d043      	beq.n	800de28 <USBD_StdEPReq+0x21a>
        USBD_LL_StallEP(pdev , ep_addr);
 800dda0:	230e      	movs	r3, #14
 800dda2:	18fb      	adds	r3, r7, r3
 800dda4:	781a      	ldrb	r2, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	0011      	movs	r1, r2
 800ddaa:	0018      	movs	r0, r3
 800ddac:	f001 fcaa 	bl	800f704 <USBD_LL_StallEP>
      break;	
 800ddb0:	e03a      	b.n	800de28 <USBD_StdEPReq+0x21a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800ddb2:	230e      	movs	r3, #14
 800ddb4:	18fb      	adds	r3, r7, r3
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	b25b      	sxtb	r3, r3
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	da0a      	bge.n	800ddd4 <USBD_StdEPReq+0x1c6>
 800ddbe:	230e      	movs	r3, #14
 800ddc0:	18fb      	adds	r3, r7, r3
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	227f      	movs	r2, #127	; 0x7f
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	3301      	adds	r3, #1
 800ddca:	011b      	lsls	r3, r3, #4
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	18d3      	adds	r3, r2, r3
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	e009      	b.n	800dde8 <USBD_StdEPReq+0x1da>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800ddd4:	230e      	movs	r3, #14
 800ddd6:	18fb      	adds	r3, r7, r3
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	227f      	movs	r2, #127	; 0x7f
 800dddc:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800ddde:	3310      	adds	r3, #16
 800dde0:	011b      	lsls	r3, r3, #4
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	18d3      	adds	r3, r2, r3
 800dde6:	3304      	adds	r3, #4
 800dde8:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ddea:	230e      	movs	r3, #14
 800ddec:	18fb      	adds	r3, r7, r3
 800ddee:	781a      	ldrb	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	0011      	movs	r1, r2
 800ddf4:	0018      	movs	r0, r3
 800ddf6:	f001 fd1b 	bl	800f830 <USBD_LL_IsStallEP>
 800ddfa:	1e03      	subs	r3, r0, #0
 800ddfc:	d003      	beq.n	800de06 <USBD_StdEPReq+0x1f8>
        pep->status = 0x0001;     
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2201      	movs	r2, #1
 800de02:	601a      	str	r2, [r3, #0]
 800de04:	e002      	b.n	800de0c <USBD_StdEPReq+0x1fe>
        pep->status = 0x0000;  
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	2200      	movs	r2, #0
 800de0a:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800de0c:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2202      	movs	r2, #2
 800de12:	0018      	movs	r0, r3
 800de14:	f000 fb80 	bl	800e518 <USBD_CtlSendData>
      break;
 800de18:	e007      	b.n	800de2a <USBD_StdEPReq+0x21c>
      USBD_CtlError(pdev , req);
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	0011      	movs	r1, r2
 800de20:	0018      	movs	r0, r3
 800de22:	f000 faf1 	bl	800e408 <USBD_CtlError>
      break;
 800de26:	e000      	b.n	800de2a <USBD_StdEPReq+0x21c>
      break;	
 800de28:	46c0      	nop			; (mov r8, r8)
    break;
 800de2a:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 800de2c:	230f      	movs	r3, #15
 800de2e:	18fb      	adds	r3, r7, r3
 800de30:	781b      	ldrb	r3, [r3, #0]
}
 800de32:	0018      	movs	r0, r3
 800de34:	46bd      	mov	sp, r7
 800de36:	b004      	add	sp, #16
 800de38:	bd80      	pop	{r7, pc}

0800de3a <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b084      	sub	sp, #16
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
 800de42:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	885b      	ldrh	r3, [r3, #2]
 800de48:	0a1b      	lsrs	r3, r3, #8
 800de4a:	b29b      	uxth	r3, r3
 800de4c:	2b07      	cmp	r3, #7
 800de4e:	d900      	bls.n	800de52 <USBD_GetDescriptor+0x18>
 800de50:	e0ce      	b.n	800dff0 <USBD_GetDescriptor+0x1b6>
 800de52:	009a      	lsls	r2, r3, #2
 800de54:	4b7c      	ldr	r3, [pc, #496]	; (800e048 <USBD_GetDescriptor+0x20e>)
 800de56:	18d3      	adds	r3, r2, r3
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	2384      	movs	r3, #132	; 0x84
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	58d3      	ldr	r3, [r2, r3]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	7c12      	ldrb	r2, [r2, #16]
 800de6a:	210a      	movs	r1, #10
 800de6c:	1879      	adds	r1, r7, r1
 800de6e:	0010      	movs	r0, r2
 800de70:	4798      	blx	r3
 800de72:	0003      	movs	r3, r0
 800de74:	60fb      	str	r3, [r7, #12]
    break;
 800de76:	e0c2      	b.n	800dffe <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	7c1b      	ldrb	r3, [r3, #16]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10f      	bne.n	800dea0 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	2385      	movs	r3, #133	; 0x85
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	58d3      	ldr	r3, [r2, r3]
 800de88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de8a:	220a      	movs	r2, #10
 800de8c:	18ba      	adds	r2, r7, r2
 800de8e:	0010      	movs	r0, r2
 800de90:	4798      	blx	r3
 800de92:	0003      	movs	r3, r0
 800de94:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	3301      	adds	r3, #1
 800de9a:	2202      	movs	r2, #2
 800de9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800de9e:	e0ae      	b.n	800dffe <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	2385      	movs	r3, #133	; 0x85
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	58d3      	ldr	r3, [r2, r3]
 800dea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deaa:	220a      	movs	r2, #10
 800deac:	18ba      	adds	r2, r7, r2
 800deae:	0010      	movs	r0, r2
 800deb0:	4798      	blx	r3
 800deb2:	0003      	movs	r3, r0
 800deb4:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3301      	adds	r3, #1
 800deba:	2202      	movs	r2, #2
 800debc:	701a      	strb	r2, [r3, #0]
    break;
 800debe:	e09e      	b.n	800dffe <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	885b      	ldrh	r3, [r3, #2]
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b05      	cmp	r3, #5
 800dec8:	d858      	bhi.n	800df7c <USBD_GetDescriptor+0x142>
 800deca:	009a      	lsls	r2, r3, #2
 800decc:	4b5f      	ldr	r3, [pc, #380]	; (800e04c <USBD_GetDescriptor+0x212>)
 800dece:	18d3      	adds	r3, r2, r3
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	2384      	movs	r3, #132	; 0x84
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	58d3      	ldr	r3, [r2, r3]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	7c12      	ldrb	r2, [r2, #16]
 800dee2:	210a      	movs	r1, #10
 800dee4:	1879      	adds	r1, r7, r1
 800dee6:	0010      	movs	r0, r2
 800dee8:	4798      	blx	r3
 800deea:	0003      	movs	r3, r0
 800deec:	60fb      	str	r3, [r7, #12]
      break;
 800deee:	e04c      	b.n	800df8a <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	2384      	movs	r3, #132	; 0x84
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	58d3      	ldr	r3, [r2, r3]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	7c12      	ldrb	r2, [r2, #16]
 800defe:	210a      	movs	r1, #10
 800df00:	1879      	adds	r1, r7, r1
 800df02:	0010      	movs	r0, r2
 800df04:	4798      	blx	r3
 800df06:	0003      	movs	r3, r0
 800df08:	60fb      	str	r3, [r7, #12]
      break;
 800df0a:	e03e      	b.n	800df8a <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	2384      	movs	r3, #132	; 0x84
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	58d3      	ldr	r3, [r2, r3]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	7c12      	ldrb	r2, [r2, #16]
 800df1a:	210a      	movs	r1, #10
 800df1c:	1879      	adds	r1, r7, r1
 800df1e:	0010      	movs	r0, r2
 800df20:	4798      	blx	r3
 800df22:	0003      	movs	r3, r0
 800df24:	60fb      	str	r3, [r7, #12]
      break;
 800df26:	e030      	b.n	800df8a <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	2384      	movs	r3, #132	; 0x84
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	58d3      	ldr	r3, [r2, r3]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	7c12      	ldrb	r2, [r2, #16]
 800df36:	210a      	movs	r1, #10
 800df38:	1879      	adds	r1, r7, r1
 800df3a:	0010      	movs	r0, r2
 800df3c:	4798      	blx	r3
 800df3e:	0003      	movs	r3, r0
 800df40:	60fb      	str	r3, [r7, #12]
      break;
 800df42:	e022      	b.n	800df8a <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	2384      	movs	r3, #132	; 0x84
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	58d3      	ldr	r3, [r2, r3]
 800df4c:	695b      	ldr	r3, [r3, #20]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	7c12      	ldrb	r2, [r2, #16]
 800df52:	210a      	movs	r1, #10
 800df54:	1879      	adds	r1, r7, r1
 800df56:	0010      	movs	r0, r2
 800df58:	4798      	blx	r3
 800df5a:	0003      	movs	r3, r0
 800df5c:	60fb      	str	r3, [r7, #12]
      break;
 800df5e:	e014      	b.n	800df8a <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	2384      	movs	r3, #132	; 0x84
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	58d3      	ldr	r3, [r2, r3]
 800df68:	699b      	ldr	r3, [r3, #24]
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	7c12      	ldrb	r2, [r2, #16]
 800df6e:	210a      	movs	r1, #10
 800df70:	1879      	adds	r1, r7, r1
 800df72:	0010      	movs	r0, r2
 800df74:	4798      	blx	r3
 800df76:	0003      	movs	r3, r0
 800df78:	60fb      	str	r3, [r7, #12]
      break;
 800df7a:	e006      	b.n	800df8a <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800df7c:	683a      	ldr	r2, [r7, #0]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	0011      	movs	r1, r2
 800df82:	0018      	movs	r0, r3
 800df84:	f000 fa40 	bl	800e408 <USBD_CtlError>
      return;
 800df88:	e05a      	b.n	800e040 <USBD_GetDescriptor+0x206>
#endif   
    }
    break;
 800df8a:	e038      	b.n	800dffe <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	7c1b      	ldrb	r3, [r3, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10b      	bne.n	800dfac <USBD_GetDescriptor+0x172>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	2385      	movs	r3, #133	; 0x85
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	58d3      	ldr	r3, [r2, r3]
 800df9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9e:	220a      	movs	r2, #10
 800dfa0:	18ba      	adds	r2, r7, r2
 800dfa2:	0010      	movs	r0, r2
 800dfa4:	4798      	blx	r3
 800dfa6:	0003      	movs	r3, r0
 800dfa8:	60fb      	str	r3, [r7, #12]
      break;
 800dfaa:	e028      	b.n	800dffe <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800dfac:	683a      	ldr	r2, [r7, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	0011      	movs	r1, r2
 800dfb2:	0018      	movs	r0, r3
 800dfb4:	f000 fa28 	bl	800e408 <USBD_CtlError>
      return;
 800dfb8:	e042      	b.n	800e040 <USBD_GetDescriptor+0x206>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	7c1b      	ldrb	r3, [r3, #16]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10f      	bne.n	800dfe2 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	2385      	movs	r3, #133	; 0x85
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	58d3      	ldr	r3, [r2, r3]
 800dfca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfcc:	220a      	movs	r2, #10
 800dfce:	18ba      	adds	r2, r7, r2
 800dfd0:	0010      	movs	r0, r2
 800dfd2:	4798      	blx	r3
 800dfd4:	0003      	movs	r3, r0
 800dfd6:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	2207      	movs	r2, #7
 800dfde:	701a      	strb	r2, [r3, #0]
      break; 
 800dfe0:	e00d      	b.n	800dffe <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	0011      	movs	r1, r2
 800dfe8:	0018      	movs	r0, r3
 800dfea:	f000 fa0d 	bl	800e408 <USBD_CtlError>
      return;
 800dfee:	e027      	b.n	800e040 <USBD_GetDescriptor+0x206>
    }

  default: 
     USBD_CtlError(pdev , req);
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	0011      	movs	r1, r2
 800dff6:	0018      	movs	r0, r3
 800dff8:	f000 fa06 	bl	800e408 <USBD_CtlError>
    return;
 800dffc:	e020      	b.n	800e040 <USBD_GetDescriptor+0x206>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800dffe:	230a      	movs	r3, #10
 800e000:	18fb      	adds	r3, r7, r3
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d01b      	beq.n	800e040 <USBD_GetDescriptor+0x206>
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	88db      	ldrh	r3, [r3, #6]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d017      	beq.n	800e040 <USBD_GetDescriptor+0x206>
  {
    
    len = MIN(len , req->wLength);
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	88da      	ldrh	r2, [r3, #6]
 800e014:	230a      	movs	r3, #10
 800e016:	18fb      	adds	r3, r7, r3
 800e018:	881b      	ldrh	r3, [r3, #0]
 800e01a:	1c18      	adds	r0, r3, #0
 800e01c:	1c11      	adds	r1, r2, #0
 800e01e:	b28a      	uxth	r2, r1
 800e020:	b283      	uxth	r3, r0
 800e022:	429a      	cmp	r2, r3
 800e024:	d900      	bls.n	800e028 <USBD_GetDescriptor+0x1ee>
 800e026:	1c01      	adds	r1, r0, #0
 800e028:	b28a      	uxth	r2, r1
 800e02a:	230a      	movs	r3, #10
 800e02c:	18fb      	adds	r3, r7, r3
 800e02e:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 800e030:	230a      	movs	r3, #10
 800e032:	18fb      	adds	r3, r7, r3
 800e034:	881a      	ldrh	r2, [r3, #0]
 800e036:	68f9      	ldr	r1, [r7, #12]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	0018      	movs	r0, r3
 800e03c:	f000 fa6c 	bl	800e518 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 800e040:	46bd      	mov	sp, r7
 800e042:	b004      	add	sp, #16
 800e044:	bd80      	pop	{r7, pc}
 800e046:	46c0      	nop			; (mov r8, r8)
 800e048:	080103c0 	.word	0x080103c0
 800e04c:	080103e0 	.word	0x080103e0

0800e050 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	889b      	ldrh	r3, [r3, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d13c      	bne.n	800e0dc <USBD_SetAddress+0x8c>
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	88db      	ldrh	r3, [r3, #6]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d138      	bne.n	800e0dc <USBD_SetAddress+0x8c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	885b      	ldrh	r3, [r3, #2]
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	230f      	movs	r3, #15
 800e072:	18fb      	adds	r3, r7, r3
 800e074:	217f      	movs	r1, #127	; 0x7f
 800e076:	400a      	ands	r2, r1
 800e078:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	23fe      	movs	r3, #254	; 0xfe
 800e07e:	005b      	lsls	r3, r3, #1
 800e080:	5cd3      	ldrb	r3, [r2, r3]
 800e082:	2b03      	cmp	r3, #3
 800e084:	d106      	bne.n	800e094 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	0011      	movs	r1, r2
 800e08c:	0018      	movs	r0, r3
 800e08e:	f000 f9bb 	bl	800e408 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800e092:	e029      	b.n	800e0e8 <USBD_SetAddress+0x98>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	230f      	movs	r3, #15
 800e098:	18f9      	adds	r1, r7, r3
 800e09a:	23ff      	movs	r3, #255	; 0xff
 800e09c:	005b      	lsls	r3, r3, #1
 800e09e:	7809      	ldrb	r1, [r1, #0]
 800e0a0:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800e0a2:	230f      	movs	r3, #15
 800e0a4:	18fb      	adds	r3, r7, r3
 800e0a6:	781a      	ldrb	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	0011      	movs	r1, r2
 800e0ac:	0018      	movs	r0, r3
 800e0ae:	f001 fbf0 	bl	800f892 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	0018      	movs	r0, r3
 800e0b6:	f000 fa99 	bl	800e5ec <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800e0ba:	230f      	movs	r3, #15
 800e0bc:	18fb      	adds	r3, r7, r3
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d005      	beq.n	800e0d0 <USBD_SetAddress+0x80>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	23fe      	movs	r3, #254	; 0xfe
 800e0c8:	005b      	lsls	r3, r3, #1
 800e0ca:	2102      	movs	r1, #2
 800e0cc:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800e0ce:	e00b      	b.n	800e0e8 <USBD_SetAddress+0x98>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	23fe      	movs	r3, #254	; 0xfe
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800e0da:	e005      	b.n	800e0e8 <USBD_SetAddress+0x98>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	0011      	movs	r1, r2
 800e0e2:	0018      	movs	r0, r3
 800e0e4:	f000 f990 	bl	800e408 <USBD_CtlError>
  } 
}
 800e0e8:	46c0      	nop			; (mov r8, r8)
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	b004      	add	sp, #16
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	885b      	ldrh	r3, [r3, #2]
 800e0fe:	b2da      	uxtb	r2, r3
 800e100:	4b48      	ldr	r3, [pc, #288]	; (800e224 <USBD_SetConfig+0x134>)
 800e102:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800e104:	4b47      	ldr	r3, [pc, #284]	; (800e224 <USBD_SetConfig+0x134>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d906      	bls.n	800e11a <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	0011      	movs	r1, r2
 800e112:	0018      	movs	r0, r3
 800e114:	f000 f978 	bl	800e408 <USBD_CtlError>
 800e118:	e081      	b.n	800e21e <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	23fe      	movs	r3, #254	; 0xfe
 800e11e:	005b      	lsls	r3, r3, #1
 800e120:	5cd3      	ldrb	r3, [r2, r3]
 800e122:	2b02      	cmp	r3, #2
 800e124:	d002      	beq.n	800e12c <USBD_SetConfig+0x3c>
 800e126:	2b03      	cmp	r3, #3
 800e128:	d029      	beq.n	800e17e <USBD_SetConfig+0x8e>
 800e12a:	e071      	b.n	800e210 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800e12c:	4b3d      	ldr	r3, [pc, #244]	; (800e224 <USBD_SetConfig+0x134>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d01f      	beq.n	800e174 <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800e134:	4b3b      	ldr	r3, [pc, #236]	; (800e224 <USBD_SetConfig+0x134>)
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	001a      	movs	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	23fe      	movs	r3, #254	; 0xfe
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	2103      	movs	r1, #3
 800e146:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800e148:	4b36      	ldr	r3, [pc, #216]	; (800e224 <USBD_SetConfig+0x134>)
 800e14a:	781a      	ldrb	r2, [r3, #0]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	0011      	movs	r1, r2
 800e150:	0018      	movs	r0, r3
 800e152:	f7ff fa60 	bl	800d616 <USBD_SetClassConfig>
 800e156:	0003      	movs	r3, r0
 800e158:	2b02      	cmp	r3, #2
 800e15a:	d106      	bne.n	800e16a <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 800e15c:	683a      	ldr	r2, [r7, #0]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	0011      	movs	r1, r2
 800e162:	0018      	movs	r0, r3
 800e164:	f000 f950 	bl	800e408 <USBD_CtlError>
          return;
 800e168:	e059      	b.n	800e21e <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	0018      	movs	r0, r3
 800e16e:	f000 fa3d 	bl	800e5ec <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800e172:	e054      	b.n	800e21e <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	0018      	movs	r0, r3
 800e178:	f000 fa38 	bl	800e5ec <USBD_CtlSendStatus>
      break;
 800e17c:	e04f      	b.n	800e21e <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800e17e:	4b29      	ldr	r3, [pc, #164]	; (800e224 <USBD_SetConfig+0x134>)
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d115      	bne.n	800e1b2 <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	23fe      	movs	r3, #254	; 0xfe
 800e18a:	005b      	lsls	r3, r3, #1
 800e18c:	2102      	movs	r1, #2
 800e18e:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 800e190:	4b24      	ldr	r3, [pc, #144]	; (800e224 <USBD_SetConfig+0x134>)
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	001a      	movs	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800e19a:	4b22      	ldr	r3, [pc, #136]	; (800e224 <USBD_SetConfig+0x134>)
 800e19c:	781a      	ldrb	r2, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	0011      	movs	r1, r2
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	f7ff fa5f 	bl	800d666 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	0018      	movs	r0, r3
 800e1ac:	f000 fa1e 	bl	800e5ec <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800e1b0:	e035      	b.n	800e21e <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 800e1b2:	4b1c      	ldr	r3, [pc, #112]	; (800e224 <USBD_SetConfig+0x134>)
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	001a      	movs	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d022      	beq.n	800e206 <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	0011      	movs	r1, r2
 800e1ca:	0018      	movs	r0, r3
 800e1cc:	f7ff fa4b 	bl	800d666 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e1d0:	4b14      	ldr	r3, [pc, #80]	; (800e224 <USBD_SetConfig+0x134>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	001a      	movs	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800e1da:	4b12      	ldr	r3, [pc, #72]	; (800e224 <USBD_SetConfig+0x134>)
 800e1dc:	781a      	ldrb	r2, [r3, #0]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	0011      	movs	r1, r2
 800e1e2:	0018      	movs	r0, r3
 800e1e4:	f7ff fa17 	bl	800d616 <USBD_SetClassConfig>
 800e1e8:	0003      	movs	r3, r0
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d106      	bne.n	800e1fc <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 800e1ee:	683a      	ldr	r2, [r7, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	0011      	movs	r1, r2
 800e1f4:	0018      	movs	r0, r3
 800e1f6:	f000 f907 	bl	800e408 <USBD_CtlError>
          return;
 800e1fa:	e010      	b.n	800e21e <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	0018      	movs	r0, r3
 800e200:	f000 f9f4 	bl	800e5ec <USBD_CtlSendStatus>
      break;
 800e204:	e00b      	b.n	800e21e <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	0018      	movs	r0, r3
 800e20a:	f000 f9ef 	bl	800e5ec <USBD_CtlSendStatus>
      break;
 800e20e:	e006      	b.n	800e21e <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 800e210:	683a      	ldr	r2, [r7, #0]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	0011      	movs	r1, r2
 800e216:	0018      	movs	r0, r3
 800e218:	f000 f8f6 	bl	800e408 <USBD_CtlError>
      break;
 800e21c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800e21e:	46bd      	mov	sp, r7
 800e220:	b002      	add	sp, #8
 800e222:	bd80      	pop	{r7, pc}
 800e224:	20000175 	.word	0x20000175

0800e228 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	88db      	ldrh	r3, [r3, #6]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d006      	beq.n	800e248 <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	0011      	movs	r1, r2
 800e240:	0018      	movs	r0, r3
 800e242:	f000 f8e1 	bl	800e408 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800e246:	e023      	b.n	800e290 <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	23fe      	movs	r3, #254	; 0xfe
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	5cd3      	ldrb	r3, [r2, r3]
 800e250:	2b02      	cmp	r3, #2
 800e252:	d002      	beq.n	800e25a <USBD_GetConfig+0x32>
 800e254:	2b03      	cmp	r3, #3
 800e256:	d00c      	beq.n	800e272 <USBD_GetConfig+0x4a>
 800e258:	e013      	b.n	800e282 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3308      	adds	r3, #8
 800e264:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	0018      	movs	r0, r3
 800e26c:	f000 f954 	bl	800e518 <USBD_CtlSendData>
      break;
 800e270:	e00e      	b.n	800e290 <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2201      	movs	r2, #1
 800e27a:	0018      	movs	r0, r3
 800e27c:	f000 f94c 	bl	800e518 <USBD_CtlSendData>
      break;
 800e280:	e006      	b.n	800e290 <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 800e282:	683a      	ldr	r2, [r7, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	0011      	movs	r1, r2
 800e288:	0018      	movs	r0, r3
 800e28a:	f000 f8bd 	bl	800e408 <USBD_CtlError>
      break;
 800e28e:	46c0      	nop			; (mov r8, r8)
}
 800e290:	46c0      	nop			; (mov r8, r8)
 800e292:	46bd      	mov	sp, r7
 800e294:	b002      	add	sp, #8
 800e296:	bd80      	pop	{r7, pc}

0800e298 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	23fe      	movs	r3, #254	; 0xfe
 800e2a6:	005b      	lsls	r3, r3, #1
 800e2a8:	5cd3      	ldrb	r3, [r2, r3]
 800e2aa:	3b02      	subs	r3, #2
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d817      	bhi.n	800e2e0 <USBD_GetStatus+0x48>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	2381      	movs	r3, #129	; 0x81
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	58d3      	ldr	r3, [r2, r3]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d005      	beq.n	800e2ce <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	2202      	movs	r2, #2
 800e2c8:	431a      	orrs	r2, r3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	330c      	adds	r3, #12
 800e2d2:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2202      	movs	r2, #2
 800e2d8:	0018      	movs	r0, r3
 800e2da:	f000 f91d 	bl	800e518 <USBD_CtlSendData>
                      2);
    break;
 800e2de:	e006      	b.n	800e2ee <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	0011      	movs	r1, r2
 800e2e6:	0018      	movs	r0, r3
 800e2e8:	f000 f88e 	bl	800e408 <USBD_CtlError>
    break;
 800e2ec:	46c0      	nop			; (mov r8, r8)
  }
}
 800e2ee:	46c0      	nop			; (mov r8, r8)
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	b002      	add	sp, #8
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b082      	sub	sp, #8
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	885b      	ldrh	r3, [r3, #2]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d111      	bne.n	800e32c <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	2381      	movs	r3, #129	; 0x81
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	2101      	movs	r1, #1
 800e310:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	2385      	movs	r3, #133	; 0x85
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	58d3      	ldr	r3, [r2, r3]
 800e31a:	689b      	ldr	r3, [r3, #8]
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	0010      	movs	r0, r2
 800e322:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	0018      	movs	r0, r3
 800e328:	f000 f960 	bl	800e5ec <USBD_CtlSendStatus>
  }

}
 800e32c:	46c0      	nop			; (mov r8, r8)
 800e32e:	46bd      	mov	sp, r7
 800e330:	b002      	add	sp, #8
 800e332:	bd80      	pop	{r7, pc}

0800e334 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	23fe      	movs	r3, #254	; 0xfe
 800e342:	005b      	lsls	r3, r3, #1
 800e344:	5cd3      	ldrb	r3, [r2, r3]
 800e346:	3b02      	subs	r3, #2
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d816      	bhi.n	800e37a <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	885b      	ldrh	r3, [r3, #2]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d119      	bne.n	800e388 <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	2381      	movs	r3, #129	; 0x81
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	2100      	movs	r1, #0
 800e35c:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	2385      	movs	r3, #133	; 0x85
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	58d3      	ldr	r3, [r2, r3]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	0010      	movs	r0, r2
 800e36e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	0018      	movs	r0, r3
 800e374:	f000 f93a 	bl	800e5ec <USBD_CtlSendStatus>
    }
    break;
 800e378:	e006      	b.n	800e388 <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	0011      	movs	r1, r2
 800e380:	0018      	movs	r0, r3
 800e382:	f000 f841 	bl	800e408 <USBD_CtlError>
    break;
 800e386:	e000      	b.n	800e38a <USBD_ClrFeature+0x56>
    break;
 800e388:	46c0      	nop			; (mov r8, r8)
  }
}
 800e38a:	46c0      	nop			; (mov r8, r8)
 800e38c:	46bd      	mov	sp, r7
 800e38e:	b002      	add	sp, #8
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b082      	sub	sp, #8
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	781a      	ldrb	r2, [r3, #0]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	785a      	ldrb	r2, [r3, #1]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	3302      	adds	r3, #2
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	b29a      	uxth	r2, r3
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	3303      	adds	r3, #3
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	021b      	lsls	r3, r3, #8
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	18d3      	adds	r3, r2, r3
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	3305      	adds	r3, #5
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	021b      	lsls	r3, r3, #8
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	18d3      	adds	r3, r2, r3
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	3306      	adds	r3, #6
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	b29a      	uxth	r2, r3
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	3307      	adds	r3, #7
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	021b      	lsls	r3, r3, #8
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	18d3      	adds	r3, r2, r3
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	80da      	strh	r2, [r3, #6]

}
 800e400:	46c0      	nop			; (mov r8, r8)
 800e402:	46bd      	mov	sp, r7
 800e404:	b002      	add	sp, #8
 800e406:	bd80      	pop	{r7, pc}

0800e408 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2180      	movs	r1, #128	; 0x80
 800e416:	0018      	movs	r0, r3
 800e418:	f001 f974 	bl	800f704 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2100      	movs	r1, #0
 800e420:	0018      	movs	r0, r3
 800e422:	f001 f96f 	bl	800f704 <USBD_LL_StallEP>
}
 800e426:	46c0      	nop			; (mov r8, r8)
 800e428:	46bd      	mov	sp, r7
 800e42a:	b002      	add	sp, #8
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e42e:	b580      	push	{r7, lr}
 800e430:	b086      	sub	sp, #24
 800e432:	af00      	add	r7, sp, #0
 800e434:	60f8      	str	r0, [r7, #12]
 800e436:	60b9      	str	r1, [r7, #8]
 800e438:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800e43a:	2317      	movs	r3, #23
 800e43c:	18fb      	adds	r3, r7, r3
 800e43e:	2200      	movs	r2, #0
 800e440:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d044      	beq.n	800e4d2 <USBD_GetString+0xa4>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	0018      	movs	r0, r3
 800e44c:	f000 f845 	bl	800e4da <USBD_GetLen>
 800e450:	0003      	movs	r3, r0
 800e452:	3301      	adds	r3, #1
 800e454:	b29b      	uxth	r3, r3
 800e456:	18db      	adds	r3, r3, r3
 800e458:	b29a      	uxth	r2, r3
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800e45e:	2317      	movs	r3, #23
 800e460:	18fb      	adds	r3, r7, r3
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	2217      	movs	r2, #23
 800e466:	18ba      	adds	r2, r7, r2
 800e468:	1c59      	adds	r1, r3, #1
 800e46a:	7011      	strb	r1, [r2, #0]
 800e46c:	001a      	movs	r2, r3
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	189b      	adds	r3, r3, r2
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	8812      	ldrh	r2, [r2, #0]
 800e476:	b2d2      	uxtb	r2, r2
 800e478:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800e47a:	2317      	movs	r3, #23
 800e47c:	18fb      	adds	r3, r7, r3
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	2217      	movs	r2, #23
 800e482:	18ba      	adds	r2, r7, r2
 800e484:	1c59      	adds	r1, r3, #1
 800e486:	7011      	strb	r1, [r2, #0]
 800e488:	001a      	movs	r2, r3
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	189b      	adds	r3, r3, r2
 800e48e:	2203      	movs	r2, #3
 800e490:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800e492:	e01a      	b.n	800e4ca <USBD_GetString+0x9c>
    {
      unicode[idx++] = *desc++;
 800e494:	2317      	movs	r3, #23
 800e496:	18fb      	adds	r3, r7, r3
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	2217      	movs	r2, #23
 800e49c:	18ba      	adds	r2, r7, r2
 800e49e:	1c59      	adds	r1, r3, #1
 800e4a0:	7011      	strb	r1, [r2, #0]
 800e4a2:	001a      	movs	r2, r3
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	189a      	adds	r2, r3, r2
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	1c59      	adds	r1, r3, #1
 800e4ac:	60f9      	str	r1, [r7, #12]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800e4b2:	2317      	movs	r3, #23
 800e4b4:	18fb      	adds	r3, r7, r3
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2217      	movs	r2, #23
 800e4ba:	18ba      	adds	r2, r7, r2
 800e4bc:	1c59      	adds	r1, r3, #1
 800e4be:	7011      	strb	r1, [r2, #0]
 800e4c0:	001a      	movs	r2, r3
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	189b      	adds	r3, r3, r2
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e0      	bne.n	800e494 <USBD_GetString+0x66>
    }
  } 
}
 800e4d2:	46c0      	nop			; (mov r8, r8)
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	b006      	add	sp, #24
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b084      	sub	sp, #16
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800e4e2:	230f      	movs	r3, #15
 800e4e4:	18fb      	adds	r3, r7, r3
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 800e4ea:	e009      	b.n	800e500 <USBD_GetLen+0x26>
    {
        len++;
 800e4ec:	230f      	movs	r3, #15
 800e4ee:	18fb      	adds	r3, r7, r3
 800e4f0:	781a      	ldrb	r2, [r3, #0]
 800e4f2:	230f      	movs	r3, #15
 800e4f4:	18fb      	adds	r3, r7, r3
 800e4f6:	3201      	adds	r2, #1
 800e4f8:	701a      	strb	r2, [r3, #0]
        buf++;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d1f1      	bne.n	800e4ec <USBD_GetLen+0x12>
    }

    return len;
 800e508:	230f      	movs	r3, #15
 800e50a:	18fb      	adds	r3, r7, r3
 800e50c:	781b      	ldrb	r3, [r3, #0]
}
 800e50e:	0018      	movs	r0, r3
 800e510:	46bd      	mov	sp, r7
 800e512:	b004      	add	sp, #16
 800e514:	bd80      	pop	{r7, pc}
 800e516:	46c0      	nop			; (mov r8, r8)

0800e518 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	1dbb      	adds	r3, r7, #6
 800e524:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800e526:	68fa      	ldr	r2, [r7, #12]
 800e528:	23fa      	movs	r3, #250	; 0xfa
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	2102      	movs	r1, #2
 800e52e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800e530:	1dbb      	adds	r3, r7, #6
 800e532:	881a      	ldrh	r2, [r3, #0]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800e538:	1dbb      	adds	r3, r7, #6
 800e53a:	881a      	ldrh	r2, [r3, #0]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800e540:	1dbb      	adds	r3, r7, #6
 800e542:	881b      	ldrh	r3, [r3, #0]
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	2100      	movs	r1, #0
 800e54a:	f001 f9ed 	bl	800f928 <USBD_LL_Transmit>
  
  return USBD_OK;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	0018      	movs	r0, r3
 800e552:	46bd      	mov	sp, r7
 800e554:	b004      	add	sp, #16
 800e556:	bd80      	pop	{r7, pc}

0800e558 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	1dbb      	adds	r3, r7, #6
 800e564:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800e566:	1dbb      	adds	r3, r7, #6
 800e568:	881b      	ldrh	r3, [r3, #0]
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	2100      	movs	r1, #0
 800e570:	f001 f9da 	bl	800f928 <USBD_LL_Transmit>
  
  return USBD_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	0018      	movs	r0, r3
 800e578:	46bd      	mov	sp, r7
 800e57a:	b004      	add	sp, #16
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b084      	sub	sp, #16
 800e582:	af00      	add	r7, sp, #0
 800e584:	60f8      	str	r0, [r7, #12]
 800e586:	60b9      	str	r1, [r7, #8]
 800e588:	1dbb      	adds	r3, r7, #6
 800e58a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	23fa      	movs	r3, #250	; 0xfa
 800e590:	005b      	lsls	r3, r3, #1
 800e592:	2103      	movs	r1, #3
 800e594:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800e596:	1dbb      	adds	r3, r7, #6
 800e598:	8819      	ldrh	r1, [r3, #0]
 800e59a:	68fa      	ldr	r2, [r7, #12]
 800e59c:	2384      	movs	r3, #132	; 0x84
 800e59e:	005b      	lsls	r3, r3, #1
 800e5a0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800e5a2:	1dbb      	adds	r3, r7, #6
 800e5a4:	8819      	ldrh	r1, [r3, #0]
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	2386      	movs	r3, #134	; 0x86
 800e5aa:	005b      	lsls	r3, r3, #1
 800e5ac:	50d1      	str	r1, [r2, r3]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800e5ae:	1dbb      	adds	r3, r7, #6
 800e5b0:	881b      	ldrh	r3, [r3, #0]
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	f001 fa0d 	bl	800f9d6 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800e5bc:	2300      	movs	r3, #0
}
 800e5be:	0018      	movs	r0, r3
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	b004      	add	sp, #16
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b084      	sub	sp, #16
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	60f8      	str	r0, [r7, #12]
 800e5ce:	60b9      	str	r1, [r7, #8]
 800e5d0:	1dbb      	adds	r3, r7, #6
 800e5d2:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 800e5d4:	1dbb      	adds	r3, r7, #6
 800e5d6:	881b      	ldrh	r3, [r3, #0]
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	2100      	movs	r1, #0
 800e5de:	f001 f9fa 	bl	800f9d6 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	0018      	movs	r0, r3
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	b004      	add	sp, #16
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	23fa      	movs	r3, #250	; 0xfa
 800e5f8:	005b      	lsls	r3, r3, #1
 800e5fa:	2104      	movs	r1, #4
 800e5fc:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	2300      	movs	r3, #0
 800e602:	2200      	movs	r2, #0
 800e604:	2100      	movs	r1, #0
 800e606:	f001 f98f 	bl	800f928 <USBD_LL_Transmit>
  
  return USBD_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	0018      	movs	r0, r3
 800e60e:	46bd      	mov	sp, r7
 800e610:	b002      	add	sp, #8
 800e612:	bd80      	pop	{r7, pc}

0800e614 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	23fa      	movs	r3, #250	; 0xfa
 800e620:	005b      	lsls	r3, r3, #1
 800e622:	2105      	movs	r1, #5
 800e624:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	2300      	movs	r3, #0
 800e62a:	2200      	movs	r2, #0
 800e62c:	2100      	movs	r1, #0
 800e62e:	f001 f9d2 	bl	800f9d6 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800e632:	2300      	movs	r3, #0
}
 800e634:	0018      	movs	r0, r3
 800e636:	46bd      	mov	sp, r7
 800e638:	b002      	add	sp, #8
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <USBD_GetRxCount>:
* @param  pdev: device instance
* @param  ep_addr: endpoint address
* @retval Rx Data blength
*/
uint16_t  USBD_GetRxCount (USBD_HandleTypeDef  *pdev , uint8_t ep_addr)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	000a      	movs	r2, r1
 800e646:	1cfb      	adds	r3, r7, #3
 800e648:	701a      	strb	r2, [r3, #0]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 800e64a:	1cfb      	adds	r3, r7, #3
 800e64c:	781a      	ldrb	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	0011      	movs	r1, r2
 800e652:	0018      	movs	r0, r3
 800e654:	f001 fa16 	bl	800fa84 <USBD_LL_GetRxDataSize>
 800e658:	0003      	movs	r3, r0
 800e65a:	b29b      	uxth	r3, r3
}
 800e65c:	0018      	movs	r0, r3
 800e65e:	46bd      	mov	sp, r7
 800e660:	b002      	add	sp, #8
 800e662:	bd80      	pop	{r7, pc}

0800e664 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e668:	f7f1 fd4e 	bl	8000108 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e66c:	f000 f80f 	bl	800e68e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e670:	f000 f990 	bl	800e994 <MX_GPIO_Init>
  MX_DMA_Init();
 800e674:	f000 f970 	bl	800e958 <MX_DMA_Init>
  MX_SPI1_Init();
 800e678:	f000 f886 	bl	800e788 <MX_SPI1_Init>
  MX_TIM3_Init();
 800e67c:	f000 f8c2 	bl	800e804 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800e680:	f000 fc04 	bl	800ee8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  WS2812_Cfg();
 800e684:	f001 fd0a 	bl	801009c <WS2812_Cfg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WS2812_Main();
 800e688:	f001 fd38 	bl	80100fc <WS2812_Main>
 800e68c:	e7fc      	b.n	800e688 <main+0x24>

0800e68e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b098      	sub	sp, #96	; 0x60
 800e692:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800e694:	232c      	movs	r3, #44	; 0x2c
 800e696:	18fb      	adds	r3, r7, r3
 800e698:	2222      	movs	r2, #34	; 0x22
 800e69a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e69c:	232c      	movs	r3, #44	; 0x2c
 800e69e:	18fb      	adds	r3, r7, r3
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800e6a4:	232c      	movs	r3, #44	; 0x2c
 800e6a6:	18fb      	adds	r3, r7, r3
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800e6ac:	232c      	movs	r3, #44	; 0x2c
 800e6ae:	18fb      	adds	r3, r7, r3
 800e6b0:	2210      	movs	r2, #16
 800e6b2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e6b4:	232c      	movs	r3, #44	; 0x2c
 800e6b6:	18fb      	adds	r3, r7, r3
 800e6b8:	2202      	movs	r2, #2
 800e6ba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e6bc:	232c      	movs	r3, #44	; 0x2c
 800e6be:	18fb      	adds	r3, r7, r3
 800e6c0:	2280      	movs	r2, #128	; 0x80
 800e6c2:	0212      	lsls	r2, r2, #8
 800e6c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800e6c6:	232c      	movs	r3, #44	; 0x2c
 800e6c8:	18fb      	adds	r3, r7, r3
 800e6ca:	2280      	movs	r2, #128	; 0x80
 800e6cc:	0352      	lsls	r2, r2, #13
 800e6ce:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800e6d0:	232c      	movs	r3, #44	; 0x2c
 800e6d2:	18fb      	adds	r3, r7, r3
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e6d8:	232c      	movs	r3, #44	; 0x2c
 800e6da:	18fb      	adds	r3, r7, r3
 800e6dc:	0018      	movs	r0, r3
 800e6de:	f7f5 f9c7 	bl	8003a70 <HAL_RCC_OscConfig>
 800e6e2:	1e03      	subs	r3, r0, #0
 800e6e4:	d004      	beq.n	800e6f0 <SystemClock_Config+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e6e6:	4b27      	ldr	r3, [pc, #156]	; (800e784 <SystemClock_Config+0xf6>)
 800e6e8:	21a9      	movs	r1, #169	; 0xa9
 800e6ea:	0018      	movs	r0, r3
 800e6ec:	f000 f9a4 	bl	800ea38 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e6f0:	231c      	movs	r3, #28
 800e6f2:	18fb      	adds	r3, r7, r3
 800e6f4:	2207      	movs	r2, #7
 800e6f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e6f8:	231c      	movs	r3, #28
 800e6fa:	18fb      	adds	r3, r7, r3
 800e6fc:	2202      	movs	r2, #2
 800e6fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e700:	231c      	movs	r3, #28
 800e702:	18fb      	adds	r3, r7, r3
 800e704:	2200      	movs	r2, #0
 800e706:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800e708:	231c      	movs	r3, #28
 800e70a:	18fb      	adds	r3, r7, r3
 800e70c:	2200      	movs	r2, #0
 800e70e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800e710:	231c      	movs	r3, #28
 800e712:	18fb      	adds	r3, r7, r3
 800e714:	2101      	movs	r1, #1
 800e716:	0018      	movs	r0, r3
 800e718:	f7f5 fd08 	bl	800412c <HAL_RCC_ClockConfig>
 800e71c:	1e03      	subs	r3, r0, #0
 800e71e:	d004      	beq.n	800e72a <SystemClock_Config+0x9c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e720:	4b18      	ldr	r3, [pc, #96]	; (800e784 <SystemClock_Config+0xf6>)
 800e722:	21b6      	movs	r1, #182	; 0xb6
 800e724:	0018      	movs	r0, r3
 800e726:	f000 f987 	bl	800ea38 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e72a:	003b      	movs	r3, r7
 800e72c:	2280      	movs	r2, #128	; 0x80
 800e72e:	0292      	lsls	r2, r2, #10
 800e730:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e732:	003b      	movs	r3, r7
 800e734:	2200      	movs	r2, #0
 800e736:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e738:	003b      	movs	r3, r7
 800e73a:	0018      	movs	r0, r3
 800e73c:	f7f5 ffee 	bl	800471c <HAL_RCCEx_PeriphCLKConfig>
 800e740:	1e03      	subs	r3, r0, #0
 800e742:	d004      	beq.n	800e74e <SystemClock_Config+0xc0>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e744:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <SystemClock_Config+0xf6>)
 800e746:	21be      	movs	r1, #190	; 0xbe
 800e748:	0018      	movs	r0, r3
 800e74a:	f000 f975 	bl	800ea38 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800e74e:	f7f5 fed5 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 800e752:	0002      	movs	r2, r0
 800e754:	23fa      	movs	r3, #250	; 0xfa
 800e756:	0099      	lsls	r1, r3, #2
 800e758:	0010      	movs	r0, r2
 800e75a:	f001 fd0b 	bl	8010174 <__udivsi3>
 800e75e:	0003      	movs	r3, r0
 800e760:	0018      	movs	r0, r3
 800e762:	f7f1 ff82 	bl	800066a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800e766:	2004      	movs	r0, #4
 800e768:	f7f1 ffce 	bl	8000708 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800e76c:	2301      	movs	r3, #1
 800e76e:	425b      	negs	r3, r3
 800e770:	2200      	movs	r2, #0
 800e772:	2100      	movs	r1, #0
 800e774:	0018      	movs	r0, r3
 800e776:	f7f1 ff3b 	bl	80005f0 <HAL_NVIC_SetPriority>
}
 800e77a:	46c0      	nop			; (mov r8, r8)
 800e77c:	46bd      	mov	sp, r7
 800e77e:	b018      	add	sp, #96	; 0x60
 800e780:	bd80      	pop	{r7, pc}
 800e782:	46c0      	nop			; (mov r8, r8)
 800e784:	080103f8 	.word	0x080103f8

0800e788 <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800e78c:	4b1a      	ldr	r3, [pc, #104]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e78e:	4a1b      	ldr	r2, [pc, #108]	; (800e7fc <MX_SPI1_Init+0x74>)
 800e790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800e792:	4b19      	ldr	r3, [pc, #100]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e794:	2200      	movs	r2, #0
 800e796:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800e798:	4b17      	ldr	r3, [pc, #92]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e79a:	2200      	movs	r2, #0
 800e79c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800e79e:	4b16      	ldr	r3, [pc, #88]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7a0:	22e0      	movs	r2, #224	; 0xe0
 800e7a2:	00d2      	lsls	r2, r2, #3
 800e7a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800e7a6:	4b14      	ldr	r3, [pc, #80]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7a8:	2202      	movs	r2, #2
 800e7aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e7ac:	4b12      	ldr	r3, [pc, #72]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800e7b2:	4b11      	ldr	r3, [pc, #68]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e7b8:	4b0f      	ldr	r3, [pc, #60]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800e7be:	4b0e      	ldr	r3, [pc, #56]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e7c4:	4b0c      	ldr	r3, [pc, #48]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800e7ca:	4b0b      	ldr	r3, [pc, #44]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7cc:	2207      	movs	r2, #7
 800e7ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800e7d0:	4b09      	ldr	r3, [pc, #36]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800e7d6:	4b08      	ldr	r3, [pc, #32]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7d8:	2200      	movs	r2, #0
 800e7da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800e7dc:	4b06      	ldr	r3, [pc, #24]	; (800e7f8 <MX_SPI1_Init+0x70>)
 800e7de:	0018      	movs	r0, r3
 800e7e0:	f7f6 fbbc 	bl	8004f5c <HAL_SPI_Init>
 800e7e4:	1e03      	subs	r3, r0, #0
 800e7e6:	d004      	beq.n	800e7f2 <MX_SPI1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e7e8:	4b05      	ldr	r3, [pc, #20]	; (800e800 <MX_SPI1_Init+0x78>)
 800e7ea:	21e1      	movs	r1, #225	; 0xe1
 800e7ec:	0018      	movs	r0, r3
 800e7ee:	f000 f923 	bl	800ea38 <_Error_Handler>
  }

}
 800e7f2:	46c0      	nop			; (mov r8, r8)
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	200003e0 	.word	0x200003e0
 800e7fc:	40013000 	.word	0x40013000
 800e800:	080103f8 	.word	0x080103f8

0800e804 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b08e      	sub	sp, #56	; 0x38
 800e808:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 800e80a:	4b50      	ldr	r3, [pc, #320]	; (800e94c <MX_TIM3_Init+0x148>)
 800e80c:	4a50      	ldr	r2, [pc, #320]	; (800e950 <MX_TIM3_Init+0x14c>)
 800e80e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800e810:	4b4e      	ldr	r3, [pc, #312]	; (800e94c <MX_TIM3_Init+0x148>)
 800e812:	2201      	movs	r2, #1
 800e814:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e816:	4b4d      	ldr	r3, [pc, #308]	; (800e94c <MX_TIM3_Init+0x148>)
 800e818:	2200      	movs	r2, #0
 800e81a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 29;
 800e81c:	4b4b      	ldr	r3, [pc, #300]	; (800e94c <MX_TIM3_Init+0x148>)
 800e81e:	221d      	movs	r2, #29
 800e820:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e822:	4b4a      	ldr	r3, [pc, #296]	; (800e94c <MX_TIM3_Init+0x148>)
 800e824:	2200      	movs	r2, #0
 800e826:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e828:	4b48      	ldr	r3, [pc, #288]	; (800e94c <MX_TIM3_Init+0x148>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e82e:	4b47      	ldr	r3, [pc, #284]	; (800e94c <MX_TIM3_Init+0x148>)
 800e830:	0018      	movs	r0, r3
 800e832:	f7f9 f97f 	bl	8007b34 <HAL_TIM_Base_Init>
 800e836:	1e03      	subs	r3, r0, #0
 800e838:	d004      	beq.n	800e844 <MX_TIM3_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e83a:	4b46      	ldr	r3, [pc, #280]	; (800e954 <MX_TIM3_Init+0x150>)
 800e83c:	21f6      	movs	r1, #246	; 0xf6
 800e83e:	0018      	movs	r0, r3
 800e840:	f000 f8fa 	bl	800ea38 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e844:	2328      	movs	r3, #40	; 0x28
 800e846:	18fb      	adds	r3, r7, r3
 800e848:	2280      	movs	r2, #128	; 0x80
 800e84a:	0152      	lsls	r2, r2, #5
 800e84c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e84e:	2328      	movs	r3, #40	; 0x28
 800e850:	18fa      	adds	r2, r7, r3
 800e852:	4b3e      	ldr	r3, [pc, #248]	; (800e94c <MX_TIM3_Init+0x148>)
 800e854:	0011      	movs	r1, r2
 800e856:	0018      	movs	r0, r3
 800e858:	f7fc f910 	bl	800aa7c <HAL_TIM_ConfigClockSource>
 800e85c:	1e03      	subs	r3, r0, #0
 800e85e:	d004      	beq.n	800e86a <MX_TIM3_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e860:	4b3c      	ldr	r3, [pc, #240]	; (800e954 <MX_TIM3_Init+0x150>)
 800e862:	21fc      	movs	r1, #252	; 0xfc
 800e864:	0018      	movs	r0, r3
 800e866:	f000 f8e7 	bl	800ea38 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e86a:	4b38      	ldr	r3, [pc, #224]	; (800e94c <MX_TIM3_Init+0x148>)
 800e86c:	0018      	movs	r0, r3
 800e86e:	f7f9 fe6b 	bl	8008548 <HAL_TIM_PWM_Init>
 800e872:	1e03      	subs	r3, r0, #0
 800e874:	d007      	beq.n	800e886 <MX_TIM3_Init+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e876:	2302      	movs	r3, #2
 800e878:	33ff      	adds	r3, #255	; 0xff
 800e87a:	001a      	movs	r2, r3
 800e87c:	4b35      	ldr	r3, [pc, #212]	; (800e954 <MX_TIM3_Init+0x150>)
 800e87e:	0011      	movs	r1, r2
 800e880:	0018      	movs	r0, r3
 800e882:	f000 f8d9 	bl	800ea38 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e886:	2320      	movs	r3, #32
 800e888:	18fb      	adds	r3, r7, r3
 800e88a:	2200      	movs	r2, #0
 800e88c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e88e:	2320      	movs	r3, #32
 800e890:	18fb      	adds	r3, r7, r3
 800e892:	2200      	movs	r2, #0
 800e894:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e896:	2320      	movs	r3, #32
 800e898:	18fa      	adds	r2, r7, r3
 800e89a:	4b2c      	ldr	r3, [pc, #176]	; (800e94c <MX_TIM3_Init+0x148>)
 800e89c:	0011      	movs	r1, r2
 800e89e:	0018      	movs	r0, r3
 800e8a0:	f7fe f9b4 	bl	800cc0c <HAL_TIMEx_MasterConfigSynchronization>
 800e8a4:	1e03      	subs	r3, r0, #0
 800e8a6:	d006      	beq.n	800e8b6 <MX_TIM3_Init+0xb2>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e8a8:	2384      	movs	r3, #132	; 0x84
 800e8aa:	005a      	lsls	r2, r3, #1
 800e8ac:	4b29      	ldr	r3, [pc, #164]	; (800e954 <MX_TIM3_Init+0x150>)
 800e8ae:	0011      	movs	r1, r2
 800e8b0:	0018      	movs	r0, r3
 800e8b2:	f000 f8c1 	bl	800ea38 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e8b6:	1d3b      	adds	r3, r7, #4
 800e8b8:	2260      	movs	r2, #96	; 0x60
 800e8ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 14;
 800e8bc:	1d3b      	adds	r3, r7, #4
 800e8be:	220e      	movs	r2, #14
 800e8c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e8c2:	1d3b      	adds	r3, r7, #4
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e8c8:	1d3b      	adds	r3, r7, #4
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e8ce:	1d39      	adds	r1, r7, #4
 800e8d0:	4b1e      	ldr	r3, [pc, #120]	; (800e94c <MX_TIM3_Init+0x148>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	0018      	movs	r0, r3
 800e8d6:	f7fb fba5 	bl	800a024 <HAL_TIM_PWM_ConfigChannel>
 800e8da:	1e03      	subs	r3, r0, #0
 800e8dc:	d007      	beq.n	800e8ee <MX_TIM3_Init+0xea>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e8de:	2312      	movs	r3, #18
 800e8e0:	33ff      	adds	r3, #255	; 0xff
 800e8e2:	001a      	movs	r2, r3
 800e8e4:	4b1b      	ldr	r3, [pc, #108]	; (800e954 <MX_TIM3_Init+0x150>)
 800e8e6:	0011      	movs	r1, r2
 800e8e8:	0018      	movs	r0, r3
 800e8ea:	f000 f8a5 	bl	800ea38 <_Error_Handler>
  }

  sConfigOC.Pulse = 8;
 800e8ee:	1d3b      	adds	r3, r7, #4
 800e8f0:	2208      	movs	r2, #8
 800e8f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e8f4:	1d39      	adds	r1, r7, #4
 800e8f6:	4b15      	ldr	r3, [pc, #84]	; (800e94c <MX_TIM3_Init+0x148>)
 800e8f8:	2204      	movs	r2, #4
 800e8fa:	0018      	movs	r0, r3
 800e8fc:	f7fb fb92 	bl	800a024 <HAL_TIM_PWM_ConfigChannel>
 800e900:	1e03      	subs	r3, r0, #0
 800e902:	d007      	beq.n	800e914 <MX_TIM3_Init+0x110>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e904:	2318      	movs	r3, #24
 800e906:	33ff      	adds	r3, #255	; 0xff
 800e908:	001a      	movs	r2, r3
 800e90a:	4b12      	ldr	r3, [pc, #72]	; (800e954 <MX_TIM3_Init+0x150>)
 800e90c:	0011      	movs	r1, r2
 800e90e:	0018      	movs	r0, r3
 800e910:	f000 f892 	bl	800ea38 <_Error_Handler>
  }

  sConfigOC.Pulse = 22;
 800e914:	1d3b      	adds	r3, r7, #4
 800e916:	2216      	movs	r2, #22
 800e918:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e91a:	1d39      	adds	r1, r7, #4
 800e91c:	4b0b      	ldr	r3, [pc, #44]	; (800e94c <MX_TIM3_Init+0x148>)
 800e91e:	2208      	movs	r2, #8
 800e920:	0018      	movs	r0, r3
 800e922:	f7fb fb7f 	bl	800a024 <HAL_TIM_PWM_ConfigChannel>
 800e926:	1e03      	subs	r3, r0, #0
 800e928:	d007      	beq.n	800e93a <MX_TIM3_Init+0x136>
  {
    _Error_Handler(__FILE__, __LINE__);
 800e92a:	231e      	movs	r3, #30
 800e92c:	33ff      	adds	r3, #255	; 0xff
 800e92e:	001a      	movs	r2, r3
 800e930:	4b08      	ldr	r3, [pc, #32]	; (800e954 <MX_TIM3_Init+0x150>)
 800e932:	0011      	movs	r1, r2
 800e934:	0018      	movs	r0, r3
 800e936:	f000 f87f 	bl	800ea38 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 800e93a:	4b04      	ldr	r3, [pc, #16]	; (800e94c <MX_TIM3_Init+0x148>)
 800e93c:	0018      	movs	r0, r3
 800e93e:	f000 f97f 	bl	800ec40 <HAL_TIM_MspPostInit>

}
 800e942:	46c0      	nop			; (mov r8, r8)
 800e944:	46bd      	mov	sp, r7
 800e946:	b00e      	add	sp, #56	; 0x38
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	46c0      	nop			; (mov r8, r8)
 800e94c:	200003a0 	.word	0x200003a0
 800e950:	40000400 	.word	0x40000400
 800e954:	080103f8 	.word	0x080103f8

0800e958 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800e95e:	4b0c      	ldr	r3, [pc, #48]	; (800e990 <MX_DMA_Init+0x38>)
 800e960:	4a0b      	ldr	r2, [pc, #44]	; (800e990 <MX_DMA_Init+0x38>)
 800e962:	6952      	ldr	r2, [r2, #20]
 800e964:	2101      	movs	r1, #1
 800e966:	430a      	orrs	r2, r1
 800e968:	615a      	str	r2, [r3, #20]
 800e96a:	4b09      	ldr	r3, [pc, #36]	; (800e990 <MX_DMA_Init+0x38>)
 800e96c:	695b      	ldr	r3, [r3, #20]
 800e96e:	2201      	movs	r2, #1
 800e970:	4013      	ands	r3, r2
 800e972:	607b      	str	r3, [r7, #4]
 800e974:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800e976:	2200      	movs	r2, #0
 800e978:	2100      	movs	r1, #0
 800e97a:	200a      	movs	r0, #10
 800e97c:	f7f1 fe38 	bl	80005f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800e980:	200a      	movs	r0, #10
 800e982:	f7f1 fe4b 	bl	800061c <HAL_NVIC_EnableIRQ>

}
 800e986:	46c0      	nop			; (mov r8, r8)
 800e988:	46bd      	mov	sp, r7
 800e98a:	b002      	add	sp, #8
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	46c0      	nop			; (mov r8, r8)
 800e990:	40021000 	.word	0x40021000

0800e994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b088      	sub	sp, #32
 800e998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e99a:	4b25      	ldr	r3, [pc, #148]	; (800ea30 <MX_GPIO_Init+0x9c>)
 800e99c:	4a24      	ldr	r2, [pc, #144]	; (800ea30 <MX_GPIO_Init+0x9c>)
 800e99e:	6952      	ldr	r2, [r2, #20]
 800e9a0:	2180      	movs	r1, #128	; 0x80
 800e9a2:	0309      	lsls	r1, r1, #12
 800e9a4:	430a      	orrs	r2, r1
 800e9a6:	615a      	str	r2, [r3, #20]
 800e9a8:	4b21      	ldr	r3, [pc, #132]	; (800ea30 <MX_GPIO_Init+0x9c>)
 800e9aa:	695a      	ldr	r2, [r3, #20]
 800e9ac:	2380      	movs	r3, #128	; 0x80
 800e9ae:	031b      	lsls	r3, r3, #12
 800e9b0:	4013      	ands	r3, r2
 800e9b2:	60bb      	str	r3, [r7, #8]
 800e9b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e9b6:	4b1e      	ldr	r3, [pc, #120]	; (800ea30 <MX_GPIO_Init+0x9c>)
 800e9b8:	4a1d      	ldr	r2, [pc, #116]	; (800ea30 <MX_GPIO_Init+0x9c>)
 800e9ba:	6952      	ldr	r2, [r2, #20]
 800e9bc:	2180      	movs	r1, #128	; 0x80
 800e9be:	0289      	lsls	r1, r1, #10
 800e9c0:	430a      	orrs	r2, r1
 800e9c2:	615a      	str	r2, [r3, #20]
 800e9c4:	4b1a      	ldr	r3, [pc, #104]	; (800ea30 <MX_GPIO_Init+0x9c>)
 800e9c6:	695a      	ldr	r2, [r3, #20]
 800e9c8:	2380      	movs	r3, #128	; 0x80
 800e9ca:	029b      	lsls	r3, r3, #10
 800e9cc:	4013      	ands	r3, r2
 800e9ce:	607b      	str	r3, [r7, #4]
 800e9d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e9d2:	4b17      	ldr	r3, [pc, #92]	; (800ea30 <MX_GPIO_Init+0x9c>)
 800e9d4:	4a16      	ldr	r2, [pc, #88]	; (800ea30 <MX_GPIO_Init+0x9c>)
 800e9d6:	6952      	ldr	r2, [r2, #20]
 800e9d8:	2180      	movs	r1, #128	; 0x80
 800e9da:	02c9      	lsls	r1, r1, #11
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	615a      	str	r2, [r3, #20]
 800e9e0:	4b13      	ldr	r3, [pc, #76]	; (800ea30 <MX_GPIO_Init+0x9c>)
 800e9e2:	695a      	ldr	r2, [r3, #20]
 800e9e4:	2380      	movs	r3, #128	; 0x80
 800e9e6:	02db      	lsls	r3, r3, #11
 800e9e8:	4013      	ands	r3, r2
 800e9ea:	603b      	str	r3, [r7, #0]
 800e9ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800e9ee:	4b11      	ldr	r3, [pc, #68]	; (800ea34 <MX_GPIO_Init+0xa0>)
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	2140      	movs	r1, #64	; 0x40
 800e9f4:	0018      	movs	r0, r3
 800e9f6:	f7f2 fd14 	bl	8001422 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e9fa:	230c      	movs	r3, #12
 800e9fc:	18fb      	adds	r3, r7, r3
 800e9fe:	2240      	movs	r2, #64	; 0x40
 800ea00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ea02:	230c      	movs	r3, #12
 800ea04:	18fb      	adds	r3, r7, r3
 800ea06:	2201      	movs	r2, #1
 800ea08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea0a:	230c      	movs	r3, #12
 800ea0c:	18fb      	adds	r3, r7, r3
 800ea0e:	2200      	movs	r2, #0
 800ea10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea12:	230c      	movs	r3, #12
 800ea14:	18fb      	adds	r3, r7, r3
 800ea16:	2200      	movs	r2, #0
 800ea18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ea1a:	230c      	movs	r3, #12
 800ea1c:	18fb      	adds	r3, r7, r3
 800ea1e:	4a05      	ldr	r2, [pc, #20]	; (800ea34 <MX_GPIO_Init+0xa0>)
 800ea20:	0019      	movs	r1, r3
 800ea22:	0010      	movs	r0, r2
 800ea24:	f7f2 fa88 	bl	8000f38 <HAL_GPIO_Init>

}
 800ea28:	46c0      	nop			; (mov r8, r8)
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	b008      	add	sp, #32
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	40021000 	.word	0x40021000
 800ea34:	48000400 	.word	0x48000400

0800ea38 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800ea42:	e7fe      	b.n	800ea42 <_Error_Handler+0xa>

0800ea44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ea4a:	4b12      	ldr	r3, [pc, #72]	; (800ea94 <HAL_MspInit+0x50>)
 800ea4c:	4a11      	ldr	r2, [pc, #68]	; (800ea94 <HAL_MspInit+0x50>)
 800ea4e:	6992      	ldr	r2, [r2, #24]
 800ea50:	2101      	movs	r1, #1
 800ea52:	430a      	orrs	r2, r1
 800ea54:	619a      	str	r2, [r3, #24]
 800ea56:	4b0f      	ldr	r3, [pc, #60]	; (800ea94 <HAL_MspInit+0x50>)
 800ea58:	699b      	ldr	r3, [r3, #24]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	4013      	ands	r3, r2
 800ea5e:	607b      	str	r3, [r7, #4]
 800ea60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800ea62:	2305      	movs	r3, #5
 800ea64:	425b      	negs	r3, r3
 800ea66:	2200      	movs	r2, #0
 800ea68:	2100      	movs	r1, #0
 800ea6a:	0018      	movs	r0, r3
 800ea6c:	f7f1 fdc0 	bl	80005f0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800ea70:	2302      	movs	r3, #2
 800ea72:	425b      	negs	r3, r3
 800ea74:	2200      	movs	r2, #0
 800ea76:	2100      	movs	r1, #0
 800ea78:	0018      	movs	r0, r3
 800ea7a:	f7f1 fdb9 	bl	80005f0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800ea7e:	2301      	movs	r3, #1
 800ea80:	425b      	negs	r3, r3
 800ea82:	2200      	movs	r2, #0
 800ea84:	2100      	movs	r1, #0
 800ea86:	0018      	movs	r0, r3
 800ea88:	f7f1 fdb2 	bl	80005f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ea8c:	46c0      	nop			; (mov r8, r8)
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	b002      	add	sp, #8
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	40021000 	.word	0x40021000

0800ea98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b088      	sub	sp, #32
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a3a      	ldr	r2, [pc, #232]	; (800eb90 <HAL_SPI_MspInit+0xf8>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d16e      	bne.n	800eb88 <HAL_SPI_MspInit+0xf0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800eaaa:	4b3a      	ldr	r3, [pc, #232]	; (800eb94 <HAL_SPI_MspInit+0xfc>)
 800eaac:	4a39      	ldr	r2, [pc, #228]	; (800eb94 <HAL_SPI_MspInit+0xfc>)
 800eaae:	6992      	ldr	r2, [r2, #24]
 800eab0:	2180      	movs	r1, #128	; 0x80
 800eab2:	0149      	lsls	r1, r1, #5
 800eab4:	430a      	orrs	r2, r1
 800eab6:	619a      	str	r2, [r3, #24]
 800eab8:	4b36      	ldr	r3, [pc, #216]	; (800eb94 <HAL_SPI_MspInit+0xfc>)
 800eaba:	699a      	ldr	r2, [r3, #24]
 800eabc:	2380      	movs	r3, #128	; 0x80
 800eabe:	015b      	lsls	r3, r3, #5
 800eac0:	4013      	ands	r3, r2
 800eac2:	60bb      	str	r3, [r7, #8]
 800eac4:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800eac6:	230c      	movs	r3, #12
 800eac8:	18fb      	adds	r3, r7, r3
 800eaca:	2280      	movs	r2, #128	; 0x80
 800eacc:	0212      	lsls	r2, r2, #8
 800eace:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ead0:	230c      	movs	r3, #12
 800ead2:	18fb      	adds	r3, r7, r3
 800ead4:	2202      	movs	r2, #2
 800ead6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ead8:	230c      	movs	r3, #12
 800eada:	18fb      	adds	r3, r7, r3
 800eadc:	2202      	movs	r2, #2
 800eade:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800eae0:	230c      	movs	r3, #12
 800eae2:	18fb      	adds	r3, r7, r3
 800eae4:	2203      	movs	r2, #3
 800eae6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800eae8:	230c      	movs	r3, #12
 800eaea:	18fb      	adds	r3, r7, r3
 800eaec:	2200      	movs	r2, #0
 800eaee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eaf0:	230c      	movs	r3, #12
 800eaf2:	18fa      	adds	r2, r7, r3
 800eaf4:	2390      	movs	r3, #144	; 0x90
 800eaf6:	05db      	lsls	r3, r3, #23
 800eaf8:	0011      	movs	r1, r2
 800eafa:	0018      	movs	r0, r3
 800eafc:	f7f2 fa1c 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800eb00:	230c      	movs	r3, #12
 800eb02:	18fb      	adds	r3, r7, r3
 800eb04:	2238      	movs	r2, #56	; 0x38
 800eb06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb08:	230c      	movs	r3, #12
 800eb0a:	18fb      	adds	r3, r7, r3
 800eb0c:	2202      	movs	r2, #2
 800eb0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb10:	230c      	movs	r3, #12
 800eb12:	18fb      	adds	r3, r7, r3
 800eb14:	2200      	movs	r2, #0
 800eb16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800eb18:	230c      	movs	r3, #12
 800eb1a:	18fb      	adds	r3, r7, r3
 800eb1c:	2203      	movs	r2, #3
 800eb1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800eb20:	230c      	movs	r3, #12
 800eb22:	18fb      	adds	r3, r7, r3
 800eb24:	2200      	movs	r2, #0
 800eb26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb28:	230c      	movs	r3, #12
 800eb2a:	18fb      	adds	r3, r7, r3
 800eb2c:	4a1a      	ldr	r2, [pc, #104]	; (800eb98 <HAL_SPI_MspInit+0x100>)
 800eb2e:	0019      	movs	r1, r3
 800eb30:	0010      	movs	r0, r2
 800eb32:	f7f2 fa01 	bl	8000f38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800eb36:	4b19      	ldr	r3, [pc, #100]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb38:	4a19      	ldr	r2, [pc, #100]	; (800eba0 <HAL_SPI_MspInit+0x108>)
 800eb3a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eb3c:	4b17      	ldr	r3, [pc, #92]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb3e:	2210      	movs	r2, #16
 800eb40:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb42:	4b16      	ldr	r3, [pc, #88]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800eb48:	4b14      	ldr	r3, [pc, #80]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb4a:	2280      	movs	r2, #128	; 0x80
 800eb4c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eb4e:	4b13      	ldr	r3, [pc, #76]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb50:	2200      	movs	r2, #0
 800eb52:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eb54:	4b11      	ldr	r3, [pc, #68]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb56:	2200      	movs	r2, #0
 800eb58:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800eb5a:	4b10      	ldr	r3, [pc, #64]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800eb60:	4b0e      	ldr	r3, [pc, #56]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800eb66:	4b0d      	ldr	r3, [pc, #52]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb68:	0018      	movs	r0, r3
 800eb6a:	f7f1 fdf3 	bl	8000754 <HAL_DMA_Init>
 800eb6e:	1e03      	subs	r3, r0, #0
 800eb70:	d004      	beq.n	800eb7c <HAL_SPI_MspInit+0xe4>
    {
      _Error_Handler(__FILE__, __LINE__);
 800eb72:	4b0c      	ldr	r3, [pc, #48]	; (800eba4 <HAL_SPI_MspInit+0x10c>)
 800eb74:	217e      	movs	r1, #126	; 0x7e
 800eb76:	0018      	movs	r0, r3
 800eb78:	f7ff ff5e 	bl	800ea38 <_Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4a07      	ldr	r2, [pc, #28]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb80:	655a      	str	r2, [r3, #84]	; 0x54
 800eb82:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <HAL_SPI_MspInit+0x104>)
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800eb88:	46c0      	nop			; (mov r8, r8)
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	b008      	add	sp, #32
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	40013000 	.word	0x40013000
 800eb94:	40021000 	.word	0x40021000
 800eb98:	48000400 	.word	0x48000400
 800eb9c:	20000444 	.word	0x20000444
 800eba0:	40020030 	.word	0x40020030
 800eba4:	08010408 	.word	0x08010408

0800eba8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]

  if(hspi->Instance==SPI1)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a0f      	ldr	r2, [pc, #60]	; (800ebf4 <HAL_SPI_MspDeInit+0x4c>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d117      	bne.n	800ebea <HAL_SPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800ebba:	4b0f      	ldr	r3, [pc, #60]	; (800ebf8 <HAL_SPI_MspDeInit+0x50>)
 800ebbc:	4a0e      	ldr	r2, [pc, #56]	; (800ebf8 <HAL_SPI_MspDeInit+0x50>)
 800ebbe:	6992      	ldr	r2, [r2, #24]
 800ebc0:	490e      	ldr	r1, [pc, #56]	; (800ebfc <HAL_SPI_MspDeInit+0x54>)
 800ebc2:	400a      	ands	r2, r1
 800ebc4:	619a      	str	r2, [r3, #24]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 800ebc6:	2380      	movs	r3, #128	; 0x80
 800ebc8:	021a      	lsls	r2, r3, #8
 800ebca:	2390      	movs	r3, #144	; 0x90
 800ebcc:	05db      	lsls	r3, r3, #23
 800ebce:	0011      	movs	r1, r2
 800ebd0:	0018      	movs	r0, r3
 800ebd2:	f7f2 fb2d 	bl	8001230 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 800ebd6:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <HAL_SPI_MspDeInit+0x58>)
 800ebd8:	2138      	movs	r1, #56	; 0x38
 800ebda:	0018      	movs	r0, r3
 800ebdc:	f7f2 fb28 	bl	8001230 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmatx);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebe4:	0018      	movs	r0, r3
 800ebe6:	f7f1 fe09 	bl	80007fc <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800ebea:	46c0      	nop			; (mov r8, r8)
 800ebec:	46bd      	mov	sp, r7
 800ebee:	b002      	add	sp, #8
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	46c0      	nop			; (mov r8, r8)
 800ebf4:	40013000 	.word	0x40013000
 800ebf8:	40021000 	.word	0x40021000
 800ebfc:	ffffefff 	.word	0xffffefff
 800ec00:	48000400 	.word	0x48000400

0800ec04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM3)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4a09      	ldr	r2, [pc, #36]	; (800ec38 <HAL_TIM_Base_MspInit+0x34>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d10b      	bne.n	800ec2e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ec16:	4b09      	ldr	r3, [pc, #36]	; (800ec3c <HAL_TIM_Base_MspInit+0x38>)
 800ec18:	4a08      	ldr	r2, [pc, #32]	; (800ec3c <HAL_TIM_Base_MspInit+0x38>)
 800ec1a:	69d2      	ldr	r2, [r2, #28]
 800ec1c:	2102      	movs	r1, #2
 800ec1e:	430a      	orrs	r2, r1
 800ec20:	61da      	str	r2, [r3, #28]
 800ec22:	4b06      	ldr	r3, [pc, #24]	; (800ec3c <HAL_TIM_Base_MspInit+0x38>)
 800ec24:	69db      	ldr	r3, [r3, #28]
 800ec26:	2202      	movs	r2, #2
 800ec28:	4013      	ands	r3, r2
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800ec2e:	46c0      	nop			; (mov r8, r8)
 800ec30:	46bd      	mov	sp, r7
 800ec32:	b004      	add	sp, #16
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	46c0      	nop			; (mov r8, r8)
 800ec38:	40000400 	.word	0x40000400
 800ec3c:	40021000 	.word	0x40021000

0800ec40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4a11      	ldr	r2, [pc, #68]	; (800ec94 <HAL_TIM_MspPostInit+0x54>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d11b      	bne.n	800ec8a <HAL_TIM_MspPostInit+0x4a>
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800ec52:	230c      	movs	r3, #12
 800ec54:	18fb      	adds	r3, r7, r3
 800ec56:	22e0      	movs	r2, #224	; 0xe0
 800ec58:	0052      	lsls	r2, r2, #1
 800ec5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec5c:	230c      	movs	r3, #12
 800ec5e:	18fb      	adds	r3, r7, r3
 800ec60:	2202      	movs	r2, #2
 800ec62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec64:	230c      	movs	r3, #12
 800ec66:	18fb      	adds	r3, r7, r3
 800ec68:	2200      	movs	r2, #0
 800ec6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ec6c:	230c      	movs	r3, #12
 800ec6e:	18fb      	adds	r3, r7, r3
 800ec70:	2200      	movs	r2, #0
 800ec72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 800ec74:	230c      	movs	r3, #12
 800ec76:	18fb      	adds	r3, r7, r3
 800ec78:	2200      	movs	r2, #0
 800ec7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ec7c:	230c      	movs	r3, #12
 800ec7e:	18fb      	adds	r3, r7, r3
 800ec80:	4a05      	ldr	r2, [pc, #20]	; (800ec98 <HAL_TIM_MspPostInit+0x58>)
 800ec82:	0019      	movs	r1, r3
 800ec84:	0010      	movs	r0, r2
 800ec86:	f7f2 f957 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800ec8a:	46c0      	nop			; (mov r8, r8)
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	b008      	add	sp, #32
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	46c0      	nop			; (mov r8, r8)
 800ec94:	40000400 	.word	0x40000400
 800ec98:	48000800 	.word	0x48000800

0800ec9c <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM3)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a06      	ldr	r2, [pc, #24]	; (800ecc4 <HAL_TIM_Base_MspDeInit+0x28>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d105      	bne.n	800ecba <HAL_TIM_Base_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspDeInit 0 */

  /* USER CODE END TIM3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM3_CLK_DISABLE();
 800ecae:	4b06      	ldr	r3, [pc, #24]	; (800ecc8 <HAL_TIM_Base_MspDeInit+0x2c>)
 800ecb0:	4a05      	ldr	r2, [pc, #20]	; (800ecc8 <HAL_TIM_Base_MspDeInit+0x2c>)
 800ecb2:	69d2      	ldr	r2, [r2, #28]
 800ecb4:	2102      	movs	r1, #2
 800ecb6:	438a      	bics	r2, r1
 800ecb8:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 800ecba:	46c0      	nop			; (mov r8, r8)
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	b002      	add	sp, #8
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	46c0      	nop			; (mov r8, r8)
 800ecc4:	40000400 	.word	0x40000400
 800ecc8:	40021000 	.word	0x40021000

0800eccc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ecd0:	f7f1 fa74 	bl	80001bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800ecd4:	f7f1 fd32 	bl	800073c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ecd8:	46c0      	nop			; (mov r8, r8)
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <DMA1_Channel2_3_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 and 3 interrupts.
*/
void DMA1_Channel2_3_IRQHandler(void)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	WS2812_DmaHandler();
 800ece2:	f001 f815 	bl	800fd10 <WS2812_DmaHandler>
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
//  HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800ece6:	46c0      	nop			; (mov r8, r8)
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <USB_IRQHandler>:

/**
* @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
*/
void USB_IRQHandler(void)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800ecf0:	4b03      	ldr	r3, [pc, #12]	; (800ed00 <USB_IRQHandler+0x14>)
 800ecf2:	0018      	movs	r0, r3
 800ecf4:	f7f2 fd74 	bl	80017e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800ecf8:	46c0      	nop			; (mov r8, r8)
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	46c0      	nop			; (mov r8, r8)
 800ed00:	20000e7c 	.word	0x20000e7c

0800ed04 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800ed08:	4b1a      	ldr	r3, [pc, #104]	; (800ed74 <SystemInit+0x70>)
 800ed0a:	4a1a      	ldr	r2, [pc, #104]	; (800ed74 <SystemInit+0x70>)
 800ed0c:	6812      	ldr	r2, [r2, #0]
 800ed0e:	2101      	movs	r1, #1
 800ed10:	430a      	orrs	r2, r1
 800ed12:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800ed14:	4b17      	ldr	r3, [pc, #92]	; (800ed74 <SystemInit+0x70>)
 800ed16:	4a17      	ldr	r2, [pc, #92]	; (800ed74 <SystemInit+0x70>)
 800ed18:	6852      	ldr	r2, [r2, #4]
 800ed1a:	4917      	ldr	r1, [pc, #92]	; (800ed78 <SystemInit+0x74>)
 800ed1c:	400a      	ands	r2, r1
 800ed1e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800ed20:	4b14      	ldr	r3, [pc, #80]	; (800ed74 <SystemInit+0x70>)
 800ed22:	4a14      	ldr	r2, [pc, #80]	; (800ed74 <SystemInit+0x70>)
 800ed24:	6812      	ldr	r2, [r2, #0]
 800ed26:	4915      	ldr	r1, [pc, #84]	; (800ed7c <SystemInit+0x78>)
 800ed28:	400a      	ands	r2, r1
 800ed2a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800ed2c:	4b11      	ldr	r3, [pc, #68]	; (800ed74 <SystemInit+0x70>)
 800ed2e:	4a11      	ldr	r2, [pc, #68]	; (800ed74 <SystemInit+0x70>)
 800ed30:	6812      	ldr	r2, [r2, #0]
 800ed32:	4913      	ldr	r1, [pc, #76]	; (800ed80 <SystemInit+0x7c>)
 800ed34:	400a      	ands	r2, r1
 800ed36:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800ed38:	4b0e      	ldr	r3, [pc, #56]	; (800ed74 <SystemInit+0x70>)
 800ed3a:	4a0e      	ldr	r2, [pc, #56]	; (800ed74 <SystemInit+0x70>)
 800ed3c:	6852      	ldr	r2, [r2, #4]
 800ed3e:	4911      	ldr	r1, [pc, #68]	; (800ed84 <SystemInit+0x80>)
 800ed40:	400a      	ands	r2, r1
 800ed42:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800ed44:	4b0b      	ldr	r3, [pc, #44]	; (800ed74 <SystemInit+0x70>)
 800ed46:	4a0b      	ldr	r2, [pc, #44]	; (800ed74 <SystemInit+0x70>)
 800ed48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ed4a:	210f      	movs	r1, #15
 800ed4c:	438a      	bics	r2, r1
 800ed4e:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 800ed50:	4b08      	ldr	r3, [pc, #32]	; (800ed74 <SystemInit+0x70>)
 800ed52:	4a08      	ldr	r2, [pc, #32]	; (800ed74 <SystemInit+0x70>)
 800ed54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ed56:	490c      	ldr	r1, [pc, #48]	; (800ed88 <SystemInit+0x84>)
 800ed58:	400a      	ands	r2, r1
 800ed5a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800ed5c:	4b05      	ldr	r3, [pc, #20]	; (800ed74 <SystemInit+0x70>)
 800ed5e:	4a05      	ldr	r2, [pc, #20]	; (800ed74 <SystemInit+0x70>)
 800ed60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ed62:	2101      	movs	r1, #1
 800ed64:	438a      	bics	r2, r1
 800ed66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800ed68:	4b02      	ldr	r3, [pc, #8]	; (800ed74 <SystemInit+0x70>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	609a      	str	r2, [r3, #8]

}
 800ed6e:	46c0      	nop			; (mov r8, r8)
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	40021000 	.word	0x40021000
 800ed78:	08ffb80c 	.word	0x08ffb80c
 800ed7c:	fef6ffff 	.word	0xfef6ffff
 800ed80:	fffbffff 	.word	0xfffbffff
 800ed84:	ffc0ffff 	.word	0xffc0ffff
 800ed88:	fffcfe2c 	.word	0xfffcfe2c

0800ed8c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 800ed92:	2300      	movs	r3, #0
 800ed94:	60fb      	str	r3, [r7, #12]
 800ed96:	2300      	movs	r3, #0
 800ed98:	60bb      	str	r3, [r7, #8]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	607b      	str	r3, [r7, #4]
 800ed9e:	2300      	movs	r3, #0
 800eda0:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800eda2:	4b35      	ldr	r3, [pc, #212]	; (800ee78 <SystemCoreClockUpdate+0xec>)
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	220c      	movs	r2, #12
 800eda8:	4013      	ands	r3, r2
 800edaa:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2b04      	cmp	r3, #4
 800edb0:	d007      	beq.n	800edc2 <SystemCoreClockUpdate+0x36>
 800edb2:	2b08      	cmp	r3, #8
 800edb4:	d009      	beq.n	800edca <SystemCoreClockUpdate+0x3e>
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d148      	bne.n	800ee4c <SystemCoreClockUpdate+0xc0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800edba:	4b30      	ldr	r3, [pc, #192]	; (800ee7c <SystemCoreClockUpdate+0xf0>)
 800edbc:	4a30      	ldr	r2, [pc, #192]	; (800ee80 <SystemCoreClockUpdate+0xf4>)
 800edbe:	601a      	str	r2, [r3, #0]
      break;
 800edc0:	e048      	b.n	800ee54 <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800edc2:	4b2e      	ldr	r3, [pc, #184]	; (800ee7c <SystemCoreClockUpdate+0xf0>)
 800edc4:	4a2e      	ldr	r2, [pc, #184]	; (800ee80 <SystemCoreClockUpdate+0xf4>)
 800edc6:	601a      	str	r2, [r3, #0]
      break;
 800edc8:	e044      	b.n	800ee54 <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800edca:	4b2b      	ldr	r3, [pc, #172]	; (800ee78 <SystemCoreClockUpdate+0xec>)
 800edcc:	685a      	ldr	r2, [r3, #4]
 800edce:	23f0      	movs	r3, #240	; 0xf0
 800edd0:	039b      	lsls	r3, r3, #14
 800edd2:	4013      	ands	r3, r2
 800edd4:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800edd6:	4b28      	ldr	r3, [pc, #160]	; (800ee78 <SystemCoreClockUpdate+0xec>)
 800edd8:	685a      	ldr	r2, [r3, #4]
 800edda:	23c0      	movs	r3, #192	; 0xc0
 800eddc:	025b      	lsls	r3, r3, #9
 800edde:	4013      	ands	r3, r2
 800ede0:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	0c9b      	lsrs	r3, r3, #18
 800ede6:	3302      	adds	r3, #2
 800ede8:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 800edea:	4b23      	ldr	r3, [pc, #140]	; (800ee78 <SystemCoreClockUpdate+0xec>)
 800edec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edee:	220f      	movs	r2, #15
 800edf0:	4013      	ands	r3, r2
 800edf2:	3301      	adds	r3, #1
 800edf4:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	2380      	movs	r3, #128	; 0x80
 800edfa:	025b      	lsls	r3, r3, #9
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d10a      	bne.n	800ee16 <SystemCoreClockUpdate+0x8a>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	481f      	ldr	r0, [pc, #124]	; (800ee80 <SystemCoreClockUpdate+0xf4>)
 800ee04:	f001 f9b6 	bl	8010174 <__udivsi3>
 800ee08:	0003      	movs	r3, r0
 800ee0a:	001a      	movs	r2, r3
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	435a      	muls	r2, r3
 800ee10:	4b1a      	ldr	r3, [pc, #104]	; (800ee7c <SystemCoreClockUpdate+0xf0>)
 800ee12:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 800ee14:	e01e      	b.n	800ee54 <SystemCoreClockUpdate+0xc8>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	23c0      	movs	r3, #192	; 0xc0
 800ee1a:	025b      	lsls	r3, r3, #9
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d10a      	bne.n	800ee36 <SystemCoreClockUpdate+0xaa>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 800ee20:	6839      	ldr	r1, [r7, #0]
 800ee22:	4818      	ldr	r0, [pc, #96]	; (800ee84 <SystemCoreClockUpdate+0xf8>)
 800ee24:	f001 f9a6 	bl	8010174 <__udivsi3>
 800ee28:	0003      	movs	r3, r0
 800ee2a:	001a      	movs	r2, r3
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	435a      	muls	r2, r3
 800ee30:	4b12      	ldr	r3, [pc, #72]	; (800ee7c <SystemCoreClockUpdate+0xf0>)
 800ee32:	601a      	str	r2, [r3, #0]
      break;
 800ee34:	e00e      	b.n	800ee54 <SystemCoreClockUpdate+0xc8>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 800ee36:	6839      	ldr	r1, [r7, #0]
 800ee38:	4811      	ldr	r0, [pc, #68]	; (800ee80 <SystemCoreClockUpdate+0xf4>)
 800ee3a:	f001 f99b 	bl	8010174 <__udivsi3>
 800ee3e:	0003      	movs	r3, r0
 800ee40:	001a      	movs	r2, r3
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	435a      	muls	r2, r3
 800ee46:	4b0d      	ldr	r3, [pc, #52]	; (800ee7c <SystemCoreClockUpdate+0xf0>)
 800ee48:	601a      	str	r2, [r3, #0]
      break;
 800ee4a:	e003      	b.n	800ee54 <SystemCoreClockUpdate+0xc8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800ee4c:	4b0b      	ldr	r3, [pc, #44]	; (800ee7c <SystemCoreClockUpdate+0xf0>)
 800ee4e:	4a0c      	ldr	r2, [pc, #48]	; (800ee80 <SystemCoreClockUpdate+0xf4>)
 800ee50:	601a      	str	r2, [r3, #0]
      break;
 800ee52:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800ee54:	4b08      	ldr	r3, [pc, #32]	; (800ee78 <SystemCoreClockUpdate+0xec>)
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	091b      	lsrs	r3, r3, #4
 800ee5a:	220f      	movs	r2, #15
 800ee5c:	4013      	ands	r3, r2
 800ee5e:	4a0a      	ldr	r2, [pc, #40]	; (800ee88 <SystemCoreClockUpdate+0xfc>)
 800ee60:	5cd3      	ldrb	r3, [r2, r3]
 800ee62:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800ee64:	4b05      	ldr	r3, [pc, #20]	; (800ee7c <SystemCoreClockUpdate+0xf0>)
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	40da      	lsrs	r2, r3
 800ee6c:	4b03      	ldr	r3, [pc, #12]	; (800ee7c <SystemCoreClockUpdate+0xf0>)
 800ee6e:	601a      	str	r2, [r3, #0]
}
 800ee70:	46c0      	nop			; (mov r8, r8)
 800ee72:	46bd      	mov	sp, r7
 800ee74:	b004      	add	sp, #16
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	40021000 	.word	0x40021000
 800ee7c:	20000110 	.word	0x20000110
 800ee80:	007a1200 	.word	0x007a1200
 800ee84:	02dc6c00 	.word	0x02dc6c00
 800ee88:	08010424 	.word	0x08010424

0800ee8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800ee90:	490c      	ldr	r1, [pc, #48]	; (800eec4 <MX_USB_DEVICE_Init+0x38>)
 800ee92:	4b0d      	ldr	r3, [pc, #52]	; (800eec8 <MX_USB_DEVICE_Init+0x3c>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	0018      	movs	r0, r3
 800ee98:	f7fe fb1c 	bl	800d4d4 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800ee9c:	4a0b      	ldr	r2, [pc, #44]	; (800eecc <MX_USB_DEVICE_Init+0x40>)
 800ee9e:	4b0a      	ldr	r3, [pc, #40]	; (800eec8 <MX_USB_DEVICE_Init+0x3c>)
 800eea0:	0011      	movs	r1, r2
 800eea2:	0018      	movs	r0, r3
 800eea4:	f7fe fb68 	bl	800d578 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800eea8:	4a09      	ldr	r2, [pc, #36]	; (800eed0 <MX_USB_DEVICE_Init+0x44>)
 800eeaa:	4b07      	ldr	r3, [pc, #28]	; (800eec8 <MX_USB_DEVICE_Init+0x3c>)
 800eeac:	0011      	movs	r1, r2
 800eeae:	0018      	movs	r0, r3
 800eeb0:	f7fe fa64 	bl	800d37c <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800eeb4:	4b04      	ldr	r3, [pc, #16]	; (800eec8 <MX_USB_DEVICE_Init+0x3c>)
 800eeb6:	0018      	movs	r0, r3
 800eeb8:	f7fe fb7f 	bl	800d5ba <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eebc:	46c0      	nop			; (mov r8, r8)
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	46c0      	nop			; (mov r8, r8)
 800eec4:	20000124 	.word	0x20000124
 800eec8:	20000488 	.word	0x20000488
 800eecc:	2000000c 	.word	0x2000000c
 800eed0:	20000114 	.word	0x20000114

0800eed4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eed8:	4907      	ldr	r1, [pc, #28]	; (800eef8 <CDC_Init_FS+0x24>)
 800eeda:	4b08      	ldr	r3, [pc, #32]	; (800eefc <CDC_Init_FS+0x28>)
 800eedc:	2200      	movs	r2, #0
 800eede:	0018      	movs	r0, r3
 800eee0:	f7fe fa68 	bl	800d3b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eee4:	4a06      	ldr	r2, [pc, #24]	; (800ef00 <CDC_Init_FS+0x2c>)
 800eee6:	4b05      	ldr	r3, [pc, #20]	; (800eefc <CDC_Init_FS+0x28>)
 800eee8:	0011      	movs	r1, r2
 800eeea:	0018      	movs	r0, r3
 800eeec:	f7fe fa7e 	bl	800d3ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eef0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eef2:	0018      	movs	r0, r3
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	20000a94 	.word	0x20000a94
 800eefc:	20000488 	.word	0x20000488
 800ef00:	200006ac 	.word	0x200006ac

0800ef04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ef08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ef0a:	0018      	movs	r0, r3
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6039      	str	r1, [r7, #0]
 800ef18:	0011      	movs	r1, r2
 800ef1a:	1dfb      	adds	r3, r7, #7
 800ef1c:	1c02      	adds	r2, r0, #0
 800ef1e:	701a      	strb	r2, [r3, #0]
 800ef20:	1d3b      	adds	r3, r7, #4
 800ef22:	1c0a      	adds	r2, r1, #0
 800ef24:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ef26:	1dfb      	adds	r3, r7, #7
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	2b23      	cmp	r3, #35	; 0x23
 800ef2c:	d804      	bhi.n	800ef38 <CDC_Control_FS+0x28>
 800ef2e:	009a      	lsls	r2, r3, #2
 800ef30:	4b04      	ldr	r3, [pc, #16]	; (800ef44 <CDC_Control_FS+0x34>)
 800ef32:	18d3      	adds	r3, r2, r3
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ef38:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800ef3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ef3c:	0018      	movs	r0, r3
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	b002      	add	sp, #8
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	0801043c 	.word	0x0801043c

0800ef48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(*Len >3)
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2b03      	cmp	r3, #3
 800ef58:	d90f      	bls.n	800ef7a <CDC_Receive_FS+0x32>
	{
		tmp_led.r = Buf[0];
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	781a      	ldrb	r2, [r3, #0]
 800ef5e:	4b10      	ldr	r3, [pc, #64]	; (800efa0 <CDC_Receive_FS+0x58>)
 800ef60:	701a      	strb	r2, [r3, #0]
		tmp_led.g = Buf[1];
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	785a      	ldrb	r2, [r3, #1]
 800ef66:	4b0e      	ldr	r3, [pc, #56]	; (800efa0 <CDC_Receive_FS+0x58>)
 800ef68:	705a      	strb	r2, [r3, #1]
		tmp_led.b = Buf[2];
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	789a      	ldrb	r2, [r3, #2]
 800ef6e:	4b0c      	ldr	r3, [pc, #48]	; (800efa0 <CDC_Receive_FS+0x58>)
 800ef70:	709a      	strb	r2, [r3, #2]
		tmp_led.br = Buf[3];
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	78da      	ldrb	r2, [r3, #3]
 800ef76:	4b0a      	ldr	r3, [pc, #40]	; (800efa0 <CDC_Receive_FS+0x58>)
 800ef78:	70da      	strb	r2, [r3, #3]
	}
	update_flag = 1;
 800ef7a:	4b0a      	ldr	r3, [pc, #40]	; (800efa4 <CDC_Receive_FS+0x5c>)
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	4b09      	ldr	r3, [pc, #36]	; (800efa8 <CDC_Receive_FS+0x60>)
 800ef84:	0011      	movs	r1, r2
 800ef86:	0018      	movs	r0, r3
 800ef88:	f7fe fa30 	bl	800d3ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ef8c:	4b06      	ldr	r3, [pc, #24]	; (800efa8 <CDC_Receive_FS+0x60>)
 800ef8e:	0018      	movs	r0, r3
 800ef90:	f7fe fa71 	bl	800d476 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ef94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ef96:	0018      	movs	r0, r3
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	b002      	add	sp, #8
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	46c0      	nop			; (mov r8, r8)
 800efa0:	200012e8 	.word	0x200012e8
 800efa4:	200012e7 	.word	0x200012e7
 800efa8:	20000488 	.word	0x20000488

0800efac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800efac:	b590      	push	{r4, r7, lr}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	000a      	movs	r2, r1
 800efb6:	1cbb      	adds	r3, r7, #2
 800efb8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800efba:	230f      	movs	r3, #15
 800efbc:	18fb      	adds	r3, r7, r3
 800efbe:	2200      	movs	r2, #0
 800efc0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800efc2:	4a11      	ldr	r2, [pc, #68]	; (800f008 <CDC_Transmit_FS+0x5c>)
 800efc4:	2386      	movs	r3, #134	; 0x86
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	58d3      	ldr	r3, [r2, r3]
 800efca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800efcc:	68ba      	ldr	r2, [r7, #8]
 800efce:	2385      	movs	r3, #133	; 0x85
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	58d3      	ldr	r3, [r2, r3]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d001      	beq.n	800efdc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800efd8:	2301      	movs	r3, #1
 800efda:	e011      	b.n	800f000 <CDC_Transmit_FS+0x54>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800efdc:	1cbb      	adds	r3, r7, #2
 800efde:	881a      	ldrh	r2, [r3, #0]
 800efe0:	6879      	ldr	r1, [r7, #4]
 800efe2:	4b09      	ldr	r3, [pc, #36]	; (800f008 <CDC_Transmit_FS+0x5c>)
 800efe4:	0018      	movs	r0, r3
 800efe6:	f7fe f9e5 	bl	800d3b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800efea:	230f      	movs	r3, #15
 800efec:	18fc      	adds	r4, r7, r3
 800efee:	4b06      	ldr	r3, [pc, #24]	; (800f008 <CDC_Transmit_FS+0x5c>)
 800eff0:	0018      	movs	r0, r3
 800eff2:	f7fe fa0f 	bl	800d414 <USBD_CDC_TransmitPacket>
 800eff6:	0003      	movs	r3, r0
 800eff8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800effa:	230f      	movs	r3, #15
 800effc:	18fb      	adds	r3, r7, r3
 800effe:	781b      	ldrb	r3, [r3, #0]
}
 800f000:	0018      	movs	r0, r3
 800f002:	46bd      	mov	sp, r7
 800f004:	b005      	add	sp, #20
 800f006:	bd90      	pop	{r4, r7, pc}
 800f008:	20000488 	.word	0x20000488

0800f00c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a0e      	ldr	r2, [pc, #56]	; (800f054 <HAL_PCD_MspInit+0x48>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d115      	bne.n	800f04a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f01e:	4b0e      	ldr	r3, [pc, #56]	; (800f058 <HAL_PCD_MspInit+0x4c>)
 800f020:	4a0d      	ldr	r2, [pc, #52]	; (800f058 <HAL_PCD_MspInit+0x4c>)
 800f022:	69d2      	ldr	r2, [r2, #28]
 800f024:	2180      	movs	r1, #128	; 0x80
 800f026:	0409      	lsls	r1, r1, #16
 800f028:	430a      	orrs	r2, r1
 800f02a:	61da      	str	r2, [r3, #28]
 800f02c:	4b0a      	ldr	r3, [pc, #40]	; (800f058 <HAL_PCD_MspInit+0x4c>)
 800f02e:	69da      	ldr	r2, [r3, #28]
 800f030:	2380      	movs	r3, #128	; 0x80
 800f032:	041b      	lsls	r3, r3, #16
 800f034:	4013      	ands	r3, r2
 800f036:	60fb      	str	r3, [r7, #12]
 800f038:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800f03a:	2200      	movs	r2, #0
 800f03c:	2100      	movs	r1, #0
 800f03e:	201f      	movs	r0, #31
 800f040:	f7f1 fad6 	bl	80005f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800f044:	201f      	movs	r0, #31
 800f046:	f7f1 fae9 	bl	800061c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f04a:	46c0      	nop			; (mov r8, r8)
 800f04c:	46bd      	mov	sp, r7
 800f04e:	b004      	add	sp, #16
 800f050:	bd80      	pop	{r7, pc}
 800f052:	46c0      	nop			; (mov r8, r8)
 800f054:	40005c00 	.word	0x40005c00
 800f058:	40021000 	.word	0x40021000

0800f05c <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a07      	ldr	r2, [pc, #28]	; (800f088 <HAL_PCD_MspDeInit+0x2c>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d108      	bne.n	800f080 <HAL_PCD_MspDeInit+0x24>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 800f06e:	4b07      	ldr	r3, [pc, #28]	; (800f08c <HAL_PCD_MspDeInit+0x30>)
 800f070:	4a06      	ldr	r2, [pc, #24]	; (800f08c <HAL_PCD_MspDeInit+0x30>)
 800f072:	69d2      	ldr	r2, [r2, #28]
 800f074:	4906      	ldr	r1, [pc, #24]	; (800f090 <HAL_PCD_MspDeInit+0x34>)
 800f076:	400a      	ands	r2, r1
 800f078:	61da      	str	r2, [r3, #28]

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_IRQn);
 800f07a:	201f      	movs	r0, #31
 800f07c:	f7f1 fade 	bl	800063c <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 800f080:	46c0      	nop			; (mov r8, r8)
 800f082:	46bd      	mov	sp, r7
 800f084:	b002      	add	sp, #8
 800f086:	bd80      	pop	{r7, pc}
 800f088:	40005c00 	.word	0x40005c00
 800f08c:	40021000 	.word	0x40021000
 800f090:	ff7fffff 	.word	0xff7fffff

0800f094 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	2387      	movs	r3, #135	; 0x87
 800f0a0:	009b      	lsls	r3, r3, #2
 800f0a2:	58d2      	ldr	r2, [r2, r3]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	33ed      	adds	r3, #237	; 0xed
 800f0a8:	33ff      	adds	r3, #255	; 0xff
 800f0aa:	0019      	movs	r1, r3
 800f0ac:	0010      	movs	r0, r2
 800f0ae:	f7fe faf0 	bl	800d692 <USBD_LL_SetupStage>
}
 800f0b2:	46c0      	nop			; (mov r8, r8)
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	b002      	add	sp, #8
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f0ba:	b590      	push	{r4, r7, lr}
 800f0bc:	b083      	sub	sp, #12
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	000a      	movs	r2, r1
 800f0c4:	1cfb      	adds	r3, r7, #3
 800f0c6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	2387      	movs	r3, #135	; 0x87
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	58d4      	ldr	r4, [r2, r3]
 800f0d0:	1cfb      	adds	r3, r7, #3
 800f0d2:	781a      	ldrb	r2, [r3, #0]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	238c      	movs	r3, #140	; 0x8c
 800f0d8:	0059      	lsls	r1, r3, #1
 800f0da:	0013      	movs	r3, r2
 800f0dc:	00db      	lsls	r3, r3, #3
 800f0de:	1a9b      	subs	r3, r3, r2
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	18c3      	adds	r3, r0, r3
 800f0e4:	185b      	adds	r3, r3, r1
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	1cfb      	adds	r3, r7, #3
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	0019      	movs	r1, r3
 800f0ee:	0020      	movs	r0, r4
 800f0f0:	f7fe fb2a 	bl	800d748 <USBD_LL_DataOutStage>
}
 800f0f4:	46c0      	nop			; (mov r8, r8)
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	b003      	add	sp, #12
 800f0fa:	bd90      	pop	{r4, r7, pc}

0800f0fc <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	000a      	movs	r2, r1
 800f106:	1cfb      	adds	r3, r7, #3
 800f108:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	2387      	movs	r3, #135	; 0x87
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	58d0      	ldr	r0, [r2, r3]
 800f112:	1cfb      	adds	r3, r7, #3
 800f114:	781a      	ldrb	r2, [r3, #0]
 800f116:	6879      	ldr	r1, [r7, #4]
 800f118:	0013      	movs	r3, r2
 800f11a:	00db      	lsls	r3, r3, #3
 800f11c:	1a9b      	subs	r3, r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	18cb      	adds	r3, r1, r3
 800f122:	3338      	adds	r3, #56	; 0x38
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	1cfb      	adds	r3, r7, #3
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	0019      	movs	r1, r3
 800f12c:	f7fe fb76 	bl	800d81c <USBD_LL_DataInStage>
}
 800f130:	46c0      	nop			; (mov r8, r8)
 800f132:	46bd      	mov	sp, r7
 800f134:	b002      	add	sp, #8
 800f136:	bd80      	pop	{r7, pc}

0800f138 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	2387      	movs	r3, #135	; 0x87
 800f144:	009b      	lsls	r3, r3, #2
 800f146:	58d3      	ldr	r3, [r2, r3]
 800f148:	0018      	movs	r0, r3
 800f14a:	f7fe fc75 	bl	800da38 <USBD_LL_SOF>
}
 800f14e:	46c0      	nop			; (mov r8, r8)
 800f150:	46bd      	mov	sp, r7
 800f152:	b002      	add	sp, #8
 800f154:	bd80      	pop	{r7, pc}

0800f156 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800f156:	b580      	push	{r7, lr}
 800f158:	b084      	sub	sp, #16
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f15e:	230f      	movs	r3, #15
 800f160:	18fb      	adds	r3, r7, r3
 800f162:	2201      	movs	r2, #1
 800f164:	701a      	strb	r2, [r3, #0]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	689b      	ldr	r3, [r3, #8]
 800f16a:	2b02      	cmp	r3, #2
 800f16c:	d104      	bne.n	800f178 <HAL_PCD_ResetCallback+0x22>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800f16e:	230f      	movs	r3, #15
 800f170:	18fb      	adds	r3, r7, r3
 800f172:	2201      	movs	r2, #1
 800f174:	701a      	strb	r2, [r3, #0]
    break;
 800f176:	e004      	b.n	800f182 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800f178:	230f      	movs	r3, #15
 800f17a:	18fb      	adds	r3, r7, r3
 800f17c:	2201      	movs	r2, #1
 800f17e:	701a      	strb	r2, [r3, #0]
    break;    
 800f180:	46c0      	nop			; (mov r8, r8)
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	2387      	movs	r3, #135	; 0x87
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	58d2      	ldr	r2, [r2, r3]
 800f18a:	230f      	movs	r3, #15
 800f18c:	18fb      	adds	r3, r7, r3
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	0019      	movs	r1, r3
 800f192:	0010      	movs	r0, r2
 800f194:	f7fe fc19 	bl	800d9ca <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	2387      	movs	r3, #135	; 0x87
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	58d3      	ldr	r3, [r2, r3]
 800f1a0:	0018      	movs	r0, r3
 800f1a2:	f7fe fbdf 	bl	800d964 <USBD_LL_Reset>
}
 800f1a6:	46c0      	nop			; (mov r8, r8)
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	b004      	add	sp, #16
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b082      	sub	sp, #8
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	2387      	movs	r3, #135	; 0x87
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	58d3      	ldr	r3, [r2, r3]
 800f1be:	0018      	movs	r0, r3
 800f1c0:	f7fe fc13 	bl	800d9ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d005      	beq.n	800f1d8 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f1cc:	4b04      	ldr	r3, [pc, #16]	; (800f1e0 <HAL_PCD_SuspendCallback+0x32>)
 800f1ce:	4a04      	ldr	r2, [pc, #16]	; (800f1e0 <HAL_PCD_SuspendCallback+0x32>)
 800f1d0:	6912      	ldr	r2, [r2, #16]
 800f1d2:	2106      	movs	r1, #6
 800f1d4:	430a      	orrs	r2, r1
 800f1d6:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800f1d8:	46c0      	nop			; (mov r8, r8)
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	b002      	add	sp, #8
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	e000ed00 	.word	0xe000ed00

0800f1e4 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	699b      	ldr	r3, [r3, #24]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d007      	beq.n	800f204 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f1f4:	4b09      	ldr	r3, [pc, #36]	; (800f21c <HAL_PCD_ResumeCallback+0x38>)
 800f1f6:	4a09      	ldr	r2, [pc, #36]	; (800f21c <HAL_PCD_ResumeCallback+0x38>)
 800f1f8:	6912      	ldr	r2, [r2, #16]
 800f1fa:	2106      	movs	r1, #6
 800f1fc:	438a      	bics	r2, r1
 800f1fe:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800f200:	f000 fc76 	bl	800faf0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	2387      	movs	r3, #135	; 0x87
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	58d3      	ldr	r3, [r2, r3]
 800f20c:	0018      	movs	r0, r3
 800f20e:	f7fe fc02 	bl	800da16 <USBD_LL_Resume>
}
 800f212:	46c0      	nop			; (mov r8, r8)
 800f214:	46bd      	mov	sp, r7
 800f216:	b002      	add	sp, #8
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	46c0      	nop			; (mov r8, r8)
 800f21c:	e000ed00 	.word	0xe000ed00

0800f220 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	000a      	movs	r2, r1
 800f22a:	1cfb      	adds	r3, r7, #3
 800f22c:	701a      	strb	r2, [r3, #0]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	2387      	movs	r3, #135	; 0x87
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	58d2      	ldr	r2, [r2, r3]
 800f236:	1cfb      	adds	r3, r7, #3
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	0019      	movs	r1, r3
 800f23c:	0010      	movs	r0, r2
 800f23e:	f7fe fc25 	bl	800da8c <USBD_LL_IsoOUTIncomplete>
}
 800f242:	46c0      	nop			; (mov r8, r8)
 800f244:	46bd      	mov	sp, r7
 800f246:	b002      	add	sp, #8
 800f248:	bd80      	pop	{r7, pc}

0800f24a <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b082      	sub	sp, #8
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	000a      	movs	r2, r1
 800f254:	1cfb      	adds	r3, r7, #3
 800f256:	701a      	strb	r2, [r3, #0]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	2387      	movs	r3, #135	; 0x87
 800f25c:	009b      	lsls	r3, r3, #2
 800f25e:	58d2      	ldr	r2, [r2, r3]
 800f260:	1cfb      	adds	r3, r7, #3
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	0019      	movs	r1, r3
 800f266:	0010      	movs	r0, r2
 800f268:	f7fe fc04 	bl	800da74 <USBD_LL_IsoINIncomplete>
}
 800f26c:	46c0      	nop			; (mov r8, r8)
 800f26e:	46bd      	mov	sp, r7
 800f270:	b002      	add	sp, #8
 800f272:	bd80      	pop	{r7, pc}

0800f274 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	2387      	movs	r3, #135	; 0x87
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	58d3      	ldr	r3, [r2, r3]
 800f284:	0018      	movs	r0, r3
 800f286:	f7fe fc0d 	bl	800daa4 <USBD_LL_DevConnected>
}
 800f28a:	46c0      	nop			; (mov r8, r8)
 800f28c:	46bd      	mov	sp, r7
 800f28e:	b002      	add	sp, #8
 800f290:	bd80      	pop	{r7, pc}

0800f292 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b082      	sub	sp, #8
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	2387      	movs	r3, #135	; 0x87
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	58d3      	ldr	r3, [r2, r3]
 800f2a2:	0018      	movs	r0, r3
 800f2a4:	f7fe fc07 	bl	800dab6 <USBD_LL_DevDisconnected>
}
 800f2a8:	46c0      	nop			; (mov r8, r8)
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	b002      	add	sp, #8
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800f2b8:	4a31      	ldr	r2, [pc, #196]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2ba:	2387      	movs	r3, #135	; 0x87
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	6879      	ldr	r1, [r7, #4]
 800f2c0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800f2c2:	687a      	ldr	r2, [r7, #4]
 800f2c4:	2388      	movs	r3, #136	; 0x88
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	492d      	ldr	r1, [pc, #180]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2ca:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800f2cc:	4b2c      	ldr	r3, [pc, #176]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2ce:	4a2d      	ldr	r2, [pc, #180]	; (800f384 <USBD_LL_Init+0xd4>)
 800f2d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f2d2:	4b2b      	ldr	r3, [pc, #172]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2d4:	2208      	movs	r2, #8
 800f2d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f2d8:	4b29      	ldr	r3, [pc, #164]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2da:	2202      	movs	r2, #2
 800f2dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800f2de:	4b28      	ldr	r3, [pc, #160]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f2e4:	4b26      	ldr	r3, [pc, #152]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2e6:	2202      	movs	r2, #2
 800f2e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f2ea:	4b25      	ldr	r3, [pc, #148]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f2f0:	4b23      	ldr	r3, [pc, #140]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f2f6:	4b22      	ldr	r3, [pc, #136]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f2fc:	4b20      	ldr	r3, [pc, #128]	; (800f380 <USBD_LL_Init+0xd0>)
 800f2fe:	0018      	movs	r0, r3
 800f300:	f7f2 f90c 	bl	800151c <HAL_PCD_Init>
 800f304:	1e03      	subs	r3, r0, #0
 800f306:	d006      	beq.n	800f316 <USBD_LL_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 800f308:	239a      	movs	r3, #154	; 0x9a
 800f30a:	005a      	lsls	r2, r3, #1
 800f30c:	4b1e      	ldr	r3, [pc, #120]	; (800f388 <USBD_LL_Init+0xd8>)
 800f30e:	0011      	movs	r1, r2
 800f310:	0018      	movs	r0, r3
 800f312:	f7ff fb91 	bl	800ea38 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f316:	687a      	ldr	r2, [r7, #4]
 800f318:	2388      	movs	r3, #136	; 0x88
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	58d0      	ldr	r0, [r2, r3]
 800f31e:	2318      	movs	r3, #24
 800f320:	2200      	movs	r2, #0
 800f322:	2100      	movs	r1, #0
 800f324:	f7f4 fb1c 	bl	8003960 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	2388      	movs	r3, #136	; 0x88
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	58d0      	ldr	r0, [r2, r3]
 800f330:	2358      	movs	r3, #88	; 0x58
 800f332:	2200      	movs	r2, #0
 800f334:	2180      	movs	r1, #128	; 0x80
 800f336:	f7f4 fb13 	bl	8003960 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	2388      	movs	r3, #136	; 0x88
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	58d0      	ldr	r0, [r2, r3]
 800f342:	23c0      	movs	r3, #192	; 0xc0
 800f344:	2200      	movs	r2, #0
 800f346:	2181      	movs	r1, #129	; 0x81
 800f348:	f7f4 fb0a 	bl	8003960 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	2388      	movs	r3, #136	; 0x88
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	58d0      	ldr	r0, [r2, r3]
 800f354:	2388      	movs	r3, #136	; 0x88
 800f356:	005b      	lsls	r3, r3, #1
 800f358:	2200      	movs	r2, #0
 800f35a:	2101      	movs	r1, #1
 800f35c:	f7f4 fb00 	bl	8003960 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	2388      	movs	r3, #136	; 0x88
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	58d0      	ldr	r0, [r2, r3]
 800f368:	2380      	movs	r3, #128	; 0x80
 800f36a:	005b      	lsls	r3, r3, #1
 800f36c:	2200      	movs	r2, #0
 800f36e:	2182      	movs	r1, #130	; 0x82
 800f370:	f7f4 faf6 	bl	8003960 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800f374:	2300      	movs	r3, #0
}
 800f376:	0018      	movs	r0, r3
 800f378:	46bd      	mov	sp, r7
 800f37a:	b002      	add	sp, #8
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	46c0      	nop			; (mov r8, r8)
 800f380:	20000e7c 	.word	0x20000e7c
 800f384:	40005c00 	.word	0x40005c00
 800f388:	080104cc 	.word	0x080104cc

0800f38c <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800f38c:	b590      	push	{r4, r7, lr}
 800f38e:	b085      	sub	sp, #20
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f394:	230e      	movs	r3, #14
 800f396:	18fb      	adds	r3, r7, r3
 800f398:	2200      	movs	r2, #0
 800f39a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f39c:	230f      	movs	r3, #15
 800f39e:	18fb      	adds	r3, r7, r3
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	2388      	movs	r3, #136	; 0x88
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	58d3      	ldr	r3, [r2, r3]
 800f3ac:	220e      	movs	r2, #14
 800f3ae:	18bc      	adds	r4, r7, r2
 800f3b0:	0018      	movs	r0, r3
 800f3b2:	f7f2 f9a3 	bl	80016fc <HAL_PCD_DeInit>
 800f3b6:	0003      	movs	r3, r0
 800f3b8:	7023      	strb	r3, [r4, #0]

  switch (hal_status) {
 800f3ba:	230e      	movs	r3, #14
 800f3bc:	18fb      	adds	r3, r7, r3
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d00d      	beq.n	800f3e0 <USBD_LL_DeInit+0x54>
 800f3c4:	dc02      	bgt.n	800f3cc <USBD_LL_DeInit+0x40>
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d005      	beq.n	800f3d6 <USBD_LL_DeInit+0x4a>
 800f3ca:	e018      	b.n	800f3fe <USBD_LL_DeInit+0x72>
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d00c      	beq.n	800f3ea <USBD_LL_DeInit+0x5e>
 800f3d0:	2b03      	cmp	r3, #3
 800f3d2:	d00f      	beq.n	800f3f4 <USBD_LL_DeInit+0x68>
 800f3d4:	e013      	b.n	800f3fe <USBD_LL_DeInit+0x72>
    case HAL_OK :
      usb_status = USBD_OK;
 800f3d6:	230f      	movs	r3, #15
 800f3d8:	18fb      	adds	r3, r7, r3
 800f3da:	2200      	movs	r2, #0
 800f3dc:	701a      	strb	r2, [r3, #0]
    break;
 800f3de:	e013      	b.n	800f408 <USBD_LL_DeInit+0x7c>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f3e0:	230f      	movs	r3, #15
 800f3e2:	18fb      	adds	r3, r7, r3
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	701a      	strb	r2, [r3, #0]
    break;
 800f3e8:	e00e      	b.n	800f408 <USBD_LL_DeInit+0x7c>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f3ea:	230f      	movs	r3, #15
 800f3ec:	18fb      	adds	r3, r7, r3
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	701a      	strb	r2, [r3, #0]
    break;
 800f3f2:	e009      	b.n	800f408 <USBD_LL_DeInit+0x7c>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3f4:	230f      	movs	r3, #15
 800f3f6:	18fb      	adds	r3, r7, r3
 800f3f8:	2202      	movs	r2, #2
 800f3fa:	701a      	strb	r2, [r3, #0]
    break;
 800f3fc:	e004      	b.n	800f408 <USBD_LL_DeInit+0x7c>
    default :
      usb_status = USBD_FAIL;
 800f3fe:	230f      	movs	r3, #15
 800f400:	18fb      	adds	r3, r7, r3
 800f402:	2202      	movs	r2, #2
 800f404:	701a      	strb	r2, [r3, #0]
    break;
 800f406:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status; 
 800f408:	230f      	movs	r3, #15
 800f40a:	18fb      	adds	r3, r7, r3
 800f40c:	781b      	ldrb	r3, [r3, #0]
}
 800f40e:	0018      	movs	r0, r3
 800f410:	46bd      	mov	sp, r7
 800f412:	b005      	add	sp, #20
 800f414:	bd90      	pop	{r4, r7, pc}

0800f416 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f416:	b590      	push	{r4, r7, lr}
 800f418:	b085      	sub	sp, #20
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f41e:	230e      	movs	r3, #14
 800f420:	18fb      	adds	r3, r7, r3
 800f422:	2200      	movs	r2, #0
 800f424:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f426:	230f      	movs	r3, #15
 800f428:	18fb      	adds	r3, r7, r3
 800f42a:	2200      	movs	r2, #0
 800f42c:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	2388      	movs	r3, #136	; 0x88
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	58d3      	ldr	r3, [r2, r3]
 800f436:	220e      	movs	r2, #14
 800f438:	18bc      	adds	r4, r7, r2
 800f43a:	0018      	movs	r0, r3
 800f43c:	f7f2 f98e 	bl	800175c <HAL_PCD_Start>
 800f440:	0003      	movs	r3, r0
 800f442:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800f444:	230e      	movs	r3, #14
 800f446:	18fb      	adds	r3, r7, r3
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d00d      	beq.n	800f46a <USBD_LL_Start+0x54>
 800f44e:	dc02      	bgt.n	800f456 <USBD_LL_Start+0x40>
 800f450:	2b00      	cmp	r3, #0
 800f452:	d005      	beq.n	800f460 <USBD_LL_Start+0x4a>
 800f454:	e018      	b.n	800f488 <USBD_LL_Start+0x72>
 800f456:	2b02      	cmp	r3, #2
 800f458:	d00c      	beq.n	800f474 <USBD_LL_Start+0x5e>
 800f45a:	2b03      	cmp	r3, #3
 800f45c:	d00f      	beq.n	800f47e <USBD_LL_Start+0x68>
 800f45e:	e013      	b.n	800f488 <USBD_LL_Start+0x72>
    case HAL_OK :
      usb_status = USBD_OK;
 800f460:	230f      	movs	r3, #15
 800f462:	18fb      	adds	r3, r7, r3
 800f464:	2200      	movs	r2, #0
 800f466:	701a      	strb	r2, [r3, #0]
    break;
 800f468:	e013      	b.n	800f492 <USBD_LL_Start+0x7c>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f46a:	230f      	movs	r3, #15
 800f46c:	18fb      	adds	r3, r7, r3
 800f46e:	2202      	movs	r2, #2
 800f470:	701a      	strb	r2, [r3, #0]
    break;
 800f472:	e00e      	b.n	800f492 <USBD_LL_Start+0x7c>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f474:	230f      	movs	r3, #15
 800f476:	18fb      	adds	r3, r7, r3
 800f478:	2201      	movs	r2, #1
 800f47a:	701a      	strb	r2, [r3, #0]
    break;
 800f47c:	e009      	b.n	800f492 <USBD_LL_Start+0x7c>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f47e:	230f      	movs	r3, #15
 800f480:	18fb      	adds	r3, r7, r3
 800f482:	2202      	movs	r2, #2
 800f484:	701a      	strb	r2, [r3, #0]
    break;
 800f486:	e004      	b.n	800f492 <USBD_LL_Start+0x7c>
    default :
      usb_status = USBD_FAIL;
 800f488:	230f      	movs	r3, #15
 800f48a:	18fb      	adds	r3, r7, r3
 800f48c:	2202      	movs	r2, #2
 800f48e:	701a      	strb	r2, [r3, #0]
    break;
 800f490:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800f492:	230f      	movs	r3, #15
 800f494:	18fb      	adds	r3, r7, r3
 800f496:	781b      	ldrb	r3, [r3, #0]
}
 800f498:	0018      	movs	r0, r3
 800f49a:	46bd      	mov	sp, r7
 800f49c:	b005      	add	sp, #20
 800f49e:	bd90      	pop	{r4, r7, pc}

0800f4a0 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800f4a0:	b590      	push	{r4, r7, lr}
 800f4a2:	b085      	sub	sp, #20
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4a8:	230e      	movs	r3, #14
 800f4aa:	18fb      	adds	r3, r7, r3
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4b0:	230f      	movs	r3, #15
 800f4b2:	18fb      	adds	r3, r7, r3
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	2388      	movs	r3, #136	; 0x88
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	58d3      	ldr	r3, [r2, r3]
 800f4c0:	220e      	movs	r2, #14
 800f4c2:	18bc      	adds	r4, r7, r2
 800f4c4:	0018      	movs	r0, r3
 800f4c6:	f7f2 f961 	bl	800178c <HAL_PCD_Stop>
 800f4ca:	0003      	movs	r3, r0
 800f4cc:	7023      	strb	r3, [r4, #0]

  switch (hal_status) {
 800f4ce:	230e      	movs	r3, #14
 800f4d0:	18fb      	adds	r3, r7, r3
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d00d      	beq.n	800f4f4 <USBD_LL_Stop+0x54>
 800f4d8:	dc02      	bgt.n	800f4e0 <USBD_LL_Stop+0x40>
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d005      	beq.n	800f4ea <USBD_LL_Stop+0x4a>
 800f4de:	e018      	b.n	800f512 <USBD_LL_Stop+0x72>
 800f4e0:	2b02      	cmp	r3, #2
 800f4e2:	d00c      	beq.n	800f4fe <USBD_LL_Stop+0x5e>
 800f4e4:	2b03      	cmp	r3, #3
 800f4e6:	d00f      	beq.n	800f508 <USBD_LL_Stop+0x68>
 800f4e8:	e013      	b.n	800f512 <USBD_LL_Stop+0x72>
    case HAL_OK :
      usb_status = USBD_OK;
 800f4ea:	230f      	movs	r3, #15
 800f4ec:	18fb      	adds	r3, r7, r3
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	701a      	strb	r2, [r3, #0]
    break;
 800f4f2:	e013      	b.n	800f51c <USBD_LL_Stop+0x7c>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f4f4:	230f      	movs	r3, #15
 800f4f6:	18fb      	adds	r3, r7, r3
 800f4f8:	2202      	movs	r2, #2
 800f4fa:	701a      	strb	r2, [r3, #0]
    break;
 800f4fc:	e00e      	b.n	800f51c <USBD_LL_Stop+0x7c>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f4fe:	230f      	movs	r3, #15
 800f500:	18fb      	adds	r3, r7, r3
 800f502:	2201      	movs	r2, #1
 800f504:	701a      	strb	r2, [r3, #0]
    break;
 800f506:	e009      	b.n	800f51c <USBD_LL_Stop+0x7c>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f508:	230f      	movs	r3, #15
 800f50a:	18fb      	adds	r3, r7, r3
 800f50c:	2202      	movs	r2, #2
 800f50e:	701a      	strb	r2, [r3, #0]
    break;
 800f510:	e004      	b.n	800f51c <USBD_LL_Stop+0x7c>
    default :
      usb_status = USBD_FAIL;
 800f512:	230f      	movs	r3, #15
 800f514:	18fb      	adds	r3, r7, r3
 800f516:	2202      	movs	r2, #2
 800f518:	701a      	strb	r2, [r3, #0]
    break;
 800f51a:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800f51c:	230f      	movs	r3, #15
 800f51e:	18fb      	adds	r3, r7, r3
 800f520:	781b      	ldrb	r3, [r3, #0]
}
 800f522:	0018      	movs	r0, r3
 800f524:	46bd      	mov	sp, r7
 800f526:	b005      	add	sp, #20
 800f528:	bd90      	pop	{r4, r7, pc}

0800f52a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f52a:	b5b0      	push	{r4, r5, r7, lr}
 800f52c:	b084      	sub	sp, #16
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
 800f532:	000c      	movs	r4, r1
 800f534:	0010      	movs	r0, r2
 800f536:	0019      	movs	r1, r3
 800f538:	1cfb      	adds	r3, r7, #3
 800f53a:	1c22      	adds	r2, r4, #0
 800f53c:	701a      	strb	r2, [r3, #0]
 800f53e:	1cbb      	adds	r3, r7, #2
 800f540:	1c02      	adds	r2, r0, #0
 800f542:	701a      	strb	r2, [r3, #0]
 800f544:	003b      	movs	r3, r7
 800f546:	1c0a      	adds	r2, r1, #0
 800f548:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f54a:	230e      	movs	r3, #14
 800f54c:	18fb      	adds	r3, r7, r3
 800f54e:	2200      	movs	r2, #0
 800f550:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f552:	230f      	movs	r3, #15
 800f554:	18fb      	adds	r3, r7, r3
 800f556:	2200      	movs	r2, #0
 800f558:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	2388      	movs	r3, #136	; 0x88
 800f55e:	009b      	lsls	r3, r3, #2
 800f560:	58d0      	ldr	r0, [r2, r3]
 800f562:	230e      	movs	r3, #14
 800f564:	18fc      	adds	r4, r7, r3
 800f566:	1cbb      	adds	r3, r7, #2
 800f568:	781d      	ldrb	r5, [r3, #0]
 800f56a:	003b      	movs	r3, r7
 800f56c:	881a      	ldrh	r2, [r3, #0]
 800f56e:	1cfb      	adds	r3, r7, #3
 800f570:	7819      	ldrb	r1, [r3, #0]
 800f572:	002b      	movs	r3, r5
 800f574:	f7f2 fb3e 	bl	8001bf4 <HAL_PCD_EP_Open>
 800f578:	0003      	movs	r3, r0
 800f57a:	7023      	strb	r3, [r4, #0]

  switch (hal_status) {
 800f57c:	230e      	movs	r3, #14
 800f57e:	18fb      	adds	r3, r7, r3
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	2b01      	cmp	r3, #1
 800f584:	d00d      	beq.n	800f5a2 <USBD_LL_OpenEP+0x78>
 800f586:	dc02      	bgt.n	800f58e <USBD_LL_OpenEP+0x64>
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d005      	beq.n	800f598 <USBD_LL_OpenEP+0x6e>
 800f58c:	e018      	b.n	800f5c0 <USBD_LL_OpenEP+0x96>
 800f58e:	2b02      	cmp	r3, #2
 800f590:	d00c      	beq.n	800f5ac <USBD_LL_OpenEP+0x82>
 800f592:	2b03      	cmp	r3, #3
 800f594:	d00f      	beq.n	800f5b6 <USBD_LL_OpenEP+0x8c>
 800f596:	e013      	b.n	800f5c0 <USBD_LL_OpenEP+0x96>
    case HAL_OK :
      usb_status = USBD_OK;
 800f598:	230f      	movs	r3, #15
 800f59a:	18fb      	adds	r3, r7, r3
 800f59c:	2200      	movs	r2, #0
 800f59e:	701a      	strb	r2, [r3, #0]
    break;
 800f5a0:	e013      	b.n	800f5ca <USBD_LL_OpenEP+0xa0>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f5a2:	230f      	movs	r3, #15
 800f5a4:	18fb      	adds	r3, r7, r3
 800f5a6:	2202      	movs	r2, #2
 800f5a8:	701a      	strb	r2, [r3, #0]
    break;
 800f5aa:	e00e      	b.n	800f5ca <USBD_LL_OpenEP+0xa0>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f5ac:	230f      	movs	r3, #15
 800f5ae:	18fb      	adds	r3, r7, r3
 800f5b0:	2201      	movs	r2, #1
 800f5b2:	701a      	strb	r2, [r3, #0]
    break;
 800f5b4:	e009      	b.n	800f5ca <USBD_LL_OpenEP+0xa0>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f5b6:	230f      	movs	r3, #15
 800f5b8:	18fb      	adds	r3, r7, r3
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	701a      	strb	r2, [r3, #0]
    break;
 800f5be:	e004      	b.n	800f5ca <USBD_LL_OpenEP+0xa0>
    default :
      usb_status = USBD_FAIL;
 800f5c0:	230f      	movs	r3, #15
 800f5c2:	18fb      	adds	r3, r7, r3
 800f5c4:	2202      	movs	r2, #2
 800f5c6:	701a      	strb	r2, [r3, #0]
    break;
 800f5c8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800f5ca:	230f      	movs	r3, #15
 800f5cc:	18fb      	adds	r3, r7, r3
 800f5ce:	781b      	ldrb	r3, [r3, #0]
}
 800f5d0:	0018      	movs	r0, r3
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	b004      	add	sp, #16
 800f5d6:	bdb0      	pop	{r4, r5, r7, pc}

0800f5d8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5d8:	b590      	push	{r4, r7, lr}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	000a      	movs	r2, r1
 800f5e2:	1cfb      	adds	r3, r7, #3
 800f5e4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5e6:	230e      	movs	r3, #14
 800f5e8:	18fb      	adds	r3, r7, r3
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5ee:	230f      	movs	r3, #15
 800f5f0:	18fb      	adds	r3, r7, r3
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	2388      	movs	r3, #136	; 0x88
 800f5fa:	009b      	lsls	r3, r3, #2
 800f5fc:	58d2      	ldr	r2, [r2, r3]
 800f5fe:	230e      	movs	r3, #14
 800f600:	18fc      	adds	r4, r7, r3
 800f602:	1cfb      	adds	r3, r7, #3
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	0019      	movs	r1, r3
 800f608:	0010      	movs	r0, r2
 800f60a:	f7f2 fe6d 	bl	80022e8 <HAL_PCD_EP_Close>
 800f60e:	0003      	movs	r3, r0
 800f610:	7023      	strb	r3, [r4, #0]
      
  switch (hal_status) {
 800f612:	230e      	movs	r3, #14
 800f614:	18fb      	adds	r3, r7, r3
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d00d      	beq.n	800f638 <USBD_LL_CloseEP+0x60>
 800f61c:	dc02      	bgt.n	800f624 <USBD_LL_CloseEP+0x4c>
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d005      	beq.n	800f62e <USBD_LL_CloseEP+0x56>
 800f622:	e018      	b.n	800f656 <USBD_LL_CloseEP+0x7e>
 800f624:	2b02      	cmp	r3, #2
 800f626:	d00c      	beq.n	800f642 <USBD_LL_CloseEP+0x6a>
 800f628:	2b03      	cmp	r3, #3
 800f62a:	d00f      	beq.n	800f64c <USBD_LL_CloseEP+0x74>
 800f62c:	e013      	b.n	800f656 <USBD_LL_CloseEP+0x7e>
    case HAL_OK :
      usb_status = USBD_OK;
 800f62e:	230f      	movs	r3, #15
 800f630:	18fb      	adds	r3, r7, r3
 800f632:	2200      	movs	r2, #0
 800f634:	701a      	strb	r2, [r3, #0]
    break;
 800f636:	e013      	b.n	800f660 <USBD_LL_CloseEP+0x88>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f638:	230f      	movs	r3, #15
 800f63a:	18fb      	adds	r3, r7, r3
 800f63c:	2202      	movs	r2, #2
 800f63e:	701a      	strb	r2, [r3, #0]
    break;
 800f640:	e00e      	b.n	800f660 <USBD_LL_CloseEP+0x88>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f642:	230f      	movs	r3, #15
 800f644:	18fb      	adds	r3, r7, r3
 800f646:	2201      	movs	r2, #1
 800f648:	701a      	strb	r2, [r3, #0]
    break;
 800f64a:	e009      	b.n	800f660 <USBD_LL_CloseEP+0x88>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f64c:	230f      	movs	r3, #15
 800f64e:	18fb      	adds	r3, r7, r3
 800f650:	2202      	movs	r2, #2
 800f652:	701a      	strb	r2, [r3, #0]
    break;
 800f654:	e004      	b.n	800f660 <USBD_LL_CloseEP+0x88>
    default :
      usb_status = USBD_FAIL;
 800f656:	230f      	movs	r3, #15
 800f658:	18fb      	adds	r3, r7, r3
 800f65a:	2202      	movs	r2, #2
 800f65c:	701a      	strb	r2, [r3, #0]
    break;
 800f65e:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;  
 800f660:	230f      	movs	r3, #15
 800f662:	18fb      	adds	r3, r7, r3
 800f664:	781b      	ldrb	r3, [r3, #0]
}
 800f666:	0018      	movs	r0, r3
 800f668:	46bd      	mov	sp, r7
 800f66a:	b005      	add	sp, #20
 800f66c:	bd90      	pop	{r4, r7, pc}

0800f66e <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f66e:	b590      	push	{r4, r7, lr}
 800f670:	b085      	sub	sp, #20
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	000a      	movs	r2, r1
 800f678:	1cfb      	adds	r3, r7, #3
 800f67a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f67c:	230e      	movs	r3, #14
 800f67e:	18fb      	adds	r3, r7, r3
 800f680:	2200      	movs	r2, #0
 800f682:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f684:	230f      	movs	r3, #15
 800f686:	18fb      	adds	r3, r7, r3
 800f688:	2200      	movs	r2, #0
 800f68a:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	2388      	movs	r3, #136	; 0x88
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	58d2      	ldr	r2, [r2, r3]
 800f694:	230e      	movs	r3, #14
 800f696:	18fc      	adds	r4, r7, r3
 800f698:	1cfb      	adds	r3, r7, #3
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	0019      	movs	r1, r3
 800f69e:	0010      	movs	r0, r2
 800f6a0:	f7f3 fcf4 	bl	800308c <HAL_PCD_EP_Flush>
 800f6a4:	0003      	movs	r3, r0
 800f6a6:	7023      	strb	r3, [r4, #0]
      
  switch (hal_status) {
 800f6a8:	230e      	movs	r3, #14
 800f6aa:	18fb      	adds	r3, r7, r3
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d00d      	beq.n	800f6ce <USBD_LL_FlushEP+0x60>
 800f6b2:	dc02      	bgt.n	800f6ba <USBD_LL_FlushEP+0x4c>
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d005      	beq.n	800f6c4 <USBD_LL_FlushEP+0x56>
 800f6b8:	e018      	b.n	800f6ec <USBD_LL_FlushEP+0x7e>
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d00c      	beq.n	800f6d8 <USBD_LL_FlushEP+0x6a>
 800f6be:	2b03      	cmp	r3, #3
 800f6c0:	d00f      	beq.n	800f6e2 <USBD_LL_FlushEP+0x74>
 800f6c2:	e013      	b.n	800f6ec <USBD_LL_FlushEP+0x7e>
    case HAL_OK :
      usb_status = USBD_OK;
 800f6c4:	230f      	movs	r3, #15
 800f6c6:	18fb      	adds	r3, r7, r3
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	701a      	strb	r2, [r3, #0]
    break;
 800f6cc:	e013      	b.n	800f6f6 <USBD_LL_FlushEP+0x88>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6ce:	230f      	movs	r3, #15
 800f6d0:	18fb      	adds	r3, r7, r3
 800f6d2:	2202      	movs	r2, #2
 800f6d4:	701a      	strb	r2, [r3, #0]
    break;
 800f6d6:	e00e      	b.n	800f6f6 <USBD_LL_FlushEP+0x88>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6d8:	230f      	movs	r3, #15
 800f6da:	18fb      	adds	r3, r7, r3
 800f6dc:	2201      	movs	r2, #1
 800f6de:	701a      	strb	r2, [r3, #0]
    break;
 800f6e0:	e009      	b.n	800f6f6 <USBD_LL_FlushEP+0x88>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6e2:	230f      	movs	r3, #15
 800f6e4:	18fb      	adds	r3, r7, r3
 800f6e6:	2202      	movs	r2, #2
 800f6e8:	701a      	strb	r2, [r3, #0]
    break;
 800f6ea:	e004      	b.n	800f6f6 <USBD_LL_FlushEP+0x88>
    default :
      usb_status = USBD_FAIL;
 800f6ec:	230f      	movs	r3, #15
 800f6ee:	18fb      	adds	r3, r7, r3
 800f6f0:	2202      	movs	r2, #2
 800f6f2:	701a      	strb	r2, [r3, #0]
    break;
 800f6f4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;  
 800f6f6:	230f      	movs	r3, #15
 800f6f8:	18fb      	adds	r3, r7, r3
 800f6fa:	781b      	ldrb	r3, [r3, #0]
}
 800f6fc:	0018      	movs	r0, r3
 800f6fe:	46bd      	mov	sp, r7
 800f700:	b005      	add	sp, #20
 800f702:	bd90      	pop	{r4, r7, pc}

0800f704 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f704:	b590      	push	{r4, r7, lr}
 800f706:	b085      	sub	sp, #20
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	000a      	movs	r2, r1
 800f70e:	1cfb      	adds	r3, r7, #3
 800f710:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f712:	230e      	movs	r3, #14
 800f714:	18fb      	adds	r3, r7, r3
 800f716:	2200      	movs	r2, #0
 800f718:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f71a:	230f      	movs	r3, #15
 800f71c:	18fb      	adds	r3, r7, r3
 800f71e:	2200      	movs	r2, #0
 800f720:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	2388      	movs	r3, #136	; 0x88
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	58d2      	ldr	r2, [r2, r3]
 800f72a:	230e      	movs	r3, #14
 800f72c:	18fc      	adds	r4, r7, r3
 800f72e:	1cfb      	adds	r3, r7, #3
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	0019      	movs	r1, r3
 800f734:	0010      	movs	r0, r2
 800f736:	f7f3 fb19 	bl	8002d6c <HAL_PCD_EP_SetStall>
 800f73a:	0003      	movs	r3, r0
 800f73c:	7023      	strb	r3, [r4, #0]

  switch (hal_status) {
 800f73e:	230e      	movs	r3, #14
 800f740:	18fb      	adds	r3, r7, r3
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	2b01      	cmp	r3, #1
 800f746:	d00d      	beq.n	800f764 <USBD_LL_StallEP+0x60>
 800f748:	dc02      	bgt.n	800f750 <USBD_LL_StallEP+0x4c>
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d005      	beq.n	800f75a <USBD_LL_StallEP+0x56>
 800f74e:	e018      	b.n	800f782 <USBD_LL_StallEP+0x7e>
 800f750:	2b02      	cmp	r3, #2
 800f752:	d00c      	beq.n	800f76e <USBD_LL_StallEP+0x6a>
 800f754:	2b03      	cmp	r3, #3
 800f756:	d00f      	beq.n	800f778 <USBD_LL_StallEP+0x74>
 800f758:	e013      	b.n	800f782 <USBD_LL_StallEP+0x7e>
    case HAL_OK :
      usb_status = USBD_OK;
 800f75a:	230f      	movs	r3, #15
 800f75c:	18fb      	adds	r3, r7, r3
 800f75e:	2200      	movs	r2, #0
 800f760:	701a      	strb	r2, [r3, #0]
    break;
 800f762:	e013      	b.n	800f78c <USBD_LL_StallEP+0x88>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f764:	230f      	movs	r3, #15
 800f766:	18fb      	adds	r3, r7, r3
 800f768:	2202      	movs	r2, #2
 800f76a:	701a      	strb	r2, [r3, #0]
    break;
 800f76c:	e00e      	b.n	800f78c <USBD_LL_StallEP+0x88>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f76e:	230f      	movs	r3, #15
 800f770:	18fb      	adds	r3, r7, r3
 800f772:	2201      	movs	r2, #1
 800f774:	701a      	strb	r2, [r3, #0]
    break;
 800f776:	e009      	b.n	800f78c <USBD_LL_StallEP+0x88>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f778:	230f      	movs	r3, #15
 800f77a:	18fb      	adds	r3, r7, r3
 800f77c:	2202      	movs	r2, #2
 800f77e:	701a      	strb	r2, [r3, #0]
    break;
 800f780:	e004      	b.n	800f78c <USBD_LL_StallEP+0x88>
    default :
      usb_status = USBD_FAIL;
 800f782:	230f      	movs	r3, #15
 800f784:	18fb      	adds	r3, r7, r3
 800f786:	2202      	movs	r2, #2
 800f788:	701a      	strb	r2, [r3, #0]
    break;
 800f78a:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;  
 800f78c:	230f      	movs	r3, #15
 800f78e:	18fb      	adds	r3, r7, r3
 800f790:	781b      	ldrb	r3, [r3, #0]
}
 800f792:	0018      	movs	r0, r3
 800f794:	46bd      	mov	sp, r7
 800f796:	b005      	add	sp, #20
 800f798:	bd90      	pop	{r4, r7, pc}

0800f79a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f79a:	b590      	push	{r4, r7, lr}
 800f79c:	b085      	sub	sp, #20
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
 800f7a2:	000a      	movs	r2, r1
 800f7a4:	1cfb      	adds	r3, r7, #3
 800f7a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7a8:	230e      	movs	r3, #14
 800f7aa:	18fb      	adds	r3, r7, r3
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7b0:	230f      	movs	r3, #15
 800f7b2:	18fb      	adds	r3, r7, r3
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	2388      	movs	r3, #136	; 0x88
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	58d2      	ldr	r2, [r2, r3]
 800f7c0:	230e      	movs	r3, #14
 800f7c2:	18fc      	adds	r4, r7, r3
 800f7c4:	1cfb      	adds	r3, r7, #3
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	0019      	movs	r1, r3
 800f7ca:	0010      	movs	r0, r2
 800f7cc:	f7f3 fb80 	bl	8002ed0 <HAL_PCD_EP_ClrStall>
 800f7d0:	0003      	movs	r3, r0
 800f7d2:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800f7d4:	230e      	movs	r3, #14
 800f7d6:	18fb      	adds	r3, r7, r3
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d00d      	beq.n	800f7fa <USBD_LL_ClearStallEP+0x60>
 800f7de:	dc02      	bgt.n	800f7e6 <USBD_LL_ClearStallEP+0x4c>
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d005      	beq.n	800f7f0 <USBD_LL_ClearStallEP+0x56>
 800f7e4:	e018      	b.n	800f818 <USBD_LL_ClearStallEP+0x7e>
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	d00c      	beq.n	800f804 <USBD_LL_ClearStallEP+0x6a>
 800f7ea:	2b03      	cmp	r3, #3
 800f7ec:	d00f      	beq.n	800f80e <USBD_LL_ClearStallEP+0x74>
 800f7ee:	e013      	b.n	800f818 <USBD_LL_ClearStallEP+0x7e>
    case HAL_OK :
      usb_status = USBD_OK;
 800f7f0:	230f      	movs	r3, #15
 800f7f2:	18fb      	adds	r3, r7, r3
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	701a      	strb	r2, [r3, #0]
    break;
 800f7f8:	e013      	b.n	800f822 <USBD_LL_ClearStallEP+0x88>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f7fa:	230f      	movs	r3, #15
 800f7fc:	18fb      	adds	r3, r7, r3
 800f7fe:	2202      	movs	r2, #2
 800f800:	701a      	strb	r2, [r3, #0]
    break;
 800f802:	e00e      	b.n	800f822 <USBD_LL_ClearStallEP+0x88>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f804:	230f      	movs	r3, #15
 800f806:	18fb      	adds	r3, r7, r3
 800f808:	2201      	movs	r2, #1
 800f80a:	701a      	strb	r2, [r3, #0]
    break;
 800f80c:	e009      	b.n	800f822 <USBD_LL_ClearStallEP+0x88>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f80e:	230f      	movs	r3, #15
 800f810:	18fb      	adds	r3, r7, r3
 800f812:	2202      	movs	r2, #2
 800f814:	701a      	strb	r2, [r3, #0]
    break;
 800f816:	e004      	b.n	800f822 <USBD_LL_ClearStallEP+0x88>
    default :
      usb_status = USBD_FAIL;
 800f818:	230f      	movs	r3, #15
 800f81a:	18fb      	adds	r3, r7, r3
 800f81c:	2202      	movs	r2, #2
 800f81e:	701a      	strb	r2, [r3, #0]
    break;
 800f820:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status; 
 800f822:	230f      	movs	r3, #15
 800f824:	18fb      	adds	r3, r7, r3
 800f826:	781b      	ldrb	r3, [r3, #0]
}
 800f828:	0018      	movs	r0, r3
 800f82a:	46bd      	mov	sp, r7
 800f82c:	b005      	add	sp, #20
 800f82e:	bd90      	pop	{r4, r7, pc}

0800f830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	000a      	movs	r2, r1
 800f83a:	1cfb      	adds	r3, r7, #3
 800f83c:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	2388      	movs	r3, #136	; 0x88
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	58d3      	ldr	r3, [r2, r3]
 800f846:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800f848:	1cfb      	adds	r3, r7, #3
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	b25b      	sxtb	r3, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	da0d      	bge.n	800f86e <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800f852:	1cfb      	adds	r3, r7, #3
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	227f      	movs	r2, #127	; 0x7f
 800f858:	401a      	ands	r2, r3
 800f85a:	68f9      	ldr	r1, [r7, #12]
 800f85c:	202a      	movs	r0, #42	; 0x2a
 800f85e:	0013      	movs	r3, r2
 800f860:	00db      	lsls	r3, r3, #3
 800f862:	1a9b      	subs	r3, r3, r2
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	18cb      	adds	r3, r1, r3
 800f868:	181b      	adds	r3, r3, r0
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	e00d      	b.n	800f88a <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800f86e:	1cfb      	adds	r3, r7, #3
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	227f      	movs	r2, #127	; 0x7f
 800f874:	401a      	ands	r2, r3
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	2385      	movs	r3, #133	; 0x85
 800f87a:	0059      	lsls	r1, r3, #1
 800f87c:	0013      	movs	r3, r2
 800f87e:	00db      	lsls	r3, r3, #3
 800f880:	1a9b      	subs	r3, r3, r2
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	18c3      	adds	r3, r0, r3
 800f886:	185b      	adds	r3, r3, r1
 800f888:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f88a:	0018      	movs	r0, r3
 800f88c:	46bd      	mov	sp, r7
 800f88e:	b004      	add	sp, #16
 800f890:	bd80      	pop	{r7, pc}

0800f892 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f892:	b590      	push	{r4, r7, lr}
 800f894:	b085      	sub	sp, #20
 800f896:	af00      	add	r7, sp, #0
 800f898:	6078      	str	r0, [r7, #4]
 800f89a:	000a      	movs	r2, r1
 800f89c:	1cfb      	adds	r3, r7, #3
 800f89e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8a0:	230e      	movs	r3, #14
 800f8a2:	18fb      	adds	r3, r7, r3
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8a8:	230f      	movs	r3, #15
 800f8aa:	18fb      	adds	r3, r7, r3
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	2388      	movs	r3, #136	; 0x88
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	58d2      	ldr	r2, [r2, r3]
 800f8b8:	230e      	movs	r3, #14
 800f8ba:	18fc      	adds	r4, r7, r3
 800f8bc:	1cfb      	adds	r3, r7, #3
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	0019      	movs	r1, r3
 800f8c2:	0010      	movs	r0, r2
 800f8c4:	f7f2 f969 	bl	8001b9a <HAL_PCD_SetAddress>
 800f8c8:	0003      	movs	r3, r0
 800f8ca:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800f8cc:	230e      	movs	r3, #14
 800f8ce:	18fb      	adds	r3, r7, r3
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d00d      	beq.n	800f8f2 <USBD_LL_SetUSBAddress+0x60>
 800f8d6:	dc02      	bgt.n	800f8de <USBD_LL_SetUSBAddress+0x4c>
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d005      	beq.n	800f8e8 <USBD_LL_SetUSBAddress+0x56>
 800f8dc:	e018      	b.n	800f910 <USBD_LL_SetUSBAddress+0x7e>
 800f8de:	2b02      	cmp	r3, #2
 800f8e0:	d00c      	beq.n	800f8fc <USBD_LL_SetUSBAddress+0x6a>
 800f8e2:	2b03      	cmp	r3, #3
 800f8e4:	d00f      	beq.n	800f906 <USBD_LL_SetUSBAddress+0x74>
 800f8e6:	e013      	b.n	800f910 <USBD_LL_SetUSBAddress+0x7e>
    case HAL_OK :
      usb_status = USBD_OK;
 800f8e8:	230f      	movs	r3, #15
 800f8ea:	18fb      	adds	r3, r7, r3
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	701a      	strb	r2, [r3, #0]
    break;
 800f8f0:	e013      	b.n	800f91a <USBD_LL_SetUSBAddress+0x88>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8f2:	230f      	movs	r3, #15
 800f8f4:	18fb      	adds	r3, r7, r3
 800f8f6:	2202      	movs	r2, #2
 800f8f8:	701a      	strb	r2, [r3, #0]
    break;
 800f8fa:	e00e      	b.n	800f91a <USBD_LL_SetUSBAddress+0x88>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f8fc:	230f      	movs	r3, #15
 800f8fe:	18fb      	adds	r3, r7, r3
 800f900:	2201      	movs	r2, #1
 800f902:	701a      	strb	r2, [r3, #0]
    break;
 800f904:	e009      	b.n	800f91a <USBD_LL_SetUSBAddress+0x88>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f906:	230f      	movs	r3, #15
 800f908:	18fb      	adds	r3, r7, r3
 800f90a:	2202      	movs	r2, #2
 800f90c:	701a      	strb	r2, [r3, #0]
    break;
 800f90e:	e004      	b.n	800f91a <USBD_LL_SetUSBAddress+0x88>
    default :
      usb_status = USBD_FAIL;
 800f910:	230f      	movs	r3, #15
 800f912:	18fb      	adds	r3, r7, r3
 800f914:	2202      	movs	r2, #2
 800f916:	701a      	strb	r2, [r3, #0]
    break;
 800f918:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;  
 800f91a:	230f      	movs	r3, #15
 800f91c:	18fb      	adds	r3, r7, r3
 800f91e:	781b      	ldrb	r3, [r3, #0]
}
 800f920:	0018      	movs	r0, r3
 800f922:	46bd      	mov	sp, r7
 800f924:	b005      	add	sp, #20
 800f926:	bd90      	pop	{r4, r7, pc}

0800f928 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f928:	b5b0      	push	{r4, r5, r7, lr}
 800f92a:	b086      	sub	sp, #24
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	0008      	movs	r0, r1
 800f932:	607a      	str	r2, [r7, #4]
 800f934:	0019      	movs	r1, r3
 800f936:	230b      	movs	r3, #11
 800f938:	18fb      	adds	r3, r7, r3
 800f93a:	1c02      	adds	r2, r0, #0
 800f93c:	701a      	strb	r2, [r3, #0]
 800f93e:	2308      	movs	r3, #8
 800f940:	18fb      	adds	r3, r7, r3
 800f942:	1c0a      	adds	r2, r1, #0
 800f944:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f946:	2316      	movs	r3, #22
 800f948:	18fb      	adds	r3, r7, r3
 800f94a:	2200      	movs	r2, #0
 800f94c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f94e:	2317      	movs	r3, #23
 800f950:	18fb      	adds	r3, r7, r3
 800f952:	2200      	movs	r2, #0
 800f954:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	2388      	movs	r3, #136	; 0x88
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	58d0      	ldr	r0, [r2, r3]
 800f95e:	2308      	movs	r3, #8
 800f960:	18fb      	adds	r3, r7, r3
 800f962:	881d      	ldrh	r5, [r3, #0]
 800f964:	2316      	movs	r3, #22
 800f966:	18fc      	adds	r4, r7, r3
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	230b      	movs	r3, #11
 800f96c:	18fb      	adds	r3, r7, r3
 800f96e:	7819      	ldrb	r1, [r3, #0]
 800f970:	002b      	movs	r3, r5
 800f972:	f7f3 f841 	bl	80029f8 <HAL_PCD_EP_Transmit>
 800f976:	0003      	movs	r3, r0
 800f978:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800f97a:	2316      	movs	r3, #22
 800f97c:	18fb      	adds	r3, r7, r3
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	2b01      	cmp	r3, #1
 800f982:	d00d      	beq.n	800f9a0 <USBD_LL_Transmit+0x78>
 800f984:	dc02      	bgt.n	800f98c <USBD_LL_Transmit+0x64>
 800f986:	2b00      	cmp	r3, #0
 800f988:	d005      	beq.n	800f996 <USBD_LL_Transmit+0x6e>
 800f98a:	e018      	b.n	800f9be <USBD_LL_Transmit+0x96>
 800f98c:	2b02      	cmp	r3, #2
 800f98e:	d00c      	beq.n	800f9aa <USBD_LL_Transmit+0x82>
 800f990:	2b03      	cmp	r3, #3
 800f992:	d00f      	beq.n	800f9b4 <USBD_LL_Transmit+0x8c>
 800f994:	e013      	b.n	800f9be <USBD_LL_Transmit+0x96>
    case HAL_OK :
      usb_status = USBD_OK;
 800f996:	2317      	movs	r3, #23
 800f998:	18fb      	adds	r3, r7, r3
 800f99a:	2200      	movs	r2, #0
 800f99c:	701a      	strb	r2, [r3, #0]
    break;
 800f99e:	e013      	b.n	800f9c8 <USBD_LL_Transmit+0xa0>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9a0:	2317      	movs	r3, #23
 800f9a2:	18fb      	adds	r3, r7, r3
 800f9a4:	2202      	movs	r2, #2
 800f9a6:	701a      	strb	r2, [r3, #0]
    break;
 800f9a8:	e00e      	b.n	800f9c8 <USBD_LL_Transmit+0xa0>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f9aa:	2317      	movs	r3, #23
 800f9ac:	18fb      	adds	r3, r7, r3
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	701a      	strb	r2, [r3, #0]
    break;
 800f9b2:	e009      	b.n	800f9c8 <USBD_LL_Transmit+0xa0>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f9b4:	2317      	movs	r3, #23
 800f9b6:	18fb      	adds	r3, r7, r3
 800f9b8:	2202      	movs	r2, #2
 800f9ba:	701a      	strb	r2, [r3, #0]
    break;
 800f9bc:	e004      	b.n	800f9c8 <USBD_LL_Transmit+0xa0>
    default :
      usb_status = USBD_FAIL;
 800f9be:	2317      	movs	r3, #23
 800f9c0:	18fb      	adds	r3, r7, r3
 800f9c2:	2202      	movs	r2, #2
 800f9c4:	701a      	strb	r2, [r3, #0]
    break;
 800f9c6:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;    
 800f9c8:	2317      	movs	r3, #23
 800f9ca:	18fb      	adds	r3, r7, r3
 800f9cc:	781b      	ldrb	r3, [r3, #0]
}
 800f9ce:	0018      	movs	r0, r3
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	b006      	add	sp, #24
 800f9d4:	bdb0      	pop	{r4, r5, r7, pc}

0800f9d6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f9d6:	b5b0      	push	{r4, r5, r7, lr}
 800f9d8:	b086      	sub	sp, #24
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	60f8      	str	r0, [r7, #12]
 800f9de:	0008      	movs	r0, r1
 800f9e0:	607a      	str	r2, [r7, #4]
 800f9e2:	0019      	movs	r1, r3
 800f9e4:	230b      	movs	r3, #11
 800f9e6:	18fb      	adds	r3, r7, r3
 800f9e8:	1c02      	adds	r2, r0, #0
 800f9ea:	701a      	strb	r2, [r3, #0]
 800f9ec:	2308      	movs	r3, #8
 800f9ee:	18fb      	adds	r3, r7, r3
 800f9f0:	1c0a      	adds	r2, r1, #0
 800f9f2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f4:	2316      	movs	r3, #22
 800f9f6:	18fb      	adds	r3, r7, r3
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9fc:	2317      	movs	r3, #23
 800f9fe:	18fb      	adds	r3, r7, r3
 800fa00:	2200      	movs	r2, #0
 800fa02:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fa04:	68fa      	ldr	r2, [r7, #12]
 800fa06:	2388      	movs	r3, #136	; 0x88
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	58d0      	ldr	r0, [r2, r3]
 800fa0c:	2308      	movs	r3, #8
 800fa0e:	18fb      	adds	r3, r7, r3
 800fa10:	881d      	ldrh	r5, [r3, #0]
 800fa12:	2316      	movs	r3, #22
 800fa14:	18fc      	adds	r4, r7, r3
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	230b      	movs	r3, #11
 800fa1a:	18fb      	adds	r3, r7, r3
 800fa1c:	7819      	ldrb	r1, [r3, #0]
 800fa1e:	002b      	movs	r3, r5
 800fa20:	f7f2 fe4c 	bl	80026bc <HAL_PCD_EP_Receive>
 800fa24:	0003      	movs	r3, r0
 800fa26:	7023      	strb	r3, [r4, #0]
     
  switch (hal_status) {
 800fa28:	2316      	movs	r3, #22
 800fa2a:	18fb      	adds	r3, r7, r3
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	2b01      	cmp	r3, #1
 800fa30:	d00d      	beq.n	800fa4e <USBD_LL_PrepareReceive+0x78>
 800fa32:	dc02      	bgt.n	800fa3a <USBD_LL_PrepareReceive+0x64>
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d005      	beq.n	800fa44 <USBD_LL_PrepareReceive+0x6e>
 800fa38:	e018      	b.n	800fa6c <USBD_LL_PrepareReceive+0x96>
 800fa3a:	2b02      	cmp	r3, #2
 800fa3c:	d00c      	beq.n	800fa58 <USBD_LL_PrepareReceive+0x82>
 800fa3e:	2b03      	cmp	r3, #3
 800fa40:	d00f      	beq.n	800fa62 <USBD_LL_PrepareReceive+0x8c>
 800fa42:	e013      	b.n	800fa6c <USBD_LL_PrepareReceive+0x96>
    case HAL_OK :
      usb_status = USBD_OK;
 800fa44:	2317      	movs	r3, #23
 800fa46:	18fb      	adds	r3, r7, r3
 800fa48:	2200      	movs	r2, #0
 800fa4a:	701a      	strb	r2, [r3, #0]
    break;
 800fa4c:	e013      	b.n	800fa76 <USBD_LL_PrepareReceive+0xa0>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa4e:	2317      	movs	r3, #23
 800fa50:	18fb      	adds	r3, r7, r3
 800fa52:	2202      	movs	r2, #2
 800fa54:	701a      	strb	r2, [r3, #0]
    break;
 800fa56:	e00e      	b.n	800fa76 <USBD_LL_PrepareReceive+0xa0>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa58:	2317      	movs	r3, #23
 800fa5a:	18fb      	adds	r3, r7, r3
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	701a      	strb	r2, [r3, #0]
    break;
 800fa60:	e009      	b.n	800fa76 <USBD_LL_PrepareReceive+0xa0>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa62:	2317      	movs	r3, #23
 800fa64:	18fb      	adds	r3, r7, r3
 800fa66:	2202      	movs	r2, #2
 800fa68:	701a      	strb	r2, [r3, #0]
    break;
 800fa6a:	e004      	b.n	800fa76 <USBD_LL_PrepareReceive+0xa0>
    default :
      usb_status = USBD_FAIL;
 800fa6c:	2317      	movs	r3, #23
 800fa6e:	18fb      	adds	r3, r7, r3
 800fa70:	2202      	movs	r2, #2
 800fa72:	701a      	strb	r2, [r3, #0]
    break;
 800fa74:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status; 
 800fa76:	2317      	movs	r3, #23
 800fa78:	18fb      	adds	r3, r7, r3
 800fa7a:	781b      	ldrb	r3, [r3, #0]
}
 800fa7c:	0018      	movs	r0, r3
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	b006      	add	sp, #24
 800fa82:	bdb0      	pop	{r4, r5, r7, pc}

0800fa84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	000a      	movs	r2, r1
 800fa8e:	1cfb      	adds	r3, r7, #3
 800fa90:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	2388      	movs	r3, #136	; 0x88
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	58d2      	ldr	r2, [r2, r3]
 800fa9a:	1cfb      	adds	r3, r7, #3
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	0019      	movs	r1, r3
 800faa0:	0010      	movs	r0, r2
 800faa2:	f7f2 ff8f 	bl	80029c4 <HAL_PCD_EP_GetRxCount>
 800faa6:	0003      	movs	r3, r0
}
 800faa8:	0018      	movs	r0, r3
 800faaa:	46bd      	mov	sp, r7
 800faac:	b002      	add	sp, #8
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <USBD_LL_Delay>:
  * @brief  Delays routine for the USB device library.
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	0018      	movs	r0, r3
 800fabc:	f7f0 fb94 	bl	80001e8 <HAL_Delay>
}
 800fac0:	46c0      	nop			; (mov r8, r8)
 800fac2:	46bd      	mov	sp, r7
 800fac4:	b002      	add	sp, #8
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fad0:	4b02      	ldr	r3, [pc, #8]	; (800fadc <USBD_static_malloc+0x14>)
}
 800fad2:	0018      	movs	r0, r3
 800fad4:	46bd      	mov	sp, r7
 800fad6:	b002      	add	sp, #8
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	46c0      	nop			; (mov r8, r8)
 800fadc:	20000178 	.word	0x20000178

0800fae0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]

}
 800fae8:	46c0      	nop			; (mov r8, r8)
 800faea:	46bd      	mov	sp, r7
 800faec:	b002      	add	sp, #8
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800faf4:	f7fe fdcb 	bl	800e68e <SystemClock_Config>
}
 800faf8:	46c0      	nop			; (mov r8, r8)
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b082      	sub	sp, #8
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
 800fb06:	000a      	movs	r2, r1
 800fb08:	1cfb      	adds	r3, r7, #3
 800fb0a:	701a      	strb	r2, [r3, #0]
  {
    /* Configure High connection state */

  }
  /* USER CODE END 6 */
}
 800fb0c:	46c0      	nop			; (mov r8, r8)
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	b002      	add	sp, #8
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	0002      	movs	r2, r0
 800fb1c:	6039      	str	r1, [r7, #0]
 800fb1e:	1dfb      	adds	r3, r7, #7
 800fb20:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_FS_DeviceDesc);
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	2212      	movs	r2, #18
 800fb26:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fb28:	4b02      	ldr	r3, [pc, #8]	; (800fb34 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fb2a:	0018      	movs	r0, r3
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	b002      	add	sp, #8
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	46c0      	nop			; (mov r8, r8)
 800fb34:	20000140 	.word	0x20000140

0800fb38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	0002      	movs	r2, r0
 800fb40:	6039      	str	r1, [r7, #0]
 800fb42:	1dfb      	adds	r3, r7, #7
 800fb44:	701a      	strb	r2, [r3, #0]
  *length = sizeof(USBD_LangIDDesc);
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	2204      	movs	r2, #4
 800fb4a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fb4c:	4b02      	ldr	r3, [pc, #8]	; (800fb58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fb4e:	0018      	movs	r0, r3
 800fb50:	46bd      	mov	sp, r7
 800fb52:	b002      	add	sp, #8
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	46c0      	nop			; (mov r8, r8)
 800fb58:	20000154 	.word	0x20000154

0800fb5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	0002      	movs	r2, r0
 800fb64:	6039      	str	r1, [r7, #0]
 800fb66:	1dfb      	adds	r3, r7, #7
 800fb68:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800fb6a:	1dfb      	adds	r3, r7, #7
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d106      	bne.n	800fb80 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	4908      	ldr	r1, [pc, #32]	; (800fb98 <USBD_FS_ProductStrDescriptor+0x3c>)
 800fb76:	4b09      	ldr	r3, [pc, #36]	; (800fb9c <USBD_FS_ProductStrDescriptor+0x40>)
 800fb78:	0018      	movs	r0, r3
 800fb7a:	f7fe fc58 	bl	800e42e <USBD_GetString>
 800fb7e:	e005      	b.n	800fb8c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fb80:	683a      	ldr	r2, [r7, #0]
 800fb82:	4905      	ldr	r1, [pc, #20]	; (800fb98 <USBD_FS_ProductStrDescriptor+0x3c>)
 800fb84:	4b05      	ldr	r3, [pc, #20]	; (800fb9c <USBD_FS_ProductStrDescriptor+0x40>)
 800fb86:	0018      	movs	r0, r3
 800fb88:	f7fe fc51 	bl	800e42e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb8c:	4b02      	ldr	r3, [pc, #8]	; (800fb98 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800fb8e:	0018      	movs	r0, r3
 800fb90:	46bd      	mov	sp, r7
 800fb92:	b002      	add	sp, #8
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	46c0      	nop			; (mov r8, r8)
 800fb98:	2000109c 	.word	0x2000109c
 800fb9c:	080104e0 	.word	0x080104e0

0800fba0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	0002      	movs	r2, r0
 800fba8:	6039      	str	r1, [r7, #0]
 800fbaa:	1dfb      	adds	r3, r7, #7
 800fbac:	701a      	strb	r2, [r3, #0]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	4904      	ldr	r1, [pc, #16]	; (800fbc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fbb2:	4b05      	ldr	r3, [pc, #20]	; (800fbc8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800fbb4:	0018      	movs	r0, r3
 800fbb6:	f7fe fc3a 	bl	800e42e <USBD_GetString>
  return USBD_StrDesc;
 800fbba:	4b02      	ldr	r3, [pc, #8]	; (800fbc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800fbbc:	0018      	movs	r0, r3
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	b002      	add	sp, #8
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	2000109c 	.word	0x2000109c
 800fbc8:	080104f8 	.word	0x080104f8

0800fbcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	0002      	movs	r2, r0
 800fbd4:	6039      	str	r1, [r7, #0]
 800fbd6:	1dfb      	adds	r3, r7, #7
 800fbd8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800fbda:	1dfb      	adds	r3, r7, #7
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d106      	bne.n	800fbf0 <USBD_FS_SerialStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800fbe2:	683a      	ldr	r2, [r7, #0]
 800fbe4:	4908      	ldr	r1, [pc, #32]	; (800fc08 <USBD_FS_SerialStrDescriptor+0x3c>)
 800fbe6:	4b09      	ldr	r3, [pc, #36]	; (800fc0c <USBD_FS_SerialStrDescriptor+0x40>)
 800fbe8:	0018      	movs	r0, r3
 800fbea:	f7fe fc20 	bl	800e42e <USBD_GetString>
 800fbee:	e005      	b.n	800fbfc <USBD_FS_SerialStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800fbf0:	683a      	ldr	r2, [r7, #0]
 800fbf2:	4905      	ldr	r1, [pc, #20]	; (800fc08 <USBD_FS_SerialStrDescriptor+0x3c>)
 800fbf4:	4b05      	ldr	r3, [pc, #20]	; (800fc0c <USBD_FS_SerialStrDescriptor+0x40>)
 800fbf6:	0018      	movs	r0, r3
 800fbf8:	f7fe fc19 	bl	800e42e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fbfc:	4b02      	ldr	r3, [pc, #8]	; (800fc08 <USBD_FS_SerialStrDescriptor+0x3c>)
}
 800fbfe:	0018      	movs	r0, r3
 800fc00:	46bd      	mov	sp, r7
 800fc02:	b002      	add	sp, #8
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	46c0      	nop			; (mov r8, r8)
 800fc08:	2000109c 	.word	0x2000109c
 800fc0c:	0801050c 	.word	0x0801050c

0800fc10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	0002      	movs	r2, r0
 800fc18:	6039      	str	r1, [r7, #0]
 800fc1a:	1dfb      	adds	r3, r7, #7
 800fc1c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800fc1e:	1dfb      	adds	r3, r7, #7
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d106      	bne.n	800fc34 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc26:	683a      	ldr	r2, [r7, #0]
 800fc28:	4908      	ldr	r1, [pc, #32]	; (800fc4c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800fc2a:	4b09      	ldr	r3, [pc, #36]	; (800fc50 <USBD_FS_ConfigStrDescriptor+0x40>)
 800fc2c:	0018      	movs	r0, r3
 800fc2e:	f7fe fbfe 	bl	800e42e <USBD_GetString>
 800fc32:	e005      	b.n	800fc40 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc34:	683a      	ldr	r2, [r7, #0]
 800fc36:	4905      	ldr	r1, [pc, #20]	; (800fc4c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800fc38:	4b05      	ldr	r3, [pc, #20]	; (800fc50 <USBD_FS_ConfigStrDescriptor+0x40>)
 800fc3a:	0018      	movs	r0, r3
 800fc3c:	f7fe fbf7 	bl	800e42e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc40:	4b02      	ldr	r3, [pc, #8]	; (800fc4c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800fc42:	0018      	movs	r0, r3
 800fc44:	46bd      	mov	sp, r7
 800fc46:	b002      	add	sp, #8
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	46c0      	nop			; (mov r8, r8)
 800fc4c:	2000109c 	.word	0x2000109c
 800fc50:	0801051c 	.word	0x0801051c

0800fc54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	0002      	movs	r2, r0
 800fc5c:	6039      	str	r1, [r7, #0]
 800fc5e:	1dfb      	adds	r3, r7, #7
 800fc60:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800fc62:	1dfb      	adds	r3, r7, #7
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d106      	bne.n	800fc78 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	4908      	ldr	r1, [pc, #32]	; (800fc90 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800fc6e:	4b09      	ldr	r3, [pc, #36]	; (800fc94 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800fc70:	0018      	movs	r0, r3
 800fc72:	f7fe fbdc 	bl	800e42e <USBD_GetString>
 800fc76:	e005      	b.n	800fc84 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	4905      	ldr	r1, [pc, #20]	; (800fc90 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800fc7c:	4b05      	ldr	r3, [pc, #20]	; (800fc94 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800fc7e:	0018      	movs	r0, r3
 800fc80:	f7fe fbd5 	bl	800e42e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc84:	4b02      	ldr	r3, [pc, #8]	; (800fc90 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800fc86:	0018      	movs	r0, r3
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	b002      	add	sp, #8
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	46c0      	nop			; (mov r8, r8)
 800fc90:	2000109c 	.word	0x2000109c
 800fc94:	08010528 	.word	0x08010528

0800fc98 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	3b01      	subs	r3, #1
 800fca6:	4a0a      	ldr	r2, [pc, #40]	; (800fcd0 <LL_DMA_EnableChannel+0x38>)
 800fca8:	5cd3      	ldrb	r3, [r2, r3]
 800fcaa:	001a      	movs	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	18d3      	adds	r3, r2, r3
 800fcb0:	683a      	ldr	r2, [r7, #0]
 800fcb2:	3a01      	subs	r2, #1
 800fcb4:	4906      	ldr	r1, [pc, #24]	; (800fcd0 <LL_DMA_EnableChannel+0x38>)
 800fcb6:	5c8a      	ldrb	r2, [r1, r2]
 800fcb8:	0011      	movs	r1, r2
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	188a      	adds	r2, r1, r2
 800fcbe:	6812      	ldr	r2, [r2, #0]
 800fcc0:	2101      	movs	r1, #1
 800fcc2:	430a      	orrs	r2, r1
 800fcc4:	601a      	str	r2, [r3, #0]
}
 800fcc6:	46c0      	nop			; (mov r8, r8)
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	b002      	add	sp, #8
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	46c0      	nop			; (mov r8, r8)
 800fcd0:	08010538 	.word	0x08010538

0800fcd4 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	3b01      	subs	r3, #1
 800fce2:	4a0a      	ldr	r2, [pc, #40]	; (800fd0c <LL_DMA_DisableChannel+0x38>)
 800fce4:	5cd3      	ldrb	r3, [r2, r3]
 800fce6:	001a      	movs	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	18d3      	adds	r3, r2, r3
 800fcec:	683a      	ldr	r2, [r7, #0]
 800fcee:	3a01      	subs	r2, #1
 800fcf0:	4906      	ldr	r1, [pc, #24]	; (800fd0c <LL_DMA_DisableChannel+0x38>)
 800fcf2:	5c8a      	ldrb	r2, [r1, r2]
 800fcf4:	0011      	movs	r1, r2
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	188a      	adds	r2, r1, r2
 800fcfa:	6812      	ldr	r2, [r2, #0]
 800fcfc:	2101      	movs	r1, #1
 800fcfe:	438a      	bics	r2, r1
 800fd00:	601a      	str	r2, [r3, #0]
}
 800fd02:	46c0      	nop			; (mov r8, r8)
 800fd04:	46bd      	mov	sp, r7
 800fd06:	b002      	add	sp, #8
 800fd08:	bd80      	pop	{r7, pc}
 800fd0a:	46c0      	nop			; (mov r8, r8)
 800fd0c:	08010538 	.word	0x08010538

0800fd10 <WS2812_DmaHandler>:
#include "ws2812.h"
#include "stm32f0xx_ll_hal_dma.h"
#include "string.h"
static uint8_t tip;
void WS2812_DmaHandler(void)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */
	DMA1->IFCR = DMA_IFCR_CGIF3;
 800fd14:	4b11      	ldr	r3, [pc, #68]	; (800fd5c <WS2812_DmaHandler+0x4c>)
 800fd16:	2280      	movs	r2, #128	; 0x80
 800fd18:	0052      	lsls	r2, r2, #1
 800fd1a:	605a      	str	r2, [r3, #4]
	while ((SPI1->SR & SPI_SR_FTLVL) != 0)
 800fd1c:	46c0      	nop			; (mov r8, r8)
 800fd1e:	4b10      	ldr	r3, [pc, #64]	; (800fd60 <WS2812_DmaHandler+0x50>)
 800fd20:	689a      	ldr	r2, [r3, #8]
 800fd22:	23c0      	movs	r3, #192	; 0xc0
 800fd24:	015b      	lsls	r3, r3, #5
 800fd26:	4013      	ands	r3, r2
 800fd28:	d1f9      	bne.n	800fd1e <WS2812_DmaHandler+0xe>
	{
		;
	}
	while ((SPI1->SR & SPI_SR_BSY) == SPI_SR_BSY)
 800fd2a:	46c0      	nop			; (mov r8, r8)
 800fd2c:	4b0c      	ldr	r3, [pc, #48]	; (800fd60 <WS2812_DmaHandler+0x50>)
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	2280      	movs	r2, #128	; 0x80
 800fd32:	4013      	ands	r3, r2
 800fd34:	2b80      	cmp	r3, #128	; 0x80
 800fd36:	d0f9      	beq.n	800fd2c <WS2812_DmaHandler+0x1c>
	{
		;
	}

	SPI1->CR2 &= ~(SPI_CR2_TXDMAEN);
 800fd38:	4b09      	ldr	r3, [pc, #36]	; (800fd60 <WS2812_DmaHandler+0x50>)
 800fd3a:	4a09      	ldr	r2, [pc, #36]	; (800fd60 <WS2812_DmaHandler+0x50>)
 800fd3c:	6852      	ldr	r2, [r2, #4]
 800fd3e:	2102      	movs	r1, #2
 800fd40:	438a      	bics	r2, r1
 800fd42:	605a      	str	r2, [r3, #4]
	TIM3->CR1 &= ~(TIM_CR1_CEN);
 800fd44:	4b07      	ldr	r3, [pc, #28]	; (800fd64 <WS2812_DmaHandler+0x54>)
 800fd46:	4a07      	ldr	r2, [pc, #28]	; (800fd64 <WS2812_DmaHandler+0x54>)
 800fd48:	6812      	ldr	r2, [r2, #0]
 800fd4a:	2101      	movs	r1, #1
 800fd4c:	438a      	bics	r2, r1
 800fd4e:	601a      	str	r2, [r3, #0]
	tip = 0;
 800fd50:	4b05      	ldr	r3, [pc, #20]	; (800fd68 <WS2812_DmaHandler+0x58>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	701a      	strb	r2, [r3, #0]
}
 800fd56:	46c0      	nop			; (mov r8, r8)
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	40020000 	.word	0x40020000
 800fd60:	40013000 	.word	0x40013000
 800fd64:	40000400 	.word	0x40000400
 800fd68:	20000398 	.word	0x20000398

0800fd6c <WS2812_SetBr>:

void WS2812_SetBr(rgb_t* data, uint16_t len, uint8_t br)
{
 800fd6c:	b590      	push	{r4, r7, lr}
 800fd6e:	b085      	sub	sp, #20
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	0008      	movs	r0, r1
 800fd76:	0011      	movs	r1, r2
 800fd78:	1cbb      	adds	r3, r7, #2
 800fd7a:	1c02      	adds	r2, r0, #0
 800fd7c:	801a      	strh	r2, [r3, #0]
 800fd7e:	1c7b      	adds	r3, r7, #1
 800fd80:	1c0a      	adds	r2, r1, #0
 800fd82:	701a      	strb	r2, [r3, #0]
	uint16_t i;
	for (i = 0; i < len; i++)
 800fd84:	230e      	movs	r3, #14
 800fd86:	18fb      	adds	r3, r7, r3
 800fd88:	2200      	movs	r2, #0
 800fd8a:	801a      	strh	r2, [r3, #0]
 800fd8c:	e063      	b.n	800fe56 <WS2812_SetBr+0xea>
	{
		(data + i)->r = (uint8_t) ((uint16_t) (((data + i)->r) * br) / 0xff);
 800fd8e:	230e      	movs	r3, #14
 800fd90:	18fb      	adds	r3, r7, r3
 800fd92:	881a      	ldrh	r2, [r3, #0]
 800fd94:	0013      	movs	r3, r2
 800fd96:	005b      	lsls	r3, r3, #1
 800fd98:	189b      	adds	r3, r3, r2
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	18d4      	adds	r4, r2, r3
 800fd9e:	230e      	movs	r3, #14
 800fda0:	18fb      	adds	r3, r7, r3
 800fda2:	881a      	ldrh	r2, [r3, #0]
 800fda4:	0013      	movs	r3, r2
 800fda6:	005b      	lsls	r3, r3, #1
 800fda8:	189b      	adds	r3, r3, r2
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	18d3      	adds	r3, r2, r3
 800fdae:	785b      	ldrb	r3, [r3, #1]
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	1c7a      	adds	r2, r7, #1
 800fdb4:	7812      	ldrb	r2, [r2, #0]
 800fdb6:	b292      	uxth	r2, r2
 800fdb8:	4353      	muls	r3, r2
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	21ff      	movs	r1, #255	; 0xff
 800fdbe:	0018      	movs	r0, r3
 800fdc0:	f000 f9d8 	bl	8010174 <__udivsi3>
 800fdc4:	0003      	movs	r3, r0
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	7063      	strb	r3, [r4, #1]
		(data + i)->g = (uint8_t) ((uint16_t) (((data + i)->g) * br) / 0xff);
 800fdcc:	230e      	movs	r3, #14
 800fdce:	18fb      	adds	r3, r7, r3
 800fdd0:	881a      	ldrh	r2, [r3, #0]
 800fdd2:	0013      	movs	r3, r2
 800fdd4:	005b      	lsls	r3, r3, #1
 800fdd6:	189b      	adds	r3, r3, r2
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	18d4      	adds	r4, r2, r3
 800fddc:	230e      	movs	r3, #14
 800fdde:	18fb      	adds	r3, r7, r3
 800fde0:	881a      	ldrh	r2, [r3, #0]
 800fde2:	0013      	movs	r3, r2
 800fde4:	005b      	lsls	r3, r3, #1
 800fde6:	189b      	adds	r3, r3, r2
 800fde8:	687a      	ldr	r2, [r7, #4]
 800fdea:	18d3      	adds	r3, r2, r3
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	1c7a      	adds	r2, r7, #1
 800fdf2:	7812      	ldrb	r2, [r2, #0]
 800fdf4:	b292      	uxth	r2, r2
 800fdf6:	4353      	muls	r3, r2
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	21ff      	movs	r1, #255	; 0xff
 800fdfc:	0018      	movs	r0, r3
 800fdfe:	f000 f9b9 	bl	8010174 <__udivsi3>
 800fe02:	0003      	movs	r3, r0
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	7023      	strb	r3, [r4, #0]
		(data + i)->b = (uint8_t) ((uint16_t) (((data + i)->b) * br) / 0xff);
 800fe0a:	230e      	movs	r3, #14
 800fe0c:	18fb      	adds	r3, r7, r3
 800fe0e:	881a      	ldrh	r2, [r3, #0]
 800fe10:	0013      	movs	r3, r2
 800fe12:	005b      	lsls	r3, r3, #1
 800fe14:	189b      	adds	r3, r3, r2
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	18d4      	adds	r4, r2, r3
 800fe1a:	230e      	movs	r3, #14
 800fe1c:	18fb      	adds	r3, r7, r3
 800fe1e:	881a      	ldrh	r2, [r3, #0]
 800fe20:	0013      	movs	r3, r2
 800fe22:	005b      	lsls	r3, r3, #1
 800fe24:	189b      	adds	r3, r3, r2
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	18d3      	adds	r3, r2, r3
 800fe2a:	789b      	ldrb	r3, [r3, #2]
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	1c7a      	adds	r2, r7, #1
 800fe30:	7812      	ldrb	r2, [r2, #0]
 800fe32:	b292      	uxth	r2, r2
 800fe34:	4353      	muls	r3, r2
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	21ff      	movs	r1, #255	; 0xff
 800fe3a:	0018      	movs	r0, r3
 800fe3c:	f000 f99a 	bl	8010174 <__udivsi3>
 800fe40:	0003      	movs	r3, r0
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	70a3      	strb	r3, [r4, #2]
	for (i = 0; i < len; i++)
 800fe48:	230e      	movs	r3, #14
 800fe4a:	18fb      	adds	r3, r7, r3
 800fe4c:	881a      	ldrh	r2, [r3, #0]
 800fe4e:	230e      	movs	r3, #14
 800fe50:	18fb      	adds	r3, r7, r3
 800fe52:	3201      	adds	r2, #1
 800fe54:	801a      	strh	r2, [r3, #0]
 800fe56:	230e      	movs	r3, #14
 800fe58:	18fa      	adds	r2, r7, r3
 800fe5a:	1cbb      	adds	r3, r7, #2
 800fe5c:	8812      	ldrh	r2, [r2, #0]
 800fe5e:	881b      	ldrh	r3, [r3, #0]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d394      	bcc.n	800fd8e <WS2812_SetBr+0x22>
	}
}
 800fe64:	46c0      	nop			; (mov r8, r8)
 800fe66:	46bd      	mov	sp, r7
 800fe68:	b005      	add	sp, #20
 800fe6a:	bd90      	pop	{r4, r7, pc}

0800fe6c <WS2812_SetUniColor>:
void WS2812_SetUniColor(rgb_t* data, uint16_t len, led_t pixel)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b086      	sub	sp, #24
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	1d3b      	adds	r3, r7, #4
 800fe76:	601a      	str	r2, [r3, #0]
 800fe78:	230a      	movs	r3, #10
 800fe7a:	18fb      	adds	r3, r7, r3
 800fe7c:	1c0a      	adds	r2, r1, #0
 800fe7e:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	rgb_t rgb_tmp;
	rgb_tmp.r = (uint8_t) ((uint16_t) (pixel.r * pixel.br) / 0xff);
 800fe80:	1d3b      	adds	r3, r7, #4
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	1d3a      	adds	r2, r7, #4
 800fe88:	78d2      	ldrb	r2, [r2, #3]
 800fe8a:	b292      	uxth	r2, r2
 800fe8c:	4353      	muls	r3, r2
 800fe8e:	b29b      	uxth	r3, r3
 800fe90:	21ff      	movs	r1, #255	; 0xff
 800fe92:	0018      	movs	r0, r3
 800fe94:	f000 f96e 	bl	8010174 <__udivsi3>
 800fe98:	0003      	movs	r3, r0
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	b2da      	uxtb	r2, r3
 800fe9e:	2310      	movs	r3, #16
 800fea0:	18fb      	adds	r3, r7, r3
 800fea2:	705a      	strb	r2, [r3, #1]
	rgb_tmp.g = (uint8_t) ((uint16_t) (pixel.g * pixel.br) / 0xff);
 800fea4:	1d3b      	adds	r3, r7, #4
 800fea6:	785b      	ldrb	r3, [r3, #1]
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	1d3a      	adds	r2, r7, #4
 800feac:	78d2      	ldrb	r2, [r2, #3]
 800feae:	b292      	uxth	r2, r2
 800feb0:	4353      	muls	r3, r2
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	21ff      	movs	r1, #255	; 0xff
 800feb6:	0018      	movs	r0, r3
 800feb8:	f000 f95c 	bl	8010174 <__udivsi3>
 800febc:	0003      	movs	r3, r0
 800febe:	b29b      	uxth	r3, r3
 800fec0:	b2da      	uxtb	r2, r3
 800fec2:	2310      	movs	r3, #16
 800fec4:	18fb      	adds	r3, r7, r3
 800fec6:	701a      	strb	r2, [r3, #0]
	rgb_tmp.b = (uint8_t) ((uint16_t) (pixel.b * pixel.br) / 0xff);
 800fec8:	1d3b      	adds	r3, r7, #4
 800feca:	789b      	ldrb	r3, [r3, #2]
 800fecc:	b29b      	uxth	r3, r3
 800fece:	1d3a      	adds	r2, r7, #4
 800fed0:	78d2      	ldrb	r2, [r2, #3]
 800fed2:	b292      	uxth	r2, r2
 800fed4:	4353      	muls	r3, r2
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	21ff      	movs	r1, #255	; 0xff
 800feda:	0018      	movs	r0, r3
 800fedc:	f000 f94a 	bl	8010174 <__udivsi3>
 800fee0:	0003      	movs	r3, r0
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	b2da      	uxtb	r2, r3
 800fee6:	2310      	movs	r3, #16
 800fee8:	18fb      	adds	r3, r7, r3
 800feea:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < len; i++)
 800feec:	2316      	movs	r3, #22
 800feee:	18fb      	adds	r3, r7, r3
 800fef0:	2200      	movs	r2, #0
 800fef2:	801a      	strh	r2, [r3, #0]
 800fef4:	e016      	b.n	800ff24 <WS2812_SetUniColor+0xb8>
	{
		memcpy((void*) (data + i), (void*) &rgb_tmp, sizeof(rgb_t));
 800fef6:	2316      	movs	r3, #22
 800fef8:	18fb      	adds	r3, r7, r3
 800fefa:	881a      	ldrh	r2, [r3, #0]
 800fefc:	0013      	movs	r3, r2
 800fefe:	005b      	lsls	r3, r3, #1
 800ff00:	189b      	adds	r3, r3, r2
 800ff02:	68fa      	ldr	r2, [r7, #12]
 800ff04:	18d2      	adds	r2, r2, r3
 800ff06:	2310      	movs	r3, #16
 800ff08:	18fb      	adds	r3, r7, r3
 800ff0a:	0010      	movs	r0, r2
 800ff0c:	0019      	movs	r1, r3
 800ff0e:	2303      	movs	r3, #3
 800ff10:	001a      	movs	r2, r3
 800ff12:	f000 fa09 	bl	8010328 <memcpy>
	for (i = 0; i < len; i++)
 800ff16:	2316      	movs	r3, #22
 800ff18:	18fb      	adds	r3, r7, r3
 800ff1a:	881a      	ldrh	r2, [r3, #0]
 800ff1c:	2316      	movs	r3, #22
 800ff1e:	18fb      	adds	r3, r7, r3
 800ff20:	3201      	adds	r2, #1
 800ff22:	801a      	strh	r2, [r3, #0]
 800ff24:	2316      	movs	r3, #22
 800ff26:	18fa      	adds	r2, r7, r3
 800ff28:	230a      	movs	r3, #10
 800ff2a:	18fb      	adds	r3, r7, r3
 800ff2c:	8812      	ldrh	r2, [r2, #0]
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d3e0      	bcc.n	800fef6 <WS2812_SetUniColor+0x8a>
	}
}
 800ff34:	46c0      	nop			; (mov r8, r8)
 800ff36:	46bd      	mov	sp, r7
 800ff38:	b006      	add	sp, #24
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <WS2812_SendData>:


int8_t WS2812_SendData(rgb_t* data, uint16_t len, uint8_t row)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	0008      	movs	r0, r1
 800ff46:	0011      	movs	r1, r2
 800ff48:	1cbb      	adds	r3, r7, #2
 800ff4a:	1c02      	adds	r2, r0, #0
 800ff4c:	801a      	strh	r2, [r3, #0]
 800ff4e:	1c7b      	adds	r3, r7, #1
 800ff50:	1c0a      	adds	r2, r1, #0
 800ff52:	701a      	strb	r2, [r3, #0]
	if (tip == 0)
 800ff54:	4b1e      	ldr	r3, [pc, #120]	; (800ffd0 <WS2812_SendData+0x94>)
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d132      	bne.n	800ffc2 <WS2812_SendData+0x86>
	{
		tip = 1;
 800ff5c:	4b1c      	ldr	r3, [pc, #112]	; (800ffd0 <WS2812_SendData+0x94>)
 800ff5e:	2201      	movs	r2, #1
 800ff60:	701a      	strb	r2, [r3, #0]

		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 800ff62:	4b1c      	ldr	r3, [pc, #112]	; (800ffd4 <WS2812_SendData+0x98>)
 800ff64:	2103      	movs	r1, #3
 800ff66:	0018      	movs	r0, r3
 800ff68:	f7ff feb4 	bl	800fcd4 <LL_DMA_DisableChannel>
		DMA1_Channel3->CMAR = data;
 800ff6c:	4b1a      	ldr	r3, [pc, #104]	; (800ffd8 <WS2812_SendData+0x9c>)
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	60da      	str	r2, [r3, #12]
		DMA1_Channel3->CPAR = (uint32_t*) &SPI1->DR;
 800ff72:	4b19      	ldr	r3, [pc, #100]	; (800ffd8 <WS2812_SendData+0x9c>)
 800ff74:	4a19      	ldr	r2, [pc, #100]	; (800ffdc <WS2812_SendData+0xa0>)
 800ff76:	609a      	str	r2, [r3, #8]
		DMA1_Channel3->CNDTR = (uint16_t) (sizeof(rgb_t) * len);
 800ff78:	4b17      	ldr	r3, [pc, #92]	; (800ffd8 <WS2812_SendData+0x9c>)
 800ff7a:	1cba      	adds	r2, r7, #2
 800ff7c:	8812      	ldrh	r2, [r2, #0]
 800ff7e:	1c11      	adds	r1, r2, #0
 800ff80:	1849      	adds	r1, r1, r1
 800ff82:	188a      	adds	r2, r1, r2
 800ff84:	b292      	uxth	r2, r2
 800ff86:	605a      	str	r2, [r3, #4]
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 800ff88:	4b12      	ldr	r3, [pc, #72]	; (800ffd4 <WS2812_SendData+0x98>)
 800ff8a:	2103      	movs	r1, #3
 800ff8c:	0018      	movs	r0, r3
 800ff8e:	f7ff fe83 	bl	800fc98 <LL_DMA_EnableChannel>
		SPI1->CR2 |= SPI_CR2_TXDMAEN;
 800ff92:	4b13      	ldr	r3, [pc, #76]	; (800ffe0 <WS2812_SendData+0xa4>)
 800ff94:	4a12      	ldr	r2, [pc, #72]	; (800ffe0 <WS2812_SendData+0xa4>)
 800ff96:	6852      	ldr	r2, [r2, #4]
 800ff98:	2102      	movs	r1, #2
 800ff9a:	430a      	orrs	r2, r1
 800ff9c:	605a      	str	r2, [r3, #4]
		while ((SPI1->SR & SPI_SR_FTLVL) != (SPI_SR_FTLVL_1+SPI_SR_FTLVL_0))
 800ff9e:	46c0      	nop			; (mov r8, r8)
 800ffa0:	4b0f      	ldr	r3, [pc, #60]	; (800ffe0 <WS2812_SendData+0xa4>)
 800ffa2:	689a      	ldr	r2, [r3, #8]
 800ffa4:	23c0      	movs	r3, #192	; 0xc0
 800ffa6:	015b      	lsls	r3, r3, #5
 800ffa8:	401a      	ands	r2, r3
 800ffaa:	23c0      	movs	r3, #192	; 0xc0
 800ffac:	015b      	lsls	r3, r3, #5
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d1f6      	bne.n	800ffa0 <WS2812_SendData+0x64>
		{
			;
		}
		TIM3->CR1 |= TIM_CR1_CEN;
 800ffb2:	4b0c      	ldr	r3, [pc, #48]	; (800ffe4 <WS2812_SendData+0xa8>)
 800ffb4:	4a0b      	ldr	r2, [pc, #44]	; (800ffe4 <WS2812_SendData+0xa8>)
 800ffb6:	6812      	ldr	r2, [r2, #0]
 800ffb8:	2101      	movs	r1, #1
 800ffba:	430a      	orrs	r2, r1
 800ffbc:	601a      	str	r2, [r3, #0]
		return 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	e001      	b.n	800ffc6 <WS2812_SendData+0x8a>
	}
	else
		return -1;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	425b      	negs	r3, r3

}
 800ffc6:	0018      	movs	r0, r3
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	b002      	add	sp, #8
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	46c0      	nop			; (mov r8, r8)
 800ffd0:	20000398 	.word	0x20000398
 800ffd4:	40020000 	.word	0x40020000
 800ffd8:	40020030 	.word	0x40020030
 800ffdc:	4001300c 	.word	0x4001300c
 800ffe0:	40013000 	.word	0x40013000
 800ffe4:	40000400 	.word	0x40000400

0800ffe8 <WS2812_Init>:


void WS2812_Init(rgb_t* data, uint16_t len)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b088      	sub	sp, #32
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	000a      	movs	r2, r1
 800fff2:	1cbb      	adds	r3, r7, #2
 800fff4:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800fff6:	230c      	movs	r3, #12
 800fff8:	18fb      	adds	r3, r7, r3
 800fffa:	2201      	movs	r2, #1
 800fffc:	605a      	str	r2, [r3, #4]
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800fffe:	230c      	movs	r3, #12
 8010000:	18fb      	adds	r3, r7, r3
 8010002:	2203      	movs	r2, #3
 8010004:	60da      	str	r2, [r3, #12]
	gpio.Pull = GPIO_NOPULL;
 8010006:	230c      	movs	r3, #12
 8010008:	18fb      	adds	r3, r7, r3
 801000a:	2200      	movs	r2, #0
 801000c:	609a      	str	r2, [r3, #8]
	gpio.Pin = GPIO_PIN_7;
 801000e:	230c      	movs	r3, #12
 8010010:	18fb      	adds	r3, r7, r3
 8010012:	2280      	movs	r2, #128	; 0x80
 8010014:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &gpio);
 8010016:	230c      	movs	r3, #12
 8010018:	18fb      	adds	r3, r7, r3
 801001a:	4a1a      	ldr	r2, [pc, #104]	; (8010084 <WS2812_Init+0x9c>)
 801001c:	0019      	movs	r1, r3
 801001e:	0010      	movs	r0, r2
 8010020:	f7f0 ff8a 	bl	8000f38 <HAL_GPIO_Init>
	GPIOB->BSRR = GPIO_BSRR_BS_6 |GPIO_BSRR_BR_7;
 8010024:	4b17      	ldr	r3, [pc, #92]	; (8010084 <WS2812_Init+0x9c>)
 8010026:	4a18      	ldr	r2, [pc, #96]	; (8010088 <WS2812_Init+0xa0>)
 8010028:	619a      	str	r2, [r3, #24]
	DMA1_Channel3->CCR |= DMA_CCR_TCIE;
 801002a:	4b18      	ldr	r3, [pc, #96]	; (801008c <WS2812_Init+0xa4>)
 801002c:	4a17      	ldr	r2, [pc, #92]	; (801008c <WS2812_Init+0xa4>)
 801002e:	6812      	ldr	r2, [r2, #0]
 8010030:	2102      	movs	r1, #2
 8010032:	430a      	orrs	r2, r1
 8010034:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CMAR = data;
 8010036:	4b15      	ldr	r3, [pc, #84]	; (801008c <WS2812_Init+0xa4>)
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	60da      	str	r2, [r3, #12]
	DMA1_Channel3->CPAR = (uint32_t*) &SPI1->DR;
 801003c:	4b13      	ldr	r3, [pc, #76]	; (801008c <WS2812_Init+0xa4>)
 801003e:	4a14      	ldr	r2, [pc, #80]	; (8010090 <WS2812_Init+0xa8>)
 8010040:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CNDTR = (uint16_t) (sizeof(rgb_t) * len);
 8010042:	4b12      	ldr	r3, [pc, #72]	; (801008c <WS2812_Init+0xa4>)
 8010044:	1cba      	adds	r2, r7, #2
 8010046:	8812      	ldrh	r2, [r2, #0]
 8010048:	1c11      	adds	r1, r2, #0
 801004a:	1849      	adds	r1, r1, r1
 801004c:	188a      	adds	r2, r1, r2
 801004e:	b292      	uxth	r2, r2
 8010050:	605a      	str	r2, [r3, #4]

	TIM3->BDTR |= TIM_BDTR_MOE;
 8010052:	4b10      	ldr	r3, [pc, #64]	; (8010094 <WS2812_Init+0xac>)
 8010054:	4a0f      	ldr	r2, [pc, #60]	; (8010094 <WS2812_Init+0xac>)
 8010056:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8010058:	2180      	movs	r1, #128	; 0x80
 801005a:	0209      	lsls	r1, r1, #8
 801005c:	430a      	orrs	r2, r1
 801005e:	645a      	str	r2, [r3, #68]	; 0x44
	TIM3->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E;
 8010060:	4b0c      	ldr	r3, [pc, #48]	; (8010094 <WS2812_Init+0xac>)
 8010062:	2212      	movs	r2, #18
 8010064:	32ff      	adds	r2, #255	; 0xff
 8010066:	621a      	str	r2, [r3, #32]
//	TIM3->CR1 |= TIM_CR1_CEN;

	SPI1->CR1 |= SPI_CR1_SPE;
 8010068:	4b0b      	ldr	r3, [pc, #44]	; (8010098 <WS2812_Init+0xb0>)
 801006a:	4a0b      	ldr	r2, [pc, #44]	; (8010098 <WS2812_Init+0xb0>)
 801006c:	6812      	ldr	r2, [r2, #0]
 801006e:	2140      	movs	r1, #64	; 0x40
 8010070:	430a      	orrs	r2, r1
 8010072:	601a      	str	r2, [r3, #0]
	GPIOB->BSRR = GPIO_BSRR_BS_6 | GPIO_BSRR_BR_7;
 8010074:	4b03      	ldr	r3, [pc, #12]	; (8010084 <WS2812_Init+0x9c>)
 8010076:	4a04      	ldr	r2, [pc, #16]	; (8010088 <WS2812_Init+0xa0>)
 8010078:	619a      	str	r2, [r3, #24]

}
 801007a:	46c0      	nop			; (mov r8, r8)
 801007c:	46bd      	mov	sp, r7
 801007e:	b008      	add	sp, #32
 8010080:	bd80      	pop	{r7, pc}
 8010082:	46c0      	nop			; (mov r8, r8)
 8010084:	48000400 	.word	0x48000400
 8010088:	00800040 	.word	0x00800040
 801008c:	40020030 	.word	0x40020030
 8010090:	4001300c 	.word	0x4001300c
 8010094:	40000400 	.word	0x40000400
 8010098:	40013000 	.word	0x40013000

0801009c <WS2812_Cfg>:
#include "string.h"
led_t tmp_led;
uint8_t update_flag;
rgb_t myLedString[MY_LED_STRING_LEN];
void WS2812_Cfg(void)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	af00      	add	r7, sp, #0
	memset(&tmp_led,0,sizeof(led_t));
 80100a0:	4b13      	ldr	r3, [pc, #76]	; (80100f0 <WS2812_Cfg+0x54>)
 80100a2:	2204      	movs	r2, #4
 80100a4:	2100      	movs	r1, #0
 80100a6:	0018      	movs	r0, r3
 80100a8:	f000 f947 	bl	801033a <memset>
	memset(myLedString,0,sizeof(rgb_t)*MY_LED_STRING_LEN);
 80100ac:	4b11      	ldr	r3, [pc, #68]	; (80100f4 <WS2812_Cfg+0x58>)
 80100ae:	224b      	movs	r2, #75	; 0x4b
 80100b0:	2100      	movs	r1, #0
 80100b2:	0018      	movs	r0, r3
 80100b4:	f000 f941 	bl	801033a <memset>
	WS2812_SetUniColor(myLedString, MY_LED_STRING_LEN, tmp_led);
 80100b8:	4b0d      	ldr	r3, [pc, #52]	; (80100f0 <WS2812_Cfg+0x54>)
 80100ba:	480e      	ldr	r0, [pc, #56]	; (80100f4 <WS2812_Cfg+0x58>)
 80100bc:	781a      	ldrb	r2, [r3, #0]
 80100be:	7859      	ldrb	r1, [r3, #1]
 80100c0:	0209      	lsls	r1, r1, #8
 80100c2:	430a      	orrs	r2, r1
 80100c4:	7899      	ldrb	r1, [r3, #2]
 80100c6:	0409      	lsls	r1, r1, #16
 80100c8:	430a      	orrs	r2, r1
 80100ca:	78db      	ldrb	r3, [r3, #3]
 80100cc:	061b      	lsls	r3, r3, #24
 80100ce:	4313      	orrs	r3, r2
 80100d0:	2200      	movs	r2, #0
 80100d2:	001a      	movs	r2, r3
 80100d4:	2119      	movs	r1, #25
 80100d6:	f7ff fec9 	bl	800fe6c <WS2812_SetUniColor>
	WS2812_Init(myLedString, MY_LED_STRING_LEN);
 80100da:	4b06      	ldr	r3, [pc, #24]	; (80100f4 <WS2812_Cfg+0x58>)
 80100dc:	2119      	movs	r1, #25
 80100de:	0018      	movs	r0, r3
 80100e0:	f7ff ff82 	bl	800ffe8 <WS2812_Init>
	update_flag = 1;
 80100e4:	4b04      	ldr	r3, [pc, #16]	; (80100f8 <WS2812_Cfg+0x5c>)
 80100e6:	2201      	movs	r2, #1
 80100e8:	701a      	strb	r2, [r3, #0]
}
 80100ea:	46c0      	nop			; (mov r8, r8)
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	200012e8 	.word	0x200012e8
 80100f4:	2000129c 	.word	0x2000129c
 80100f8:	200012e7 	.word	0x200012e7

080100fc <WS2812_Main>:
void WS2812_Main(void)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
	uint16_t i;
	if (update_flag == 1)
 8010102:	4b18      	ldr	r3, [pc, #96]	; (8010164 <WS2812_Main+0x68>)
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	2b01      	cmp	r3, #1
 8010108:	d127      	bne.n	801015a <WS2812_Main+0x5e>
	{
		update_flag = 0;
 801010a:	4b16      	ldr	r3, [pc, #88]	; (8010164 <WS2812_Main+0x68>)
 801010c:	2200      	movs	r2, #0
 801010e:	701a      	strb	r2, [r3, #0]
		WS2812_SetUniColor(myLedString, MY_LED_STRING_LEN, tmp_led);
 8010110:	4b15      	ldr	r3, [pc, #84]	; (8010168 <WS2812_Main+0x6c>)
 8010112:	4816      	ldr	r0, [pc, #88]	; (801016c <WS2812_Main+0x70>)
 8010114:	781a      	ldrb	r2, [r3, #0]
 8010116:	7859      	ldrb	r1, [r3, #1]
 8010118:	0209      	lsls	r1, r1, #8
 801011a:	430a      	orrs	r2, r1
 801011c:	7899      	ldrb	r1, [r3, #2]
 801011e:	0409      	lsls	r1, r1, #16
 8010120:	430a      	orrs	r2, r1
 8010122:	78db      	ldrb	r3, [r3, #3]
 8010124:	061b      	lsls	r3, r3, #24
 8010126:	4313      	orrs	r3, r2
 8010128:	2200      	movs	r2, #0
 801012a:	001a      	movs	r2, r3
 801012c:	2119      	movs	r1, #25
 801012e:	f7ff fe9d 	bl	800fe6c <WS2812_SetUniColor>
		WS2812_SendData(myLedString, MY_LED_STRING_LEN, 0);
 8010132:	4b0e      	ldr	r3, [pc, #56]	; (801016c <WS2812_Main+0x70>)
 8010134:	2200      	movs	r2, #0
 8010136:	2119      	movs	r1, #25
 8010138:	0018      	movs	r0, r3
 801013a:	f7ff feff 	bl	800ff3c <WS2812_SendData>
		for (i = 0; i < 0xfff; i++)
 801013e:	1dbb      	adds	r3, r7, #6
 8010140:	2200      	movs	r2, #0
 8010142:	801a      	strh	r2, [r3, #0]
 8010144:	e004      	b.n	8010150 <WS2812_Main+0x54>
 8010146:	1dbb      	adds	r3, r7, #6
 8010148:	881a      	ldrh	r2, [r3, #0]
 801014a:	1dbb      	adds	r3, r7, #6
 801014c:	3201      	adds	r2, #1
 801014e:	801a      	strh	r2, [r3, #0]
 8010150:	1dbb      	adds	r3, r7, #6
 8010152:	881b      	ldrh	r3, [r3, #0]
 8010154:	4a06      	ldr	r2, [pc, #24]	; (8010170 <WS2812_Main+0x74>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d9f5      	bls.n	8010146 <WS2812_Main+0x4a>
		{
			;
		}

	}
}
 801015a:	46c0      	nop			; (mov r8, r8)
 801015c:	46bd      	mov	sp, r7
 801015e:	b002      	add	sp, #8
 8010160:	bd80      	pop	{r7, pc}
 8010162:	46c0      	nop			; (mov r8, r8)
 8010164:	200012e7 	.word	0x200012e7
 8010168:	200012e8 	.word	0x200012e8
 801016c:	2000129c 	.word	0x2000129c
 8010170:	00000ffe 	.word	0x00000ffe

08010174 <__udivsi3>:
 8010174:	2200      	movs	r2, #0
 8010176:	0843      	lsrs	r3, r0, #1
 8010178:	428b      	cmp	r3, r1
 801017a:	d374      	bcc.n	8010266 <__udivsi3+0xf2>
 801017c:	0903      	lsrs	r3, r0, #4
 801017e:	428b      	cmp	r3, r1
 8010180:	d35f      	bcc.n	8010242 <__udivsi3+0xce>
 8010182:	0a03      	lsrs	r3, r0, #8
 8010184:	428b      	cmp	r3, r1
 8010186:	d344      	bcc.n	8010212 <__udivsi3+0x9e>
 8010188:	0b03      	lsrs	r3, r0, #12
 801018a:	428b      	cmp	r3, r1
 801018c:	d328      	bcc.n	80101e0 <__udivsi3+0x6c>
 801018e:	0c03      	lsrs	r3, r0, #16
 8010190:	428b      	cmp	r3, r1
 8010192:	d30d      	bcc.n	80101b0 <__udivsi3+0x3c>
 8010194:	22ff      	movs	r2, #255	; 0xff
 8010196:	0209      	lsls	r1, r1, #8
 8010198:	ba12      	rev	r2, r2
 801019a:	0c03      	lsrs	r3, r0, #16
 801019c:	428b      	cmp	r3, r1
 801019e:	d302      	bcc.n	80101a6 <__udivsi3+0x32>
 80101a0:	1212      	asrs	r2, r2, #8
 80101a2:	0209      	lsls	r1, r1, #8
 80101a4:	d065      	beq.n	8010272 <__udivsi3+0xfe>
 80101a6:	0b03      	lsrs	r3, r0, #12
 80101a8:	428b      	cmp	r3, r1
 80101aa:	d319      	bcc.n	80101e0 <__udivsi3+0x6c>
 80101ac:	e000      	b.n	80101b0 <__udivsi3+0x3c>
 80101ae:	0a09      	lsrs	r1, r1, #8
 80101b0:	0bc3      	lsrs	r3, r0, #15
 80101b2:	428b      	cmp	r3, r1
 80101b4:	d301      	bcc.n	80101ba <__udivsi3+0x46>
 80101b6:	03cb      	lsls	r3, r1, #15
 80101b8:	1ac0      	subs	r0, r0, r3
 80101ba:	4152      	adcs	r2, r2
 80101bc:	0b83      	lsrs	r3, r0, #14
 80101be:	428b      	cmp	r3, r1
 80101c0:	d301      	bcc.n	80101c6 <__udivsi3+0x52>
 80101c2:	038b      	lsls	r3, r1, #14
 80101c4:	1ac0      	subs	r0, r0, r3
 80101c6:	4152      	adcs	r2, r2
 80101c8:	0b43      	lsrs	r3, r0, #13
 80101ca:	428b      	cmp	r3, r1
 80101cc:	d301      	bcc.n	80101d2 <__udivsi3+0x5e>
 80101ce:	034b      	lsls	r3, r1, #13
 80101d0:	1ac0      	subs	r0, r0, r3
 80101d2:	4152      	adcs	r2, r2
 80101d4:	0b03      	lsrs	r3, r0, #12
 80101d6:	428b      	cmp	r3, r1
 80101d8:	d301      	bcc.n	80101de <__udivsi3+0x6a>
 80101da:	030b      	lsls	r3, r1, #12
 80101dc:	1ac0      	subs	r0, r0, r3
 80101de:	4152      	adcs	r2, r2
 80101e0:	0ac3      	lsrs	r3, r0, #11
 80101e2:	428b      	cmp	r3, r1
 80101e4:	d301      	bcc.n	80101ea <__udivsi3+0x76>
 80101e6:	02cb      	lsls	r3, r1, #11
 80101e8:	1ac0      	subs	r0, r0, r3
 80101ea:	4152      	adcs	r2, r2
 80101ec:	0a83      	lsrs	r3, r0, #10
 80101ee:	428b      	cmp	r3, r1
 80101f0:	d301      	bcc.n	80101f6 <__udivsi3+0x82>
 80101f2:	028b      	lsls	r3, r1, #10
 80101f4:	1ac0      	subs	r0, r0, r3
 80101f6:	4152      	adcs	r2, r2
 80101f8:	0a43      	lsrs	r3, r0, #9
 80101fa:	428b      	cmp	r3, r1
 80101fc:	d301      	bcc.n	8010202 <__udivsi3+0x8e>
 80101fe:	024b      	lsls	r3, r1, #9
 8010200:	1ac0      	subs	r0, r0, r3
 8010202:	4152      	adcs	r2, r2
 8010204:	0a03      	lsrs	r3, r0, #8
 8010206:	428b      	cmp	r3, r1
 8010208:	d301      	bcc.n	801020e <__udivsi3+0x9a>
 801020a:	020b      	lsls	r3, r1, #8
 801020c:	1ac0      	subs	r0, r0, r3
 801020e:	4152      	adcs	r2, r2
 8010210:	d2cd      	bcs.n	80101ae <__udivsi3+0x3a>
 8010212:	09c3      	lsrs	r3, r0, #7
 8010214:	428b      	cmp	r3, r1
 8010216:	d301      	bcc.n	801021c <__udivsi3+0xa8>
 8010218:	01cb      	lsls	r3, r1, #7
 801021a:	1ac0      	subs	r0, r0, r3
 801021c:	4152      	adcs	r2, r2
 801021e:	0983      	lsrs	r3, r0, #6
 8010220:	428b      	cmp	r3, r1
 8010222:	d301      	bcc.n	8010228 <__udivsi3+0xb4>
 8010224:	018b      	lsls	r3, r1, #6
 8010226:	1ac0      	subs	r0, r0, r3
 8010228:	4152      	adcs	r2, r2
 801022a:	0943      	lsrs	r3, r0, #5
 801022c:	428b      	cmp	r3, r1
 801022e:	d301      	bcc.n	8010234 <__udivsi3+0xc0>
 8010230:	014b      	lsls	r3, r1, #5
 8010232:	1ac0      	subs	r0, r0, r3
 8010234:	4152      	adcs	r2, r2
 8010236:	0903      	lsrs	r3, r0, #4
 8010238:	428b      	cmp	r3, r1
 801023a:	d301      	bcc.n	8010240 <__udivsi3+0xcc>
 801023c:	010b      	lsls	r3, r1, #4
 801023e:	1ac0      	subs	r0, r0, r3
 8010240:	4152      	adcs	r2, r2
 8010242:	08c3      	lsrs	r3, r0, #3
 8010244:	428b      	cmp	r3, r1
 8010246:	d301      	bcc.n	801024c <__udivsi3+0xd8>
 8010248:	00cb      	lsls	r3, r1, #3
 801024a:	1ac0      	subs	r0, r0, r3
 801024c:	4152      	adcs	r2, r2
 801024e:	0883      	lsrs	r3, r0, #2
 8010250:	428b      	cmp	r3, r1
 8010252:	d301      	bcc.n	8010258 <__udivsi3+0xe4>
 8010254:	008b      	lsls	r3, r1, #2
 8010256:	1ac0      	subs	r0, r0, r3
 8010258:	4152      	adcs	r2, r2
 801025a:	0843      	lsrs	r3, r0, #1
 801025c:	428b      	cmp	r3, r1
 801025e:	d301      	bcc.n	8010264 <__udivsi3+0xf0>
 8010260:	004b      	lsls	r3, r1, #1
 8010262:	1ac0      	subs	r0, r0, r3
 8010264:	4152      	adcs	r2, r2
 8010266:	1a41      	subs	r1, r0, r1
 8010268:	d200      	bcs.n	801026c <__udivsi3+0xf8>
 801026a:	4601      	mov	r1, r0
 801026c:	4152      	adcs	r2, r2
 801026e:	4610      	mov	r0, r2
 8010270:	4770      	bx	lr
 8010272:	e7ff      	b.n	8010274 <__udivsi3+0x100>
 8010274:	b501      	push	{r0, lr}
 8010276:	2000      	movs	r0, #0
 8010278:	f000 f806 	bl	8010288 <__aeabi_idiv0>
 801027c:	bd02      	pop	{r1, pc}
 801027e:	46c0      	nop			; (mov r8, r8)

08010280 <__aeabi_uidivmod>:
 8010280:	2900      	cmp	r1, #0
 8010282:	d0f7      	beq.n	8010274 <__udivsi3+0x100>
 8010284:	e776      	b.n	8010174 <__udivsi3>
 8010286:	4770      	bx	lr

08010288 <__aeabi_idiv0>:
 8010288:	4770      	bx	lr
 801028a:	46c0      	nop			; (mov r8, r8)

0801028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801028c:	480d      	ldr	r0, [pc, #52]	; (80102c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801028e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8010290:	480d      	ldr	r0, [pc, #52]	; (80102c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8010292:	490e      	ldr	r1, [pc, #56]	; (80102cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8010294:	4a0e      	ldr	r2, [pc, #56]	; (80102d0 <LoopForever+0xe>)
  movs r3, #0
 8010296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010298:	e002      	b.n	80102a0 <LoopCopyDataInit>

0801029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801029e:	3304      	adds	r3, #4

080102a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80102a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80102a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80102a4:	d3f9      	bcc.n	801029a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80102a6:	4a0b      	ldr	r2, [pc, #44]	; (80102d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80102a8:	4c0b      	ldr	r4, [pc, #44]	; (80102d8 <LoopForever+0x16>)
  movs r3, #0
 80102aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80102ac:	e001      	b.n	80102b2 <LoopFillZerobss>

080102ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80102ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80102b0:	3204      	adds	r2, #4

080102b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80102b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80102b4:	d3fb      	bcc.n	80102ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80102b6:	f7fe fd25 	bl	800ed04 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80102ba:	f000 f811 	bl	80102e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80102be:	f7fe f9d1 	bl	800e664 <main>

080102c2 <LoopForever>:

LoopForever:
    b LoopForever
 80102c2:	e7fe      	b.n	80102c2 <LoopForever>
  ldr   r0, =_estack
 80102c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80102c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80102cc:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80102d0:	08010548 	.word	0x08010548
  ldr r2, =_sbss
 80102d4:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80102d8:	200012ec 	.word	0x200012ec

080102dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80102dc:	e7fe      	b.n	80102dc <ADC1_COMP_IRQHandler>
	...

080102e0 <__libc_init_array>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	2600      	movs	r6, #0
 80102e4:	4d0c      	ldr	r5, [pc, #48]	; (8010318 <__libc_init_array+0x38>)
 80102e6:	4c0d      	ldr	r4, [pc, #52]	; (801031c <__libc_init_array+0x3c>)
 80102e8:	1b64      	subs	r4, r4, r5
 80102ea:	10a4      	asrs	r4, r4, #2
 80102ec:	42a6      	cmp	r6, r4
 80102ee:	d109      	bne.n	8010304 <__libc_init_array+0x24>
 80102f0:	2600      	movs	r6, #0
 80102f2:	f000 f82b 	bl	801034c <_init>
 80102f6:	4d0a      	ldr	r5, [pc, #40]	; (8010320 <__libc_init_array+0x40>)
 80102f8:	4c0a      	ldr	r4, [pc, #40]	; (8010324 <__libc_init_array+0x44>)
 80102fa:	1b64      	subs	r4, r4, r5
 80102fc:	10a4      	asrs	r4, r4, #2
 80102fe:	42a6      	cmp	r6, r4
 8010300:	d105      	bne.n	801030e <__libc_init_array+0x2e>
 8010302:	bd70      	pop	{r4, r5, r6, pc}
 8010304:	00b3      	lsls	r3, r6, #2
 8010306:	58eb      	ldr	r3, [r5, r3]
 8010308:	4798      	blx	r3
 801030a:	3601      	adds	r6, #1
 801030c:	e7ee      	b.n	80102ec <__libc_init_array+0xc>
 801030e:	00b3      	lsls	r3, r6, #2
 8010310:	58eb      	ldr	r3, [r5, r3]
 8010312:	4798      	blx	r3
 8010314:	3601      	adds	r6, #1
 8010316:	e7f2      	b.n	80102fe <__libc_init_array+0x1e>
 8010318:	08010540 	.word	0x08010540
 801031c:	08010540 	.word	0x08010540
 8010320:	08010540 	.word	0x08010540
 8010324:	08010544 	.word	0x08010544

08010328 <memcpy>:
 8010328:	2300      	movs	r3, #0
 801032a:	b510      	push	{r4, lr}
 801032c:	429a      	cmp	r2, r3
 801032e:	d100      	bne.n	8010332 <memcpy+0xa>
 8010330:	bd10      	pop	{r4, pc}
 8010332:	5ccc      	ldrb	r4, [r1, r3]
 8010334:	54c4      	strb	r4, [r0, r3]
 8010336:	3301      	adds	r3, #1
 8010338:	e7f8      	b.n	801032c <memcpy+0x4>

0801033a <memset>:
 801033a:	0003      	movs	r3, r0
 801033c:	1882      	adds	r2, r0, r2
 801033e:	4293      	cmp	r3, r2
 8010340:	d100      	bne.n	8010344 <memset+0xa>
 8010342:	4770      	bx	lr
 8010344:	7019      	strb	r1, [r3, #0]
 8010346:	3301      	adds	r3, #1
 8010348:	e7f9      	b.n	801033e <memset+0x4>
	...

0801034c <_init>:
 801034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801034e:	46c0      	nop			; (mov r8, r8)
 8010350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010352:	bc08      	pop	{r3}
 8010354:	469e      	mov	lr, r3
 8010356:	4770      	bx	lr

08010358 <_fini>:
 8010358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035a:	46c0      	nop			; (mov r8, r8)
 801035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801035e:	bc08      	pop	{r3}
 8010360:	469e      	mov	lr, r3
 8010362:	4770      	bx	lr
